
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00002e42  00002ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080016a  0080016a  00002f40  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d7f  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000147a  00000000  00000000  00008de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004205  00000000  00000000  0000a25d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b70  00000000  00000000  0000e464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a44  00000000  00000000  0000efd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005916  00000000  00000000  0000fa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0001532e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 02 	jmp	0x564	; 0x564 <__ctors_end>
       4:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      10:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      14:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      18:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      1c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      20:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      24:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      28:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      2c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      30:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      34:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      38:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      3c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      40:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      44:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      48:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      4c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      50:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      54:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      58:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      5c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      60:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      64:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 3e       	cpi	r16, 0xE0	; 224
      6e:	5b 4f       	sbci	r21, 0xFB	; 251
      70:	5b 3e       	cpi	r21, 0xEB	; 235
      72:	3e 6b       	ori	r19, 0xBE	; 190
      74:	4f 6b       	ori	r20, 0xBF	; 191
      76:	3e 1c       	adc	r3, r14
      78:	3e 7c       	andi	r19, 0xCE	; 206
      7a:	3e 1c       	adc	r3, r14
      7c:	18 3c       	cpi	r17, 0xC8	; 200
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	18 1c       	adc	r1, r8
      82:	57 7d       	andi	r21, 0xD7	; 215
      84:	57 1c       	adc	r5, r7
      86:	1c 5e       	subi	r17, 0xEC	; 236
      88:	7f 5e       	subi	r23, 0xEF	; 239
      8a:	1c 00       	.word	0x001c	; ????
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	18 00       	.word	0x0018	; ????
      90:	ff e7       	ldi	r31, 0x7F	; 127
      92:	c3 e7       	ldi	r28, 0x73	; 115
      94:	ff 00       	.word	0x00ff	; ????
      96:	18 24       	eor	r1, r8
      98:	18 00       	.word	0x0018	; ????
      9a:	ff e7       	ldi	r31, 0x7F	; 127
      9c:	db e7       	ldi	r29, 0x7B	; 123
      9e:	ff 30       	cpi	r31, 0x0F	; 15
      a0:	48 3a       	cpi	r20, 0xA8	; 168
      a2:	06 0e       	add	r0, r22
      a4:	26 29       	or	r18, r6
      a6:	79 29       	or	r23, r9
      a8:	26 40       	sbci	r18, 0x06	; 6
      aa:	7f 05       	cpc	r23, r15
      ac:	05 07       	cpc	r16, r21
      ae:	40 7f       	andi	r20, 0xF0	; 240
      b0:	05 25       	eor	r16, r5
      b2:	3f 5a       	subi	r19, 0xAF	; 175
      b4:	3c e7       	ldi	r19, 0x7C	; 124
      b6:	3c 5a       	subi	r19, 0xAC	; 172
      b8:	7f 3e       	cpi	r23, 0xEF	; 239
      ba:	1c 1c       	adc	r1, r12
      bc:	08 08       	sbc	r0, r8
      be:	1c 1c       	adc	r1, r12
      c0:	3e 7f       	andi	r19, 0xFE	; 254
      c2:	14 22       	and	r1, r20
      c4:	7f 22       	and	r7, r31
      c6:	14 5f       	subi	r17, 0xF4	; 244
      c8:	5f 00       	.word	0x005f	; ????
      ca:	5f 5f       	subi	r21, 0xFF	; 255
      cc:	06 09       	sbc	r16, r6
      ce:	7f 01       	movw	r14, r30
      d0:	7f 00       	.word	0x007f	; ????
      d2:	66 89       	ldd	r22, Z+22	; 0x16
      d4:	95 6a       	ori	r25, 0xA5	; 165
      d6:	60 60       	ori	r22, 0x00	; 0
      d8:	60 60       	ori	r22, 0x00	; 0
      da:	60 94       	com	r6
      dc:	a2 ff       	sbrs	r26, 2
      de:	a2 94       	swap	r10
      e0:	08 04       	cpc	r0, r8
      e2:	7e 04       	cpc	r7, r14
      e4:	08 10       	cpse	r0, r8
      e6:	20 7e       	andi	r18, 0xE0	; 224
      e8:	20 10       	cpse	r2, r0
      ea:	08 08       	sbc	r0, r8
      ec:	2a 1c       	adc	r2, r10
      ee:	08 08       	sbc	r0, r8
      f0:	1c 2a       	or	r1, r28
      f2:	08 08       	sbc	r0, r8
      f4:	1e 10       	cpse	r1, r14
      f6:	10 10       	cpse	r1, r0
      f8:	10 0c       	add	r1, r0
      fa:	1e 0c       	add	r1, r14
      fc:	1e 0c       	add	r1, r14
      fe:	30 38       	cpi	r19, 0x80	; 128
     100:	3e 38       	cpi	r19, 0x8E	; 142
     102:	30 06       	cpc	r3, r16
     104:	0e 3e       	cpi	r16, 0xEE	; 238
     106:	0e 06       	cpc	r0, r30
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 5f       	subi	r16, 0xF0	; 240
     110:	00 00       	nop
     112:	00 07       	cpc	r16, r16
     114:	00 07       	cpc	r16, r16
     116:	00 14       	cp	r0, r0
     118:	7f 14       	cp	r7, r15
     11a:	7f 14       	cp	r7, r15
     11c:	24 2a       	or	r2, r20
     11e:	7f 2a       	or	r7, r31
     120:	12 23       	and	r17, r18
     122:	13 08       	sbc	r1, r3
     124:	64 62       	ori	r22, 0x24	; 36
     126:	36 49       	sbci	r19, 0x96	; 150
     128:	56 20       	and	r5, r6
     12a:	50 00       	.word	0x0050	; ????
     12c:	08 07       	cpc	r16, r24
     12e:	03 00       	.word	0x0003	; ????
     130:	00 1c       	adc	r0, r0
     132:	22 41       	sbci	r18, 0x12	; 18
     134:	00 00       	nop
     136:	41 22       	and	r4, r17
     138:	1c 00       	.word	0x001c	; ????
     13a:	2a 1c       	adc	r2, r10
     13c:	7f 1c       	adc	r7, r15
     13e:	2a 08       	sbc	r2, r10
     140:	08 3e       	cpi	r16, 0xE8	; 232
     142:	08 08       	sbc	r0, r8
     144:	00 80       	ld	r0, Z
     146:	70 30       	cpi	r23, 0x00	; 0
     148:	00 08       	sbc	r0, r0
     14a:	08 08       	sbc	r0, r8
     14c:	08 08       	sbc	r0, r8
     14e:	00 00       	nop
     150:	60 60       	ori	r22, 0x00	; 0
     152:	00 20       	and	r0, r0
     154:	10 08       	sbc	r1, r0
     156:	04 02       	muls	r16, r20
     158:	3e 51       	subi	r19, 0x1E	; 30
     15a:	49 45       	sbci	r20, 0x59	; 89
     15c:	3e 00       	.word	0x003e	; ????
     15e:	42 7f       	andi	r20, 0xF2	; 242
     160:	40 00       	.word	0x0040	; ????
     162:	72 49       	sbci	r23, 0x92	; 146
     164:	49 49       	sbci	r20, 0x99	; 153
     166:	46 21       	and	r20, r6
     168:	41 49       	sbci	r20, 0x91	; 145
     16a:	4d 33       	cpi	r20, 0x3D	; 61
     16c:	18 14       	cp	r1, r8
     16e:	12 7f       	andi	r17, 0xF2	; 242
     170:	10 27       	eor	r17, r16
     172:	45 45       	sbci	r20, 0x55	; 85
     174:	45 39       	cpi	r20, 0x95	; 149
     176:	3c 4a       	sbci	r19, 0xAC	; 172
     178:	49 49       	sbci	r20, 0x99	; 153
     17a:	31 41       	sbci	r19, 0x11	; 17
     17c:	21 11       	cpse	r18, r1
     17e:	09 07       	cpc	r16, r25
     180:	36 49       	sbci	r19, 0x96	; 150
     182:	49 49       	sbci	r20, 0x99	; 153
     184:	36 46       	sbci	r19, 0x66	; 102
     186:	49 49       	sbci	r20, 0x99	; 153
     188:	29 1e       	adc	r2, r25
     18a:	00 00       	nop
     18c:	14 00       	.word	0x0014	; ????
     18e:	00 00       	nop
     190:	40 34       	cpi	r20, 0x40	; 64
     192:	00 00       	nop
     194:	00 08       	sbc	r0, r0
     196:	14 22       	and	r1, r20
     198:	41 14       	cp	r4, r1
     19a:	14 14       	cp	r1, r4
     19c:	14 14       	cp	r1, r4
     19e:	00 41       	sbci	r16, 0x10	; 16
     1a0:	22 14       	cp	r2, r2
     1a2:	08 02       	muls	r16, r24
     1a4:	01 59       	subi	r16, 0x91	; 145
     1a6:	09 06       	cpc	r0, r25
     1a8:	3e 41       	sbci	r19, 0x1E	; 30
     1aa:	5d 59       	subi	r21, 0x9D	; 157
     1ac:	4e 7c       	andi	r20, 0xCE	; 206
     1ae:	12 11       	cpse	r17, r2
     1b0:	12 7c       	andi	r17, 0xC2	; 194
     1b2:	7f 49       	sbci	r23, 0x9F	; 159
     1b4:	49 49       	sbci	r20, 0x99	; 153
     1b6:	36 3e       	cpi	r19, 0xE6	; 230
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	41 22       	and	r4, r17
     1bc:	7f 41       	sbci	r23, 0x1F	; 31
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	3e 7f       	andi	r19, 0xFE	; 254
     1c2:	49 49       	sbci	r20, 0x99	; 153
     1c4:	49 41       	sbci	r20, 0x19	; 25
     1c6:	7f 09       	sbc	r23, r15
     1c8:	09 09       	sbc	r16, r9
     1ca:	01 3e       	cpi	r16, 0xE1	; 225
     1cc:	41 41       	sbci	r20, 0x11	; 17
     1ce:	51 73       	andi	r21, 0x31	; 49
     1d0:	7f 08       	sbc	r7, r15
     1d2:	08 08       	sbc	r0, r8
     1d4:	7f 00       	.word	0x007f	; ????
     1d6:	41 7f       	andi	r20, 0xF1	; 241
     1d8:	41 00       	.word	0x0041	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	41 3f       	cpi	r20, 0xF1	; 241
     1de:	01 7f       	andi	r16, 0xF1	; 241
     1e0:	08 14       	cp	r0, r8
     1e2:	22 41       	sbci	r18, 0x12	; 18
     1e4:	7f 40       	sbci	r23, 0x0F	; 15
     1e6:	40 40       	sbci	r20, 0x00	; 0
     1e8:	40 7f       	andi	r20, 0xF0	; 240
     1ea:	02 1c       	adc	r0, r2
     1ec:	02 7f       	andi	r16, 0xF2	; 242
     1ee:	7f 04       	cpc	r7, r15
     1f0:	08 10       	cpse	r0, r8
     1f2:	7f 3e       	cpi	r23, 0xEF	; 239
     1f4:	41 41       	sbci	r20, 0x11	; 17
     1f6:	41 3e       	cpi	r20, 0xE1	; 225
     1f8:	7f 09       	sbc	r23, r15
     1fa:	09 09       	sbc	r16, r9
     1fc:	06 3e       	cpi	r16, 0xE6	; 230
     1fe:	41 51       	subi	r20, 0x11	; 17
     200:	21 5e       	subi	r18, 0xE1	; 225
     202:	7f 09       	sbc	r23, r15
     204:	19 29       	or	r17, r9
     206:	46 26       	eor	r4, r22
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	49 32       	cpi	r20, 0x29	; 41
     20c:	03 01       	movw	r0, r6
     20e:	7f 01       	movw	r14, r30
     210:	03 3f       	cpi	r16, 0xF3	; 243
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	40 3f       	cpi	r20, 0xF0	; 240
     216:	1f 20       	and	r1, r15
     218:	40 20       	and	r4, r0
     21a:	1f 3f       	cpi	r17, 0xFF	; 255
     21c:	40 38       	cpi	r20, 0x80	; 128
     21e:	40 3f       	cpi	r20, 0xF0	; 240
     220:	63 14       	cp	r6, r3
     222:	08 14       	cp	r0, r8
     224:	63 03       	mulsu	r22, r19
     226:	04 78       	andi	r16, 0x84	; 132
     228:	04 03       	mulsu	r16, r20
     22a:	61 59       	subi	r22, 0x91	; 145
     22c:	49 4d       	sbci	r20, 0xD9	; 217
     22e:	43 00       	.word	0x0043	; ????
     230:	7f 41       	sbci	r23, 0x1F	; 31
     232:	41 41       	sbci	r20, 0x11	; 17
     234:	02 04       	cpc	r0, r2
     236:	08 10       	cpse	r0, r8
     238:	20 00       	.word	0x0020	; ????
     23a:	41 41       	sbci	r20, 0x11	; 17
     23c:	41 7f       	andi	r20, 0xF1	; 241
     23e:	04 02       	muls	r16, r20
     240:	01 02       	muls	r16, r17
     242:	04 40       	sbci	r16, 0x04	; 4
     244:	40 40       	sbci	r20, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	00 03       	mulsu	r16, r16
     24a:	07 08       	sbc	r0, r7
     24c:	00 20       	and	r0, r0
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	78 40       	sbci	r23, 0x08	; 8
     252:	7f 28       	or	r7, r15
     254:	44 44       	sbci	r20, 0x44	; 68
     256:	38 38       	cpi	r19, 0x88	; 136
     258:	44 44       	sbci	r20, 0x44	; 68
     25a:	44 28       	or	r4, r4
     25c:	38 44       	sbci	r19, 0x48	; 72
     25e:	44 28       	or	r4, r4
     260:	7f 38       	cpi	r23, 0x8F	; 143
     262:	54 54       	subi	r21, 0x44	; 68
     264:	54 18       	sub	r5, r4
     266:	00 08       	sbc	r0, r0
     268:	7e 09       	sbc	r23, r14
     26a:	02 18       	sub	r0, r2
     26c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     26e:	9c 78       	andi	r25, 0x8C	; 140
     270:	7f 08       	sbc	r7, r15
     272:	04 04       	cpc	r0, r4
     274:	78 00       	.word	0x0078	; ????
     276:	44 7d       	andi	r20, 0xD4	; 212
     278:	40 00       	.word	0x0040	; ????
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	40 3d       	cpi	r20, 0xD0	; 208
     27e:	00 7f       	andi	r16, 0xF0	; 240
     280:	10 28       	or	r1, r0
     282:	44 00       	.word	0x0044	; ????
     284:	00 41       	sbci	r16, 0x10	; 16
     286:	7f 40       	sbci	r23, 0x0F	; 15
     288:	00 7c       	andi	r16, 0xC0	; 192
     28a:	04 78       	andi	r16, 0x84	; 132
     28c:	04 78       	andi	r16, 0x84	; 132
     28e:	7c 08       	sbc	r7, r12
     290:	04 04       	cpc	r0, r4
     292:	78 38       	cpi	r23, 0x88	; 136
     294:	44 44       	sbci	r20, 0x44	; 68
     296:	44 38       	cpi	r20, 0x84	; 132
     298:	fc 18       	sub	r15, r12
     29a:	24 24       	eor	r2, r4
     29c:	18 18       	sub	r1, r8
     29e:	24 24       	eor	r2, r4
     2a0:	18 fc       	.word	0xfc18	; ????
     2a2:	7c 08       	sbc	r7, r12
     2a4:	04 04       	cpc	r0, r4
     2a6:	08 48       	sbci	r16, 0x88	; 136
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	54 24       	eor	r5, r4
     2ac:	04 04       	cpc	r0, r4
     2ae:	3f 44       	sbci	r19, 0x4F	; 79
     2b0:	24 3c       	cpi	r18, 0xC4	; 196
     2b2:	40 40       	sbci	r20, 0x00	; 0
     2b4:	20 7c       	andi	r18, 0xC0	; 192
     2b6:	1c 20       	and	r1, r12
     2b8:	40 20       	and	r4, r0
     2ba:	1c 3c       	cpi	r17, 0xCC	; 204
     2bc:	40 30       	cpi	r20, 0x00	; 0
     2be:	40 3c       	cpi	r20, 0xC0	; 192
     2c0:	44 28       	or	r4, r4
     2c2:	10 28       	or	r1, r0
     2c4:	44 4c       	sbci	r20, 0xC4	; 196
     2c6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7abf>
     2ca:	44 64       	ori	r20, 0x44	; 68
     2cc:	54 4c       	sbci	r21, 0xC4	; 196
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	08 36       	cpi	r16, 0x68	; 104
     2d2:	41 00       	.word	0x0041	; ????
     2d4:	00 00       	nop
     2d6:	77 00       	.word	0x0077	; ????
     2d8:	00 00       	nop
     2da:	41 36       	cpi	r20, 0x61	; 97
     2dc:	08 00       	.word	0x0008	; ????
     2de:	02 01       	movw	r0, r4
     2e0:	02 04       	cpc	r0, r2
     2e2:	02 3c       	cpi	r16, 0xC2	; 194
     2e4:	26 23       	and	r18, r22
     2e6:	26 3c       	cpi	r18, 0xC6	; 198
     2e8:	1e a1       	ldd	r17, Y+38	; 0x26
     2ea:	a1 61       	ori	r26, 0x11	; 17
     2ec:	12 3a       	cpi	r17, 0xA2	; 162
     2ee:	40 40       	sbci	r20, 0x00	; 0
     2f0:	20 7a       	andi	r18, 0xA0	; 160
     2f2:	38 54       	subi	r19, 0x48	; 72
     2f4:	54 55       	subi	r21, 0x54	; 84
     2f6:	59 21       	and	r21, r9
     2f8:	55 55       	subi	r21, 0x55	; 85
     2fa:	79 41       	sbci	r23, 0x19	; 25
     2fc:	22 54       	subi	r18, 0x42	; 66
     2fe:	54 78       	andi	r21, 0x84	; 132
     300:	42 21       	and	r20, r2
     302:	55 54       	subi	r21, 0x45	; 69
     304:	78 40       	sbci	r23, 0x08	; 8
     306:	20 54       	subi	r18, 0x40	; 64
     308:	55 79       	andi	r21, 0x95	; 149
     30a:	40 0c       	add	r4, r0
     30c:	1e 52       	subi	r17, 0x2E	; 46
     30e:	72 12       	cpse	r7, r18
     310:	39 55       	subi	r19, 0x59	; 89
     312:	55 55       	subi	r21, 0x55	; 85
     314:	59 39       	cpi	r21, 0x99	; 153
     316:	54 54       	subi	r21, 0x44	; 68
     318:	54 59       	subi	r21, 0x94	; 148
     31a:	39 55       	subi	r19, 0x59	; 89
     31c:	54 54       	subi	r21, 0x44	; 68
     31e:	58 00       	.word	0x0058	; ????
     320:	00 45       	sbci	r16, 0x50	; 80
     322:	7c 41       	sbci	r23, 0x1C	; 28
     324:	00 02       	muls	r16, r16
     326:	45 7d       	andi	r20, 0xD5	; 213
     328:	42 00       	.word	0x0042	; ????
     32a:	01 45       	sbci	r16, 0x51	; 81
     32c:	7c 40       	sbci	r23, 0x0C	; 12
     32e:	7d 12       	cpse	r7, r29
     330:	11 12       	cpse	r1, r17
     332:	7d f0       	brhs	.+30     	; 0x352 <__trampolines_end+0x2ea>
     334:	28 25       	eor	r18, r8
     336:	28 f0       	brcs	.+10     	; 0x342 <__trampolines_end+0x2da>
     338:	7c 54       	subi	r23, 0x4C	; 76
     33a:	55 45       	sbci	r21, 0x55	; 85
     33c:	00 20       	and	r0, r0
     33e:	54 54       	subi	r21, 0x44	; 68
     340:	7c 54       	subi	r23, 0x4C	; 76
     342:	7c 0a       	sbc	r7, r28
     344:	09 7f       	andi	r16, 0xF9	; 249
     346:	49 32       	cpi	r20, 0x29	; 41
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	49 32       	cpi	r20, 0x29	; 41
     34c:	3a 44       	sbci	r19, 0x4A	; 74
     34e:	44 44       	sbci	r20, 0x44	; 68
     350:	3a 32       	cpi	r19, 0x2A	; 42
     352:	4a 48       	sbci	r20, 0x8A	; 138
     354:	48 30       	cpi	r20, 0x08	; 8
     356:	3a 41       	sbci	r19, 0x1A	; 26
     358:	41 21       	and	r20, r1
     35a:	7a 3a       	cpi	r23, 0xAA	; 170
     35c:	42 40       	sbci	r20, 0x02	; 2
     35e:	20 78       	andi	r18, 0x80	; 128
     360:	00 9d       	mul	r16, r0
     362:	a0 a0       	ldd	r10, Z+32	; 0x20
     364:	7d 3d       	cpi	r23, 0xDD	; 221
     366:	42 42       	sbci	r20, 0x22	; 34
     368:	42 3d       	cpi	r20, 0xD2	; 210
     36a:	3d 40       	sbci	r19, 0x0D	; 13
     36c:	40 40       	sbci	r20, 0x00	; 0
     36e:	3d 3c       	cpi	r19, 0xCD	; 205
     370:	24 ff       	sbrs	r18, 4
     372:	24 24       	eor	r2, r4
     374:	48 7e       	andi	r20, 0xE8	; 232
     376:	49 43       	sbci	r20, 0x39	; 57
     378:	66 2b       	or	r22, r22
     37a:	2f fc       	.word	0xfc2f	; ????
     37c:	2f 2b       	or	r18, r31
     37e:	ff 09       	sbc	r31, r15
     380:	29 f6       	brne	.-118    	; 0x30c <__trampolines_end+0x2a4>
     382:	20 c0       	rjmp	.+64     	; 0x3c4 <__trampolines_end+0x35c>
     384:	88 7e       	andi	r24, 0xE8	; 232
     386:	09 03       	fmul	r16, r17
     388:	20 54       	subi	r18, 0x40	; 64
     38a:	54 79       	andi	r21, 0x94	; 148
     38c:	41 00       	.word	0x0041	; ????
     38e:	00 44       	sbci	r16, 0x40	; 64
     390:	7d 41       	sbci	r23, 0x1D	; 29
     392:	30 48       	sbci	r19, 0x80	; 128
     394:	48 4a       	sbci	r20, 0xA8	; 168
     396:	32 38       	cpi	r19, 0x82	; 130
     398:	40 40       	sbci	r20, 0x00	; 0
     39a:	22 7a       	andi	r18, 0xA2	; 162
     39c:	00 7a       	andi	r16, 0xA0	; 160
     39e:	0a 0a       	sbc	r0, r26
     3a0:	72 7d       	andi	r23, 0xD2	; 210
     3a2:	0d 19       	sub	r16, r13
     3a4:	31 7d       	andi	r19, 0xD1	; 209
     3a6:	26 29       	or	r18, r6
     3a8:	29 2f       	mov	r18, r25
     3aa:	28 26       	eor	r2, r24
     3ac:	29 29       	or	r18, r9
     3ae:	29 26       	eor	r2, r25
     3b0:	30 48       	sbci	r19, 0x80	; 128
     3b2:	4d 40       	sbci	r20, 0x0D	; 13
     3b4:	20 38       	cpi	r18, 0x80	; 128
     3b6:	08 08       	sbc	r0, r8
     3b8:	08 08       	sbc	r0, r8
     3ba:	08 08       	sbc	r0, r8
     3bc:	08 08       	sbc	r0, r8
     3be:	38 2f       	mov	r19, r24
     3c0:	10 c8       	rjmp	.-4064   	; 0xfffff3e2 <__eeprom_end+0xff7ef3e2>
     3c2:	ac ba       	out	0x1c, r10	; 28
     3c4:	2f 10       	cpse	r2, r15
     3c6:	28 34       	cpi	r18, 0x48	; 72
     3c8:	fa 00       	.word	0x00fa	; ????
     3ca:	00 7b       	andi	r16, 0xB0	; 176
     3cc:	00 00       	nop
     3ce:	08 14       	cp	r0, r8
     3d0:	2a 14       	cp	r2, r10
     3d2:	22 22       	and	r2, r18
     3d4:	14 2a       	or	r1, r20
     3d6:	14 08       	sbc	r1, r4
     3d8:	aa 00       	.word	0x00aa	; ????
     3da:	55 00       	.word	0x0055	; ????
     3dc:	aa aa       	std	Y+50, r10	; 0x32
     3de:	55 aa       	std	Z+53, r5	; 0x35
     3e0:	55 aa       	std	Z+53, r5	; 0x35
     3e2:	00 00       	nop
     3e4:	00 ff       	sbrs	r16, 0
     3e6:	00 10       	cpse	r0, r0
     3e8:	10 10       	cpse	r1, r0
     3ea:	ff 00       	.word	0x00ff	; ????
     3ec:	14 14       	cp	r1, r4
     3ee:	14 ff       	sbrs	r17, 4
     3f0:	00 10       	cpse	r0, r0
     3f2:	10 ff       	sbrs	r17, 0
     3f4:	00 ff       	sbrs	r16, 0
     3f6:	10 10       	cpse	r1, r0
     3f8:	f0 10       	cpse	r15, r0
     3fa:	f0 14       	cp	r15, r0
     3fc:	14 14       	cp	r1, r4
     3fe:	fc 00       	.word	0x00fc	; ????
     400:	14 14       	cp	r1, r4
     402:	f7 00       	.word	0x00f7	; ????
     404:	ff 00       	.word	0x00ff	; ????
     406:	00 ff       	sbrs	r16, 0
     408:	00 ff       	sbrs	r16, 0
     40a:	14 14       	cp	r1, r4
     40c:	f4 04       	cpc	r15, r4
     40e:	fc 14       	cp	r15, r12
     410:	14 17       	cp	r17, r20
     412:	10 1f       	adc	r17, r16
     414:	10 10       	cpse	r1, r0
     416:	1f 10       	cpse	r1, r15
     418:	1f 14       	cp	r1, r15
     41a:	14 14       	cp	r1, r4
     41c:	1f 00       	.word	0x001f	; ????
     41e:	10 10       	cpse	r1, r0
     420:	10 f0       	brcs	.+4      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     422:	00 00       	nop
     424:	00 00       	nop
     426:	1f 10       	cpse	r1, r15
     428:	10 10       	cpse	r1, r0
     42a:	10 1f       	adc	r17, r16
     42c:	10 10       	cpse	r1, r0
     42e:	10 10       	cpse	r1, r0
     430:	f0 10       	cpse	r15, r0
     432:	00 00       	nop
     434:	00 ff       	sbrs	r16, 0
     436:	10 10       	cpse	r1, r0
     438:	10 10       	cpse	r1, r0
     43a:	10 10       	cpse	r1, r0
     43c:	10 10       	cpse	r1, r0
     43e:	10 ff       	sbrs	r17, 0
     440:	10 00       	.word	0x0010	; ????
     442:	00 00       	nop
     444:	ff 14       	cp	r15, r15
     446:	00 00       	nop
     448:	ff 00       	.word	0x00ff	; ????
     44a:	ff 00       	.word	0x00ff	; ????
     44c:	00 1f       	adc	r16, r16
     44e:	10 17       	cp	r17, r16
     450:	00 00       	nop
     452:	fc 04       	cpc	r15, r12
     454:	f4 14       	cp	r15, r4
     456:	14 17       	cp	r17, r20
     458:	10 17       	cp	r17, r16
     45a:	14 14       	cp	r1, r4
     45c:	f4 04       	cpc	r15, r4
     45e:	f4 00       	.word	0x00f4	; ????
     460:	00 ff       	sbrs	r16, 0
     462:	00 f7       	brcc	.-64     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
     464:	14 14       	cp	r1, r4
     466:	14 14       	cp	r1, r4
     468:	14 14       	cp	r1, r4
     46a:	14 f7       	brge	.-60     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
     46c:	00 f7       	brcc	.-64     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
     46e:	14 14       	cp	r1, r4
     470:	14 17       	cp	r17, r20
     472:	14 10       	cpse	r1, r4
     474:	10 1f       	adc	r17, r16
     476:	10 1f       	adc	r17, r16
     478:	14 14       	cp	r1, r4
     47a:	14 f4       	brge	.+4      	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
     47c:	14 10       	cpse	r1, r4
     47e:	10 f0       	brcs	.+4      	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
     480:	10 f0       	brcs	.+4      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
     482:	00 00       	nop
     484:	1f 10       	cpse	r1, r15
     486:	1f 00       	.word	0x001f	; ????
     488:	00 00       	nop
     48a:	1f 14       	cp	r1, r15
     48c:	00 00       	nop
     48e:	00 fc       	sbrc	r0, 0
     490:	14 00       	.word	0x0014	; ????
     492:	00 f0       	brcs	.+0      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     494:	10 f0       	brcs	.+4      	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
     496:	10 10       	cpse	r1, r0
     498:	ff 10       	cpse	r15, r15
     49a:	ff 14       	cp	r15, r15
     49c:	14 14       	cp	r1, r4
     49e:	ff 14       	cp	r15, r15
     4a0:	10 10       	cpse	r1, r0
     4a2:	10 1f       	adc	r17, r16
     4a4:	00 00       	nop
     4a6:	00 00       	nop
     4a8:	f0 10       	cpse	r15, r0
     4aa:	ff ff       	.word	0xffff	; ????
     4ac:	ff ff       	.word	0xffff	; ????
     4ae:	ff f0       	brie	.+62     	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
     4b0:	f0 f0       	brcs	.+60     	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
     4b2:	f0 f0       	brcs	.+60     	; 0x4f0 <__FUSE_REGION_LENGTH__+0xf0>
     4b4:	ff ff       	.word	0xffff	; ????
     4b6:	ff 00       	.word	0x00ff	; ????
     4b8:	00 00       	nop
     4ba:	00 00       	nop
     4bc:	ff ff       	.word	0xffff	; ????
     4be:	0f 0f       	add	r16, r31
     4c0:	0f 0f       	add	r16, r31
     4c2:	0f 38       	cpi	r16, 0x8F	; 143
     4c4:	44 44       	sbci	r20, 0x44	; 68
     4c6:	38 44       	sbci	r19, 0x48	; 72
     4c8:	fc 4a       	sbci	r31, 0xAC	; 172
     4ca:	4a 4a       	sbci	r20, 0xAA	; 170
     4cc:	34 7e       	andi	r19, 0xE4	; 228
     4ce:	02 02       	muls	r16, r18
     4d0:	06 06       	cpc	r0, r22
     4d2:	02 7e       	andi	r16, 0xE2	; 226
     4d4:	02 7e       	andi	r16, 0xE2	; 226
     4d6:	02 63       	ori	r16, 0x32	; 50
     4d8:	55 49       	sbci	r21, 0x95	; 149
     4da:	41 63       	ori	r20, 0x31	; 49
     4dc:	38 44       	sbci	r19, 0x48	; 72
     4de:	44 3c       	cpi	r20, 0xC4	; 196
     4e0:	04 40       	sbci	r16, 0x04	; 4
     4e2:	7e 20       	and	r7, r14
     4e4:	1e 20       	and	r1, r14
     4e6:	06 02       	muls	r16, r22
     4e8:	7e 02       	muls	r23, r30
     4ea:	02 99       	sbic	0x00, 2	; 0
     4ec:	a5 e7       	ldi	r26, 0x75	; 117
     4ee:	a5 99       	sbic	0x14, 5	; 20
     4f0:	1c 2a       	or	r1, r28
     4f2:	49 2a       	or	r4, r25
     4f4:	1c 4c       	sbci	r17, 0xCC	; 204
     4f6:	72 01       	movw	r14, r4
     4f8:	72 4c       	sbci	r23, 0xC2	; 194
     4fa:	30 4a       	sbci	r19, 0xA0	; 160
     4fc:	4d 4d       	sbci	r20, 0xDD	; 221
     4fe:	30 30       	cpi	r19, 0x00	; 0
     500:	48 78       	andi	r20, 0x88	; 136
     502:	48 30       	cpi	r20, 0x08	; 8
     504:	bc 62       	ori	r27, 0x2C	; 44
     506:	5a 46       	sbci	r21, 0x6A	; 106
     508:	3d 3e       	cpi	r19, 0xED	; 237
     50a:	49 49       	sbci	r20, 0x99	; 153
     50c:	49 00       	.word	0x0049	; ????
     50e:	7e 01       	movw	r14, r28
     510:	01 01       	movw	r0, r2
     512:	7e 2a       	or	r7, r30
     514:	2a 2a       	or	r2, r26
     516:	2a 2a       	or	r2, r26
     518:	44 44       	sbci	r20, 0x44	; 68
     51a:	5f 44       	sbci	r21, 0x4F	; 79
     51c:	44 40       	sbci	r20, 0x04	; 4
     51e:	51 4a       	sbci	r21, 0xA1	; 161
     520:	44 40       	sbci	r20, 0x04	; 4
     522:	40 44       	sbci	r20, 0x40	; 64
     524:	4a 51       	subi	r20, 0x1A	; 26
     526:	40 00       	.word	0x0040	; ????
     528:	00 ff       	sbrs	r16, 0
     52a:	01 03       	mulsu	r16, r17
     52c:	e0 80       	ld	r14, Z
     52e:	ff 00       	.word	0x00ff	; ????
     530:	00 08       	sbc	r0, r0
     532:	08 6b       	ori	r16, 0xB8	; 184
     534:	6b 08       	sbc	r6, r11
     536:	36 12       	cpse	r3, r22
     538:	36 24       	eor	r3, r6
     53a:	36 06       	cpc	r3, r22
     53c:	0f 09       	sbc	r16, r15
     53e:	0f 06       	cpc	r0, r31
     540:	00 00       	nop
     542:	18 18       	sub	r1, r8
     544:	00 00       	nop
     546:	00 10       	cpse	r0, r0
     548:	10 00       	.word	0x0010	; ????
     54a:	30 40       	sbci	r19, 0x00	; 0
     54c:	ff 01       	movw	r30, r30
     54e:	01 00       	.word	0x0001	; ????
     550:	1f 01       	movw	r2, r30
     552:	01 1e       	adc	r0, r17
     554:	00 19       	sub	r16, r0
     556:	1d 17       	cp	r17, r29
     558:	12 00       	.word	0x0012	; ????
     55a:	3c 3c       	cpi	r19, 0xCC	; 204
     55c:	3c 3c       	cpi	r19, 0xCC	; 204
     55e:	00 00       	nop
     560:	00 00       	nop
	...

00000564 <__ctors_end>:
     564:	11 24       	eor	r1, r1
     566:	1f be       	out	0x3f, r1	; 63
     568:	cf ef       	ldi	r28, 0xFF	; 255
     56a:	d8 e0       	ldi	r29, 0x08	; 8
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	cd bf       	out	0x3d, r28	; 61

00000570 <__do_copy_data>:
     570:	11 e0       	ldi	r17, 0x01	; 1
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b1 e0       	ldi	r27, 0x01	; 1
     576:	e2 e4       	ldi	r30, 0x42	; 66
     578:	fe e2       	ldi	r31, 0x2E	; 46
     57a:	02 c0       	rjmp	.+4      	; 0x580 <__do_copy_data+0x10>
     57c:	05 90       	lpm	r0, Z+
     57e:	0d 92       	st	X+, r0
     580:	aa 36       	cpi	r26, 0x6A	; 106
     582:	b1 07       	cpc	r27, r17
     584:	d9 f7       	brne	.-10     	; 0x57c <__do_copy_data+0xc>

00000586 <__do_clear_bss>:
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	aa e6       	ldi	r26, 0x6A	; 106
     58a:	b1 e0       	ldi	r27, 0x01	; 1
     58c:	01 c0       	rjmp	.+2      	; 0x590 <.do_clear_bss_start>

0000058e <.do_clear_bss_loop>:
     58e:	1d 92       	st	X+, r1

00000590 <.do_clear_bss_start>:
     590:	a1 3d       	cpi	r26, 0xD1	; 209
     592:	b2 07       	cpc	r27, r18
     594:	e1 f7       	brne	.-8      	; 0x58e <.do_clear_bss_loop>
     596:	0e 94 24 11 	call	0x2248	; 0x2248 <main>
     59a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <_exit>

0000059e <__bad_interrupt>:
     59e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a2 <ili9341_hard_init>:
uint16_t _height = 240;


void ili9341_hard_init(void)//init hardware
{
rstddr=0xFF;//output for reset
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	8a b9       	out	0x0a, r24	; 10
rstport |=(1<<rst);//pull high for normal operation
     5a6:	5f 9a       	sbi	0x0b, 7	; 11
controlddr|=(1<<dc);//D/C as output
     5a8:	20 9a       	sbi	0x04, 0	; 4
}
     5aa:	08 95       	ret

000005ac <ili9341_spi_init>:


void ili9341_spi_init(void)//set spi speed and settings 
{
DDRB |=(1<<1)|(1<<2)|(1<<3)|(1<<5);//CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
     5ac:	84 b1       	in	r24, 0x04	; 4
     5ae:	8e 62       	ori	r24, 0x2E	; 46
     5b0:	84 b9       	out	0x04, r24	; 4
SPCR=(1<<SPE)|(1<<MSTR);//mode 0,fosc/4
     5b2:	80 e5       	ldi	r24, 0x50	; 80
     5b4:	8c bd       	out	0x2c, r24	; 44
SPSR |=(1<<SPI2X);//doubling spi speed.i.e final spi speed-fosc/2
     5b6:	8d b5       	in	r24, 0x2d	; 45
     5b8:	81 60       	ori	r24, 0x01	; 1
     5ba:	8d bd       	out	0x2d, r24	; 45
PORTB |=(1<<1);//cs off during startup
     5bc:	29 9a       	sbi	0x05, 1	; 5

}
     5be:	08 95       	ret

000005c0 <ili9341_spi_send>:


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
SPDR=spi_data;//move data into spdr
     5c0:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     5c2:	0d b4       	in	r0, 0x2d	; 45
     5c4:	07 fe       	sbrs	r0, 7
     5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <ili9341_spi_send+0x2>
}
     5c8:	08 95       	ret

000005ca <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
controlport &=~((1<<dc)|(1<<cs));//dc and cs both low to send command
     5ca:	95 b1       	in	r25, 0x05	; 5
     5cc:	9c 7f       	andi	r25, 0xFC	; 252
     5ce:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d0:	9d e0       	ldi	r25, 0x0D	; 13
     5d2:	9a 95       	dec	r25
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <ili9341_writecommand8+0x8>
     5d6:	00 00       	nop
_delay_us(5);//little delay
ili9341_spi_send(com);
     5d8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ili9341_spi_send>
controlport |=(1<<cs);//pull high cs
     5dc:	29 9a       	sbi	0x05, 1	; 5
}
     5de:	08 95       	ret

000005e0 <ili9341_writedata8>:


void ili9341_writedata8(uint8_t data)//data write
{
controlport |=(1<<dc);//st dc high for data
     5e0:	28 9a       	sbi	0x05, 0	; 5
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	9a 95       	dec	r25
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <ili9341_writedata8+0x4>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <ili9341_writedata8+0xa>
_delay_us(1);//delay
controlport &=~(1<<cs);//set cs low for operation
     5ea:	29 98       	cbi	0x05, 1	; 5
ili9341_spi_send(data);
     5ec:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ili9341_spi_send>
controlport |=(1<<cs);
     5f0:	29 9a       	sbi	0x05, 1	; 5
}
     5f2:	08 95       	ret

000005f4 <ili9341_setaddress>:


void ili9341_setaddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	e8 2e       	mov	r14, r24
     604:	d9 2e       	mov	r13, r25
     606:	d6 2f       	mov	r29, r22
     608:	17 2f       	mov	r17, r23
     60a:	04 2f       	mov	r16, r20
     60c:	f5 2e       	mov	r15, r21
     60e:	c2 2f       	mov	r28, r18
ili9341_writecommand8(0x2A);
     610:	8a e2       	ldi	r24, 0x2A	; 42
     612:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(x1>>8);
     616:	8d 2d       	mov	r24, r13
     618:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(x1);
     61c:	8e 2d       	mov	r24, r14
     61e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(x2>>8);
     622:	8f 2d       	mov	r24, r15
     624:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(x2);
     628:	80 2f       	mov	r24, r16
     62a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

ili9341_writecommand8(0x2B);
     62e:	8b e2       	ldi	r24, 0x2B	; 43
     630:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(y1>>8);
     634:	81 2f       	mov	r24, r17
     636:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(y1);
     63a:	8d 2f       	mov	r24, r29
     63c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(y2);
     640:	8c 2f       	mov	r24, r28
     642:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(y2);
     646:	8c 2f       	mov	r24, r28
     648:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

ili9341_writecommand8(0x2C);//meory write
     64c:	8c e2       	ldi	r24, 0x2C	; 44
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
ili9341_writecommand8(0x2C);//meory write
     65c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <ili9341_writecommand8>

00000660 <ili9341_hard_reset>:


void ili9341_hard_reset(void)//hard reset display
{
rstport |=(1<<rst);//pull high if low previously
     660:	5f 9a       	sbi	0x0b, 7	; 11
	__builtin_avr_delay_cycles(__ticks_dc);
     662:	2f ef       	ldi	r18, 0xFF	; 255
     664:	81 ee       	ldi	r24, 0xE1	; 225
     666:	94 e0       	ldi	r25, 0x04	; 4
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	80 40       	sbci	r24, 0x00	; 0
     66c:	90 40       	sbci	r25, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <ili9341_hard_reset+0x8>
     670:	00 c0       	rjmp	.+0      	; 0x672 <ili9341_hard_reset+0x12>
     672:	00 00       	nop
_delay_ms(200);
rstport &=~(1<<rst);//low for reset
     674:	5f 98       	cbi	0x0b, 7	; 11
     676:	2f ef       	ldi	r18, 0xFF	; 255
     678:	81 ee       	ldi	r24, 0xE1	; 225
     67a:	94 e0       	ldi	r25, 0x04	; 4
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	90 40       	sbci	r25, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <ili9341_hard_reset+0x1c>
     684:	00 c0       	rjmp	.+0      	; 0x686 <ili9341_hard_reset+0x26>
     686:	00 00       	nop
_delay_ms(200);
rstport |=(1<<rst);//again pull high for normal operation
     688:	5f 9a       	sbi	0x0b, 7	; 11
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	81 ee       	ldi	r24, 0xE1	; 225
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	21 50       	subi	r18, 0x01	; 1
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <ili9341_hard_reset+0x30>
     698:	00 c0       	rjmp	.+0      	; 0x69a <ili9341_hard_reset+0x3a>
     69a:	00 00       	nop
_delay_ms(200);
}
     69c:	08 95       	ret

0000069e <ili9341_init>:


void ili9341_init(void)//set up display using predefined command sequence
{
ili9341_hard_init();
     69e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <ili9341_hard_init>
ili9341_spi_init();
     6a2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <ili9341_spi_init>
ili9341_hard_reset();
     6a6:	0e 94 30 03 	call	0x660	; 0x660 <ili9341_hard_reset>
ili9341_writecommand8(0x01);//soft reset
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     6b0:	2f ef       	ldi	r18, 0xFF	; 255
     6b2:	89 e6       	ldi	r24, 0x69	; 105
     6b4:	98 e1       	ldi	r25, 0x18	; 24
     6b6:	21 50       	subi	r18, 0x01	; 1
     6b8:	80 40       	sbci	r24, 0x00	; 0
     6ba:	90 40       	sbci	r25, 0x00	; 0
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <ili9341_init+0x18>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <ili9341_init+0x22>
     6c0:	00 00       	nop
_delay_ms(1000);
//power control A
ili9341_writecommand8(0xCB);
     6c2:	8b ec       	ldi	r24, 0xCB	; 203
     6c4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x39);
     6c8:	89 e3       	ldi	r24, 0x39	; 57
     6ca:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x2C);
     6ce:	8c e2       	ldi	r24, 0x2C	; 44
     6d0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x00);
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x34);
     6da:	84 e3       	ldi	r24, 0x34	; 52
     6dc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x02);
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//power control B
ili9341_writecommand8(0xCF);
     6e6:	8f ec       	ldi	r24, 0xCF	; 207
     6e8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x00);
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0xC1);
     6f2:	81 ec       	ldi	r24, 0xC1	; 193
     6f4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x30);
     6f8:	80 e3       	ldi	r24, 0x30	; 48
     6fa:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//driver timing control A
ili9341_writecommand8(0xE8);
     6fe:	88 ee       	ldi	r24, 0xE8	; 232
     700:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x85);
     704:	85 e8       	ldi	r24, 0x85	; 133
     706:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x00);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x78);
     710:	88 e7       	ldi	r24, 0x78	; 120
     712:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//driver timing control B
ili9341_writecommand8(0xEA);
     716:	8a ee       	ldi	r24, 0xEA	; 234
     718:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x00);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x00);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//power on sequence control
ili9341_writecommand8(0xED);
     728:	8d ee       	ldi	r24, 0xED	; 237
     72a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x64);
     72e:	84 e6       	ldi	r24, 0x64	; 100
     730:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x03);
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x12);
     73a:	82 e1       	ldi	r24, 0x12	; 18
     73c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x81);
     740:	81 e8       	ldi	r24, 0x81	; 129
     742:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//pump ratio control
ili9341_writecommand8(0xF7);
     746:	87 ef       	ldi	r24, 0xF7	; 247
     748:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x20);
     74c:	80 e2       	ldi	r24, 0x20	; 32
     74e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//power control,VRH[5:0]
ili9341_writecommand8(0xC0);
     752:	80 ec       	ldi	r24, 0xC0	; 192
     754:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x23);
     758:	83 e2       	ldi	r24, 0x23	; 35
     75a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//Power control,SAP[2:0];BT[3:0]
ili9341_writecommand8(0xC1);
     75e:	81 ec       	ldi	r24, 0xC1	; 193
     760:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x10);
     764:	80 e1       	ldi	r24, 0x10	; 16
     766:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//vcm control
ili9341_writecommand8(0xC5);
     76a:	85 ec       	ldi	r24, 0xC5	; 197
     76c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x3E);
     770:	8e e3       	ldi	r24, 0x3E	; 62
     772:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x28);
     776:	88 e2       	ldi	r24, 0x28	; 40
     778:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//vcm control 2
ili9341_writecommand8(0xC7);
     77c:	87 ec       	ldi	r24, 0xC7	; 199
     77e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x86);
     782:	86 e8       	ldi	r24, 0x86	; 134
     784:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//memory access control
ili9341_writecommand8(0x36);
     788:	86 e3       	ldi	r24, 0x36	; 54
     78a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x48);
     78e:	88 e4       	ldi	r24, 0x48	; 72
     790:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//pixel format
ili9341_writecommand8(0x3A);
     794:	8a e3       	ldi	r24, 0x3A	; 58
     796:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x55);
     79a:	85 e5       	ldi	r24, 0x55	; 85
     79c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//frameration control,normal mode full colours
ili9341_writecommand8(0xB1);
     7a0:	81 eb       	ldi	r24, 0xB1	; 177
     7a2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x00);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x18);
     7ac:	88 e1       	ldi	r24, 0x18	; 24
     7ae:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//display function control
ili9341_writecommand8(0xB6);
     7b2:	86 eb       	ldi	r24, 0xB6	; 182
     7b4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x08);
     7b8:	88 e0       	ldi	r24, 0x08	; 8
     7ba:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x82);
     7be:	82 e8       	ldi	r24, 0x82	; 130
     7c0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x27);
     7c4:	87 e2       	ldi	r24, 0x27	; 39
     7c6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//3gamma function disable
ili9341_writecommand8(0xF2);
     7ca:	82 ef       	ldi	r24, 0xF2	; 242
     7cc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x00);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//gamma curve selected
ili9341_writecommand8(0x26);
     7d6:	86 e2       	ldi	r24, 0x26	; 38
     7d8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x01);
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//set positive gamma correction
ili9341_writecommand8(0xE0);
     7e2:	80 ee       	ldi	r24, 0xE0	; 224
     7e4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x0F);
     7e8:	8f e0       	ldi	r24, 0x0F	; 15
     7ea:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x31);
     7ee:	81 e3       	ldi	r24, 0x31	; 49
     7f0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x2B);
     7f4:	8b e2       	ldi	r24, 0x2B	; 43
     7f6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x0C);
     7fa:	8c e0       	ldi	r24, 0x0C	; 12
     7fc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x0E);
     800:	8e e0       	ldi	r24, 0x0E	; 14
     802:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x08);
     806:	88 e0       	ldi	r24, 0x08	; 8
     808:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x4E);
     80c:	8e e4       	ldi	r24, 0x4E	; 78
     80e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0xF1);
     812:	81 ef       	ldi	r24, 0xF1	; 241
     814:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x37);
     818:	87 e3       	ldi	r24, 0x37	; 55
     81a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x07);
     81e:	87 e0       	ldi	r24, 0x07	; 7
     820:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x10);
     824:	80 e1       	ldi	r24, 0x10	; 16
     826:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x03);
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x0E);
     830:	8e e0       	ldi	r24, 0x0E	; 14
     832:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x09);
     836:	89 e0       	ldi	r24, 0x09	; 9
     838:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x00);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//set negative gamma correction
ili9341_writecommand8(0xE1);
     842:	81 ee       	ldi	r24, 0xE1	; 225
     844:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
ili9341_writedata8(0x00);
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x0E);
     84e:	8e e0       	ldi	r24, 0x0E	; 14
     850:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x14);
     854:	84 e1       	ldi	r24, 0x14	; 20
     856:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x03);
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x11);
     860:	81 e1       	ldi	r24, 0x11	; 17
     862:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x07);
     866:	87 e0       	ldi	r24, 0x07	; 7
     868:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x31);
     86c:	81 e3       	ldi	r24, 0x31	; 49
     86e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0xC1);
     872:	81 ec       	ldi	r24, 0xC1	; 193
     874:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x48);
     878:	88 e4       	ldi	r24, 0x48	; 72
     87a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x08);
     87e:	88 e0       	ldi	r24, 0x08	; 8
     880:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x0F);
     884:	8f e0       	ldi	r24, 0x0F	; 15
     886:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x0C);
     88a:	8c e0       	ldi	r24, 0x0C	; 12
     88c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x31);
     890:	81 e3       	ldi	r24, 0x31	; 49
     892:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x36);
     896:	86 e3       	ldi	r24, 0x36	; 54
     898:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(0x0F);
     89c:	8f e0       	ldi	r24, 0x0F	; 15
     89e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>

//exit sleep
ili9341_writecommand8(0x11);
     8a2:	81 e1       	ldi	r24, 0x11	; 17
     8a4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     8a8:	2f ef       	ldi	r18, 0xFF	; 255
     8aa:	8d ee       	ldi	r24, 0xED	; 237
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	21 50       	subi	r18, 0x01	; 1
     8b0:	80 40       	sbci	r24, 0x00	; 0
     8b2:	90 40       	sbci	r25, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <ili9341_init+0x210>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <ili9341_init+0x21a>
     8b8:	00 00       	nop
_delay_ms(120);
//display on
ili9341_writecommand8(0x29);
     8ba:	89 e2       	ldi	r24, 0x29	; 41
     8bc:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <ili9341_writecommand8>

000008c0 <ili9341_pushcolour>:

}

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
     8c0:	cf 93       	push	r28
     8c2:	c8 2f       	mov	r28, r24
ili9341_writedata8(colour>>8);
     8c4:	89 2f       	mov	r24, r25
     8c6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
ili9341_writedata8(colour);
     8ca:	8c 2f       	mov	r24, r28
}
     8cc:	cf 91       	pop	r28
ili9341_writedata8(colour);
     8ce:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <ili9341_writedata8>

000008d2 <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	7c 01       	movw	r14, r24
uint16_t i,j;
ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);
     8e0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
     8e4:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
     8e8:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <LCD_W>
     8ec:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <LCD_W+0x1>
     8f0:	21 50       	subi	r18, 0x01	; 1
     8f2:	31 09       	sbc	r19, r1
     8f4:	41 50       	subi	r20, 0x01	; 1
     8f6:	51 09       	sbc	r21, r1
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ili9341_setaddress>

for(i=0;i<LCD_W;i++)
     904:	d0 e0       	ldi	r29, 0x00	; 0
     906:	c0 e0       	ldi	r28, 0x00	; 0
     908:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LCD_W>
     90c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <LCD_W+0x1>
     910:	c8 17       	cp	r28, r24
     912:	d9 07       	cpc	r29, r25
     914:	a8 f0       	brcs	.+42     	; 0x940 <__stack+0x41>
{
ili9341_pushcolour(colour);
}
}

}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	08 95       	ret
ili9341_pushcolour(colour);
     924:	c7 01       	movw	r24, r14
     926:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ili9341_pushcolour>
for(j=0;j<LCD_H;j++)
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LCD_H>
     932:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <LCD_H+0x1>
     936:	08 17       	cp	r16, r24
     938:	19 07       	cpc	r17, r25
     93a:	a0 f3       	brcs	.-24     	; 0x924 <__stack+0x25>
for(i=0;i<LCD_W;i++)
     93c:	21 96       	adiw	r28, 0x01	; 1
     93e:	e4 cf       	rjmp	.-56     	; 0x908 <__stack+0x9>
for(j=0;j<LCD_H;j++)
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	f4 cf       	rjmp	.-24     	; 0x92e <__stack+0x2f>

00000946 <ili9341_drawpixel>:



//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ea 01       	movw	r28, r20
if((x3 < 0) ||(x3 >=LCD_W) || (y3 < 0) || (y3 >=LCD_H)) return;
     94c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
     950:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
     954:	82 17       	cp	r24, r18
     956:	93 07       	cpc	r25, r19
     958:	a0 f4       	brcc	.+40     	; 0x982 <ili9341_drawpixel+0x3c>
     95a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
     95e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
     962:	62 17       	cp	r22, r18
     964:	73 07       	cpc	r23, r19
     966:	68 f4       	brcc	.+26     	; 0x982 <ili9341_drawpixel+0x3c>

ili9341_setaddress(x3,y3,x3+1,y3+1);
     968:	9b 01       	movw	r18, r22
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	ac 01       	movw	r20, r24
     970:	4f 5f       	subi	r20, 0xFF	; 255
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ili9341_setaddress>

ili9341_pushcolour(colour1);
     978:	ce 01       	movw	r24, r28
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
ili9341_pushcolour(colour1);
     97e:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <ili9341_pushcolour>
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <ili9341_drawvline>:


//draw vertical line
void ili9341_drawvline(uint16_t x,uint16_t y,uint16_t h,uint16_t colour)//basically we will see this line horizental if we see the display 320*240
{
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	ea 01       	movw	r28, r20
     992:	89 01       	movw	r16, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
     994:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
     998:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
     99c:	82 17       	cp	r24, r18
     99e:	93 07       	cpc	r25, r19
     9a0:	18 f5       	brcc	.+70     	; 0x9e8 <ili9341_drawvline+0x60>
     9a2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
     9a6:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
     9aa:	62 17       	cp	r22, r18
     9ac:	73 07       	cpc	r23, r19
     9ae:	e0 f4       	brcc	.+56     	; 0x9e8 <ili9341_drawvline+0x60>
if((y+h-1)>=LCD_H)
     9b0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <LCD_H>
     9b4:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <LCD_H+0x1>
     9b8:	9e 01       	movw	r18, r28
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	31 09       	sbc	r19, r1
     9be:	26 0f       	add	r18, r22
     9c0:	37 1f       	adc	r19, r23
     9c2:	24 17       	cp	r18, r20
     9c4:	35 07       	cpc	r19, r21
     9c6:	30 f0       	brcs	.+12     	; 0x9d4 <ili9341_drawvline+0x4c>
h=LCD_H-y;
     9c8:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <LCD_H>
     9cc:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <LCD_H+0x1>
     9d0:	c6 1b       	sub	r28, r22
     9d2:	d7 0b       	sbc	r29, r23
ili9341_setaddress(x,y,x,y+h-1);
     9d4:	9b 01       	movw	r18, r22
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	31 09       	sbc	r19, r1
     9da:	2c 0f       	add	r18, r28
     9dc:	3d 1f       	adc	r19, r29
     9de:	ac 01       	movw	r20, r24
     9e0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ili9341_setaddress>
while(h--)
     9e4:	21 97       	sbiw	r28, 0x01	; 1
     9e6:	28 f4       	brcc	.+10     	; 0x9f2 <ili9341_drawvline+0x6a>
{
ili9341_pushcolour(colour);
}
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	08 95       	ret
ili9341_pushcolour(colour);
     9f2:	c8 01       	movw	r24, r16
     9f4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ili9341_pushcolour>
     9f8:	f5 cf       	rjmp	.-22     	; 0x9e4 <ili9341_drawvline+0x5c>

000009fa <ili9341_drawhline>:


//draw horizental line

void ili9341_drawhline(uint16_t x,uint16_t y,uint16_t w,uint16_t colour)
{
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ea 01       	movw	r28, r20
     a04:	89 01       	movw	r16, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
     a06:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
     a0a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
     a0e:	82 17       	cp	r24, r18
     a10:	93 07       	cpc	r25, r19
     a12:	18 f5       	brcc	.+70     	; 0xa5a <ili9341_drawhline+0x60>
     a14:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
     a18:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
     a1c:	62 17       	cp	r22, r18
     a1e:	73 07       	cpc	r23, r19
     a20:	e0 f4       	brcc	.+56     	; 0xa5a <ili9341_drawhline+0x60>
if((x+w-1)>=LCD_W)
     a22:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <LCD_W>
     a26:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <LCD_W+0x1>
     a2a:	9e 01       	movw	r18, r28
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	31 09       	sbc	r19, r1
     a30:	28 0f       	add	r18, r24
     a32:	39 1f       	adc	r19, r25
     a34:	24 17       	cp	r18, r20
     a36:	35 07       	cpc	r19, r21
     a38:	30 f0       	brcs	.+12     	; 0xa46 <ili9341_drawhline+0x4c>
w=LCD_W-x;
     a3a:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <LCD_W>
     a3e:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <LCD_W+0x1>
     a42:	c8 1b       	sub	r28, r24
     a44:	d9 0b       	sbc	r29, r25
ili9341_setaddress(x,y,x+w-1,y);
     a46:	ac 01       	movw	r20, r24
     a48:	41 50       	subi	r20, 0x01	; 1
     a4a:	51 09       	sbc	r21, r1
     a4c:	4c 0f       	add	r20, r28
     a4e:	5d 1f       	adc	r21, r29
     a50:	9b 01       	movw	r18, r22
     a52:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ili9341_setaddress>
while(w--)
     a56:	21 97       	sbiw	r28, 0x01	; 1
     a58:	28 f4       	brcc	.+10     	; 0xa64 <ili9341_drawhline+0x6a>
{
ili9341_pushcolour(colour);
}
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret
ili9341_pushcolour(colour);
     a64:	c8 01       	movw	r24, r16
     a66:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ili9341_pushcolour>
     a6a:	f5 cf       	rjmp	.-22     	; 0xa56 <ili9341_drawhline+0x5c>

00000a6c <ili9341_fillrect>:

//draw colour filled rectangle
void ili9341_fillrect(uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t colour)
{
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	7a 01       	movw	r14, r20
     a7e:	e9 01       	movw	r28, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
     a80:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
     a84:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
     a88:	82 17       	cp	r24, r18
     a8a:	93 07       	cpc	r25, r19
     a8c:	c8 f5       	brcc	.+114    	; 0xb00 <ili9341_fillrect+0x94>
     a8e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
     a92:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
     a96:	62 17       	cp	r22, r18
     a98:	73 07       	cpc	r23, r19
     a9a:	90 f5       	brcc	.+100    	; 0xb00 <ili9341_fillrect+0x94>
if((x+w-1)>=LCD_W)
     a9c:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <LCD_W>
     aa0:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <LCD_W+0x1>
     aa4:	97 01       	movw	r18, r14
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	31 09       	sbc	r19, r1
     aaa:	28 0f       	add	r18, r24
     aac:	39 1f       	adc	r19, r25
     aae:	24 17       	cp	r18, r20
     ab0:	35 07       	cpc	r19, r21
     ab2:	30 f0       	brcs	.+12     	; 0xac0 <ili9341_fillrect+0x54>
w=LCD_W-x;
     ab4:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <LCD_W>
     ab8:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <LCD_W+0x1>
     abc:	e8 1a       	sub	r14, r24
     abe:	f9 0a       	sbc	r15, r25
if((y+h-1)>=LCD_H)
     ac0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <LCD_H>
     ac4:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <LCD_H+0x1>
     ac8:	9e 01       	movw	r18, r28
     aca:	21 50       	subi	r18, 0x01	; 1
     acc:	31 09       	sbc	r19, r1
     ace:	26 0f       	add	r18, r22
     ad0:	37 1f       	adc	r19, r23
     ad2:	24 17       	cp	r18, r20
     ad4:	35 07       	cpc	r19, r21
     ad6:	30 f0       	brcs	.+12     	; 0xae4 <ili9341_fillrect+0x78>
h=LCD_H-y;
     ad8:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <LCD_H>
     adc:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <LCD_H+0x1>
     ae0:	c6 1b       	sub	r28, r22
     ae2:	d7 0b       	sbc	r29, r23

ili9341_setaddress(x, y, x+w-1, y+h-1);
     ae4:	9b 01       	movw	r18, r22
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	31 09       	sbc	r19, r1
     aea:	2c 0f       	add	r18, r28
     aec:	3d 1f       	adc	r19, r29
     aee:	ac 01       	movw	r20, r24
     af0:	41 50       	subi	r20, 0x01	; 1
     af2:	51 09       	sbc	r21, r1
     af4:	4e 0d       	add	r20, r14
     af6:	5f 1d       	adc	r21, r15
     af8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ili9341_setaddress>

for(y=h; y>0; y--) 
     afc:	20 97       	sbiw	r28, 0x00	; 0
     afe:	a1 f4       	brne	.+40     	; 0xb28 <ili9341_fillrect+0xbc>
for(x=w; x>0; x--)
{
ili9341_pushcolour(colour);
}
}
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret
ili9341_pushcolour(colour);
     b12:	c8 01       	movw	r24, r16
     b14:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ili9341_pushcolour>
for(x=w; x>0; x--)
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	c8 1a       	sub	r12, r24
     b1c:	d1 08       	sbc	r13, r1
     b1e:	c1 14       	cp	r12, r1
     b20:	d1 04       	cpc	r13, r1
     b22:	b9 f7       	brne	.-18     	; 0xb12 <ili9341_fillrect+0xa6>
for(y=h; y>0; y--) 
     b24:	21 97       	sbiw	r28, 0x01	; 1
     b26:	ea cf       	rjmp	.-44     	; 0xafc <ili9341_fillrect+0x90>
for(x=w; x>0; x--)
     b28:	67 01       	movw	r12, r14
     b2a:	f9 cf       	rjmp	.-14     	; 0xb1e <ili9341_fillrect+0xb2>

00000b2c <ili9341_setRotation>:
//rotate screen at desired orientation
void ili9341_setRotation(uint8_t m) 
{
     b2c:	cf 93       	push	r28
     b2e:	c8 2f       	mov	r28, r24
uint8_t rotation;
ili9341_writecommand8(0x36);
     b30:	86 e3       	ldi	r24, 0x36	; 54
     b32:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
rotation=m%4;
     b36:	c3 70       	andi	r28, 0x03	; 3
switch (rotation) 
     b38:	c2 30       	cpi	r28, 0x02	; 2
     b3a:	89 f0       	breq	.+34     	; 0xb5e <ili9341_setRotation+0x32>
     b3c:	c3 30       	cpi	r28, 0x03	; 3
     b3e:	01 f1       	breq	.+64     	; 0xb80 <ili9341_setRotation+0x54>
{
case 0:
ili9341_writedata8(0x40|0x08);
     b40:	88 e4       	ldi	r24, 0x48	; 72
     b42:	c1 30       	cpi	r28, 0x01	; 1
     b44:	69 f4       	brne	.+26     	; 0xb60 <ili9341_setRotation+0x34>
LCD_W = 240;
LCD_H = 320;
break;
case 1:
ili9341_writedata8(0x20|0x08);
     b46:	88 e2       	ldi	r24, 0x28	; 40
ili9341_writedata8(0x80|0x08);
LCD_W  = 240;
LCD_H = 320;
break;
case 3:
ili9341_writedata8(0x40|0x80|0x20|0x08);
     b48:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
LCD_W  = 320;
     b4c:	80 e4       	ldi	r24, 0x40	; 64
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <LCD_W+0x1>
     b54:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <LCD_W>
LCD_H = 240;
     b58:	80 ef       	ldi	r24, 0xF0	; 240
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <ili9341_setRotation+0x48>
ili9341_writedata8(0x80|0x08);
     b5e:	88 e8       	ldi	r24, 0x88	; 136
     b60:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ili9341_writedata8>
LCD_W  = 240;
     b64:	80 ef       	ldi	r24, 0xF0	; 240
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <LCD_W+0x1>
     b6c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <LCD_W>
LCD_H = 320;
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	91 e0       	ldi	r25, 0x01	; 1
LCD_H = 240;
     b74:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <LCD_H+0x1>
     b78:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <LCD_H>
break;
}
}
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret
ili9341_writedata8(0x40|0x80|0x20|0x08);
     b80:	88 ee       	ldi	r24, 0xE8	; 232
     b82:	e2 cf       	rjmp	.-60     	; 0xb48 <ili9341_setRotation+0x1c>

00000b84 <ili9341_drawCircle>:

// Draw a circle outline
void ili9341_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) 
{
     b84:	2f 92       	push	r2
     b86:	3f 92       	push	r3
     b88:	4f 92       	push	r4
     b8a:	5f 92       	push	r5
     b8c:	6f 92       	push	r6
     b8e:	7f 92       	push	r7
     b90:	8f 92       	push	r8
     b92:	9f 92       	push	r9
     b94:	af 92       	push	r10
     b96:	bf 92       	push	r11
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <ili9341_drawCircle+0x26>
     baa:	00 d0       	rcall	.+0      	; 0xbac <ili9341_drawCircle+0x28>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	6c 01       	movw	r12, r24
     bb2:	5b 01       	movw	r10, r22
     bb4:	5c 83       	std	Y+4, r21	; 0x04
     bb6:	4b 83       	std	Y+3, r20	; 0x03
     bb8:	89 01       	movw	r16, r18
  int16_t f = 1 - r;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	3c 01       	movw	r6, r24
     bc0:	64 1a       	sub	r6, r20
     bc2:	75 0a       	sbc	r7, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
     bc4:	ca 01       	movw	r24, r20
     bc6:	91 95       	neg	r25
     bc8:	81 95       	neg	r24
     bca:	91 09       	sbc	r25, r1
     bcc:	9c 01       	movw	r18, r24
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	3a 83       	std	Y+2, r19	; 0x02
     bd4:	29 83       	std	Y+1, r18	; 0x01
  int16_t x = 0;
  int16_t y = r;

  ili9341_drawpixel(x0  , y0+r, color);
     bd6:	ba 01       	movw	r22, r20
     bd8:	6a 0d       	add	r22, r10
     bda:	7b 1d       	adc	r23, r11
     bdc:	a8 01       	movw	r20, r16
     bde:	c6 01       	movw	r24, r12
     be0:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
  ili9341_drawpixel(x0  , y0-r, color);
     be4:	b5 01       	movw	r22, r10
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	68 1b       	sub	r22, r24
     bec:	79 0b       	sbc	r23, r25
     bee:	a8 01       	movw	r20, r16
     bf0:	c6 01       	movw	r24, r12
     bf2:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
  ili9341_drawpixel(x0+r, y0  , color);
     bf6:	a8 01       	movw	r20, r16
     bf8:	b5 01       	movw	r22, r10
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	8c 0d       	add	r24, r12
     c00:	9d 1d       	adc	r25, r13
     c02:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
  ili9341_drawpixel(x0-r, y0  , color);
     c06:	a8 01       	movw	r20, r16
     c08:	b5 01       	movw	r22, r10
     c0a:	c6 01       	movw	r24, r12
     c0c:	2b 81       	ldd	r18, Y+3	; 0x03
     c0e:	3c 81       	ldd	r19, Y+4	; 0x04
     c10:	82 1b       	sub	r24, r18
     c12:	93 0b       	sbc	r25, r19
     c14:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
  int16_t x = 0;
     c18:	f1 2c       	mov	r15, r1
     c1a:	e1 2c       	mov	r14, r1

  while (x<y) {
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	e8 16       	cp	r14, r24
     c22:	f9 06       	cpc	r15, r25
     c24:	bc f0       	brlt	.+46     	; 0xc54 <ili9341_drawCircle+0xd0>
    ili9341_drawpixel(x0 + y, y0 + x, color);
    ili9341_drawpixel(x0 - y, y0 + x, color);
    ili9341_drawpixel(x0 + y, y0 - x, color);
    ili9341_drawpixel(x0 - y, y0 - x, color);
  }
}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	9f 90       	pop	r9
     c44:	8f 90       	pop	r8
     c46:	7f 90       	pop	r7
     c48:	6f 90       	pop	r6
     c4a:	5f 90       	pop	r5
     c4c:	4f 90       	pop	r4
     c4e:	3f 90       	pop	r3
     c50:	2f 90       	pop	r2
     c52:	08 95       	ret
    if (f >= 0) {
     c54:	77 fc       	sbrc	r7, 7
     c56:	0d c0       	rjmp	.+26     	; 0xc72 <ili9341_drawCircle+0xee>
      y--;
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	9c 83       	std	Y+4, r25	; 0x04
     c60:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
     c62:	29 81       	ldd	r18, Y+1	; 0x01
     c64:	3a 81       	ldd	r19, Y+2	; 0x02
     c66:	2e 5f       	subi	r18, 0xFE	; 254
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	3a 83       	std	Y+2, r19	; 0x02
     c6c:	29 83       	std	Y+1, r18	; 0x01
      f += ddF_y;
     c6e:	62 0e       	add	r6, r18
     c70:	73 1e       	adc	r7, r19
    x++;
     c72:	3f ef       	ldi	r19, 0xFF	; 255
     c74:	e3 1a       	sub	r14, r19
     c76:	f3 0a       	sbc	r15, r19
    f += ddF_x;
     c78:	c7 01       	movw	r24, r14
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	68 0e       	add	r6, r24
     c82:	79 1e       	adc	r7, r25
    ili9341_drawpixel(x0 + x, y0 + y, color);
     c84:	26 01       	movw	r4, r12
     c86:	4e 0c       	add	r4, r14
     c88:	5f 1c       	adc	r5, r15
     c8a:	a8 01       	movw	r20, r16
     c8c:	8b 80       	ldd	r8, Y+3	; 0x03
     c8e:	9c 80       	ldd	r9, Y+4	; 0x04
     c90:	8a 0c       	add	r8, r10
     c92:	9b 1c       	adc	r9, r11
     c94:	b4 01       	movw	r22, r8
     c96:	c2 01       	movw	r24, r4
     c98:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - x, y0 + y, color);
     c9c:	16 01       	movw	r2, r12
     c9e:	2e 18       	sub	r2, r14
     ca0:	3f 08       	sbc	r3, r15
     ca2:	a8 01       	movw	r20, r16
     ca4:	b4 01       	movw	r22, r8
     ca6:	c1 01       	movw	r24, r2
     ca8:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + x, y0 - y, color);
     cac:	a8 01       	movw	r20, r16
     cae:	45 01       	movw	r8, r10
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	88 1a       	sub	r8, r24
     cb6:	99 0a       	sbc	r9, r25
     cb8:	b4 01       	movw	r22, r8
     cba:	c2 01       	movw	r24, r4
     cbc:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - x, y0 - y, color);
     cc0:	a8 01       	movw	r20, r16
     cc2:	b4 01       	movw	r22, r8
     cc4:	c1 01       	movw	r24, r2
     cc6:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + y, y0 + x, color);
     cca:	45 01       	movw	r8, r10
     ccc:	8e 0c       	add	r8, r14
     cce:	9f 1c       	adc	r9, r15
     cd0:	a8 01       	movw	r20, r16
     cd2:	b4 01       	movw	r22, r8
     cd4:	4b 80       	ldd	r4, Y+3	; 0x03
     cd6:	5c 80       	ldd	r5, Y+4	; 0x04
     cd8:	4c 0c       	add	r4, r12
     cda:	5d 1c       	adc	r5, r13
     cdc:	c2 01       	movw	r24, r4
     cde:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 + x, color);
     ce2:	a8 01       	movw	r20, r16
     ce4:	b4 01       	movw	r22, r8
     ce6:	16 01       	movw	r2, r12
     ce8:	2b 81       	ldd	r18, Y+3	; 0x03
     cea:	3c 81       	ldd	r19, Y+4	; 0x04
     cec:	22 1a       	sub	r2, r18
     cee:	33 0a       	sbc	r3, r19
     cf0:	c1 01       	movw	r24, r2
     cf2:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + y, y0 - x, color);
     cf6:	45 01       	movw	r8, r10
     cf8:	8e 18       	sub	r8, r14
     cfa:	9f 08       	sbc	r9, r15
     cfc:	a8 01       	movw	r20, r16
     cfe:	b4 01       	movw	r22, r8
     d00:	c2 01       	movw	r24, r4
     d02:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 - x, color);
     d06:	a8 01       	movw	r20, r16
     d08:	b4 01       	movw	r22, r8
     d0a:	c1 01       	movw	r24, r2
     d0c:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
     d10:	85 cf       	rjmp	.-246    	; 0xc1c <ili9341_drawCircle+0x98>

00000d12 <ili9341_drawCircleHelper>:

//DRaw Circle Helper
void ili9341_drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) 
{
     d12:	2f 92       	push	r2
     d14:	3f 92       	push	r3
     d16:	4f 92       	push	r4
     d18:	5f 92       	push	r5
     d1a:	6f 92       	push	r6
     d1c:	7f 92       	push	r7
     d1e:	8f 92       	push	r8
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	6c 01       	movw	r12, r24
     d38:	5b 01       	movw	r10, r22
     d3a:	ea 01       	movw	r28, r20
  int16_t f     = 1 - r;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	4c 01       	movw	r8, r24
     d42:	84 1a       	sub	r8, r20
     d44:	95 0a       	sbc	r9, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
     d46:	66 24       	eor	r6, r6
     d48:	77 24       	eor	r7, r7
     d4a:	64 1a       	sub	r6, r20
     d4c:	75 0a       	sbc	r7, r21
     d4e:	66 0c       	add	r6, r6
     d50:	77 1c       	adc	r7, r7
  int16_t x     = 0;
     d52:	f1 2c       	mov	r15, r1
     d54:	e1 2c       	mov	r14, r1
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
     d56:	82 2f       	mov	r24, r18
     d58:	84 70       	andi	r24, 0x04	; 4
     d5a:	58 2e       	mov	r5, r24
      ili9341_drawpixel(x0 + x, y0 + y, color);
      ili9341_drawpixel(x0 + y, y0 + x, color);
    }
    if (cornername & 0x2) {
     d5c:	82 2f       	mov	r24, r18
     d5e:	82 70       	andi	r24, 0x02	; 2
     d60:	48 2e       	mov	r4, r24
      ili9341_drawpixel(x0 + x, y0 - y, color);
      ili9341_drawpixel(x0 + y, y0 - x, color);
    }
    if (cornername & 0x8) {
     d62:	82 2f       	mov	r24, r18
     d64:	88 70       	andi	r24, 0x08	; 8
     d66:	38 2e       	mov	r3, r24
      ili9341_drawpixel(x0 - y, y0 + x, color);
      ili9341_drawpixel(x0 - x, y0 + y, color);
    }
    if (cornername & 0x1) {
     d68:	21 70       	andi	r18, 0x01	; 1
     d6a:	22 2e       	mov	r2, r18
  while (x<y) {
     d6c:	ec 16       	cp	r14, r28
     d6e:	fd 06       	cpc	r15, r29
     d70:	9c f0       	brlt	.+38     	; 0xd98 <ili9341_drawCircleHelper+0x86>
      ili9341_drawpixel(x0 - y, y0 - x, color);
      ili9341_drawpixel(x0 - x, y0 - y, color);
    }
  }
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	3f 90       	pop	r3
     d94:	2f 90       	pop	r2
     d96:	08 95       	ret
    if (f >= 0) {
     d98:	97 fc       	sbrc	r9, 7
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <ili9341_drawCircleHelper+0x96>
      y--;
     d9c:	21 97       	sbiw	r28, 0x01	; 1
      ddF_y += 2;
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	68 0e       	add	r6, r24
     da2:	71 1c       	adc	r7, r1
      f     += ddF_y;
     da4:	86 0c       	add	r8, r6
     da6:	97 1c       	adc	r9, r7
    x++;
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	e8 1a       	sub	r14, r24
     dac:	f8 0a       	sbc	r15, r24
    f     += ddF_x;
     dae:	c7 01       	movw	r24, r14
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	88 0e       	add	r8, r24
     db8:	99 1e       	adc	r9, r25
    if (cornername & 0x4) {
     dba:	55 20       	and	r5, r5
     dbc:	91 f0       	breq	.+36     	; 0xde2 <ili9341_drawCircleHelper+0xd0>
      ili9341_drawpixel(x0 + x, y0 + y, color);
     dbe:	a8 01       	movw	r20, r16
     dc0:	be 01       	movw	r22, r28
     dc2:	6a 0d       	add	r22, r10
     dc4:	7b 1d       	adc	r23, r11
     dc6:	c6 01       	movw	r24, r12
     dc8:	8e 0d       	add	r24, r14
     dca:	9f 1d       	adc	r25, r15
     dcc:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 + x, color);
     dd0:	a8 01       	movw	r20, r16
     dd2:	b5 01       	movw	r22, r10
     dd4:	6e 0d       	add	r22, r14
     dd6:	7f 1d       	adc	r23, r15
     dd8:	ce 01       	movw	r24, r28
     dda:	8c 0d       	add	r24, r12
     ddc:	9d 1d       	adc	r25, r13
     dde:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    if (cornername & 0x2) {
     de2:	44 20       	and	r4, r4
     de4:	91 f0       	breq	.+36     	; 0xe0a <ili9341_drawCircleHelper+0xf8>
      ili9341_drawpixel(x0 + x, y0 - y, color);
     de6:	a8 01       	movw	r20, r16
     de8:	b5 01       	movw	r22, r10
     dea:	6c 1b       	sub	r22, r28
     dec:	7d 0b       	sbc	r23, r29
     dee:	c6 01       	movw	r24, r12
     df0:	8e 0d       	add	r24, r14
     df2:	9f 1d       	adc	r25, r15
     df4:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 - x, color);
     df8:	a8 01       	movw	r20, r16
     dfa:	b5 01       	movw	r22, r10
     dfc:	6e 19       	sub	r22, r14
     dfe:	7f 09       	sbc	r23, r15
     e00:	ce 01       	movw	r24, r28
     e02:	8c 0d       	add	r24, r12
     e04:	9d 1d       	adc	r25, r13
     e06:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    if (cornername & 0x8) {
     e0a:	33 20       	and	r3, r3
     e0c:	91 f0       	breq	.+36     	; 0xe32 <ili9341_drawCircleHelper+0x120>
      ili9341_drawpixel(x0 - y, y0 + x, color);
     e0e:	a8 01       	movw	r20, r16
     e10:	b5 01       	movw	r22, r10
     e12:	6e 0d       	add	r22, r14
     e14:	7f 1d       	adc	r23, r15
     e16:	c6 01       	movw	r24, r12
     e18:	8c 1b       	sub	r24, r28
     e1a:	9d 0b       	sbc	r25, r29
     e1c:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 + y, color);
     e20:	a8 01       	movw	r20, r16
     e22:	be 01       	movw	r22, r28
     e24:	6a 0d       	add	r22, r10
     e26:	7b 1d       	adc	r23, r11
     e28:	c6 01       	movw	r24, r12
     e2a:	8e 19       	sub	r24, r14
     e2c:	9f 09       	sbc	r25, r15
     e2e:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    if (cornername & 0x1) {
     e32:	22 20       	and	r2, r2
     e34:	09 f4       	brne	.+2      	; 0xe38 <ili9341_drawCircleHelper+0x126>
     e36:	9a cf       	rjmp	.-204    	; 0xd6c <ili9341_drawCircleHelper+0x5a>
      ili9341_drawpixel(x0 - y, y0 - x, color);
     e38:	a8 01       	movw	r20, r16
     e3a:	b5 01       	movw	r22, r10
     e3c:	6e 19       	sub	r22, r14
     e3e:	7f 09       	sbc	r23, r15
     e40:	c6 01       	movw	r24, r12
     e42:	8c 1b       	sub	r24, r28
     e44:	9d 0b       	sbc	r25, r29
     e46:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 - y, color);
     e4a:	a8 01       	movw	r20, r16
     e4c:	b5 01       	movw	r22, r10
     e4e:	6c 1b       	sub	r22, r28
     e50:	7d 0b       	sbc	r23, r29
     e52:	c6 01       	movw	r24, r12
     e54:	8e 19       	sub	r24, r14
     e56:	9f 09       	sbc	r25, r15
     e58:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
     e5c:	87 cf       	rjmp	.-242    	; 0xd6c <ili9341_drawCircleHelper+0x5a>

00000e5e <ili9341_drawLine>:
}


// Bresenham's algorithm - thx wikpedia
void ili9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
     e5e:	2f 92       	push	r2
     e60:	3f 92       	push	r3
     e62:	4f 92       	push	r4
     e64:	5f 92       	push	r5
     e66:	6f 92       	push	r6
     e68:	7f 92       	push	r7
     e6a:	8f 92       	push	r8
     e6c:	9f 92       	push	r9
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	00 d0       	rcall	.+0      	; 0xe84 <ili9341_drawLine+0x26>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <ili9341_drawLine+0x28>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	8b 83       	std	Y+3, r24	; 0x03
     e8e:	7b 01       	movw	r14, r22
     e90:	6a 01       	movw	r12, r20
     e92:	58 01       	movw	r10, r16
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
     e94:	89 01       	movw	r16, r18
     e96:	06 1b       	sub	r16, r22
     e98:	17 0b       	sbc	r17, r23
     e9a:	17 ff       	sbrs	r17, 7
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <ili9341_drawLine+0x46>
     e9e:	11 95       	neg	r17
     ea0:	01 95       	neg	r16
     ea2:	11 09       	sbc	r17, r1
     ea4:	46 01       	movw	r8, r12
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	88 1a       	sub	r8, r24
     eac:	99 0a       	sbc	r9, r25
     eae:	97 fe       	sbrs	r9, 7
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <ili9341_drawLine+0x5a>
     eb2:	91 94       	neg	r9
     eb4:	81 94       	neg	r8
     eb6:	91 08       	sbc	r9, r1
  if (steep) {
     eb8:	80 16       	cp	r8, r16
     eba:	91 06       	cpc	r9, r17
     ebc:	5c f4       	brge	.+22     	; 0xed4 <ili9341_drawLine+0x76>
     ebe:	9c 2d       	mov	r25, r12
     ec0:	8d 2d       	mov	r24, r13
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
     ec2:	69 01       	movw	r12, r18
     ec4:	29 2f       	mov	r18, r25
     ec6:	38 2f       	mov	r19, r24
  if (steep) {
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
    _swap_int16_t(x0, y0);
     ecc:	fc 82       	std	Y+4, r15	; 0x04
     ece:	eb 82       	std	Y+3, r14	; 0x03
     ed0:	e9 2e       	mov	r14, r25
     ed2:	f8 2e       	mov	r15, r24
  }

  if (x0 > x1) {
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	c8 16       	cp	r12, r24
     eda:	d9 06       	cpc	r13, r25
     edc:	5c f4       	brge	.+22     	; 0xef4 <ili9341_drawLine+0x96>
     ede:	9e 2d       	mov	r25, r14
     ee0:	8f 2d       	mov	r24, r15
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
     ee2:	79 01       	movw	r14, r18
     ee4:	29 2f       	mov	r18, r25
     ee6:	38 2f       	mov	r19, r24
  if (x0 > x1) {
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	dc 82       	std	Y+4, r13	; 0x04
     eee:	cb 82       	std	Y+3, r12	; 0x03
     ef0:	c9 2e       	mov	r12, r25
     ef2:	d8 2e       	mov	r13, r24
  }

  int16_t dx, dy;
  dx = x1 - x0;
     ef4:	16 01       	movw	r2, r12
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	28 1a       	sub	r2, r24
     efc:	39 0a       	sbc	r3, r25
  dy = abs(y1 - y0);
     efe:	29 01       	movw	r4, r18
     f00:	4e 18       	sub	r4, r14
     f02:	5f 08       	sbc	r5, r15
     f04:	57 fe       	sbrs	r5, 7
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <ili9341_drawLine+0xb0>
     f08:	51 94       	neg	r5
     f0a:	41 94       	neg	r4
     f0c:	51 08       	sbc	r5, r1

  int16_t err = dx / 2;
     f0e:	31 01       	movw	r6, r2
     f10:	37 fe       	sbrs	r3, 7
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <ili9341_drawLine+0xbc>
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	69 1a       	sub	r6, r25
     f18:	79 0a       	sbc	r7, r25
     f1a:	75 94       	asr	r7
     f1c:	67 94       	ror	r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	9f ef       	ldi	r25, 0xFF	; 255
  if (y0 < y1) {
     f22:	e2 16       	cp	r14, r18
     f24:	f3 06       	cpc	r15, r19
     f26:	14 f4       	brge	.+4      	; 0xf2c <ili9341_drawLine+0xce>
    ystep = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	1b c0       	rjmp	.+54     	; 0xf68 <ili9341_drawLine+0x10a>
  }

  for (; x0<=x1; x0++) {
    if (steep) {
      ili9341_drawpixel(y0, x0, color);
     f32:	a5 01       	movw	r20, r10
     f34:	6b 81       	ldd	r22, Y+3	; 0x03
     f36:	7c 81       	ldd	r23, Y+4	; 0x04
     f38:	c7 01       	movw	r24, r14
    if (steep) {
     f3a:	80 16       	cp	r8, r16
     f3c:	91 06       	cpc	r9, r17
     f3e:	1c f0       	brlt	.+6      	; 0xf46 <ili9341_drawLine+0xe8>
    } else {
      ili9341_drawpixel(x0, y0, color);
     f40:	b7 01       	movw	r22, r14
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    }
    err -= dy;
     f4a:	64 18       	sub	r6, r4
     f4c:	75 08       	sbc	r7, r5
    if (err < 0) {
     f4e:	77 fe       	sbrs	r7, 7
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <ili9341_drawLine+0x100>
      y0 += ystep;
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	e8 0e       	add	r14, r24
     f58:	f9 1e       	adc	r15, r25
      err += dx;
     f5a:	62 0c       	add	r6, r2
     f5c:	73 1c       	adc	r7, r3
  for (; x0<=x1; x0++) {
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	c8 16       	cp	r12, r24
     f6e:	d9 06       	cpc	r13, r25
     f70:	04 f7       	brge	.-64     	; 0xf32 <ili9341_drawLine+0xd4>
    }
  }
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	9f 90       	pop	r9
     f90:	8f 90       	pop	r8
     f92:	7f 90       	pop	r7
     f94:	6f 90       	pop	r6
     f96:	5f 90       	pop	r5
     f98:	4f 90       	pop	r4
     f9a:	3f 90       	pop	r3
     f9c:	2f 90       	pop	r2
     f9e:	08 95       	ret

00000fa0 <ili9341_drawFastVLine>:
{
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
  ili9341_drawLine(x, y, x, y+h-1, color);
     fa4:	46 0f       	add	r20, r22
     fa6:	57 1f       	adc	r21, r23
     fa8:	41 50       	subi	r20, 0x01	; 1
     faa:	51 09       	sbc	r21, r1
     fac:	89 01       	movw	r16, r18
     fae:	9a 01       	movw	r18, r20
     fb0:	ac 01       	movw	r20, r24
     fb2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <ili9341_drawLine>
}
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	08 95       	ret

00000fbc <ili9341_fillCircleHelper>:
{
     fbc:	2f 92       	push	r2
     fbe:	3f 92       	push	r3
     fc0:	4f 92       	push	r4
     fc2:	5f 92       	push	r5
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <ili9341_fillCircleHelper+0x26>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <ili9341_fillCircleHelper+0x28>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	5c 01       	movw	r10, r24
     fea:	4b 01       	movw	r8, r22
     fec:	5c 83       	std	Y+4, r21	; 0x04
     fee:	4b 83       	std	Y+3, r20	; 0x03
  int16_t f     = 1 - r;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2c 01       	movw	r4, r24
     ff6:	44 1a       	sub	r4, r20
     ff8:	55 0a       	sbc	r5, r21
  int16_t ddF_y = -2 * r;
     ffa:	1a 01       	movw	r2, r20
     ffc:	31 94       	neg	r3
     ffe:	21 94       	neg	r2
    1000:	31 08       	sbc	r3, r1
    1002:	22 0c       	add	r2, r2
    1004:	33 1c       	adc	r3, r3
  int16_t x     = 0;
    1006:	d1 2c       	mov	r13, r1
    1008:	c1 2c       	mov	r12, r1
  int16_t ddF_x = 1;
    100a:	66 24       	eor	r6, r6
    100c:	63 94       	inc	r6
    100e:	71 2c       	mov	r7, r1
    if (cornername & 0x1) {
    1010:	42 2f       	mov	r20, r18
    1012:	41 70       	andi	r20, 0x01	; 1
    1014:	49 83       	std	Y+1, r20	; 0x01
    if (cornername & 0x2) {
    1016:	22 70       	andi	r18, 0x02	; 2
    1018:	2a 83       	std	Y+2, r18	; 0x02
  while (x<y) {
    101a:	4b 81       	ldd	r20, Y+3	; 0x03
    101c:	5c 81       	ldd	r21, Y+4	; 0x04
    101e:	c4 16       	cp	r12, r20
    1020:	d5 06       	cpc	r13, r21
    1022:	bc f0       	brlt	.+46     	; 0x1052 <ili9341_fillCircleHelper+0x96>
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	bf 90       	pop	r11
    103e:	af 90       	pop	r10
    1040:	9f 90       	pop	r9
    1042:	8f 90       	pop	r8
    1044:	7f 90       	pop	r7
    1046:	6f 90       	pop	r6
    1048:	5f 90       	pop	r5
    104a:	4f 90       	pop	r4
    104c:	3f 90       	pop	r3
    104e:	2f 90       	pop	r2
    1050:	08 95       	ret
    if (f >= 0) {
    1052:	57 fc       	sbrc	r5, 7
    1054:	0a c0       	rjmp	.+20     	; 0x106a <ili9341_fillCircleHelper+0xae>
      y--;
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	29 0e       	add	r2, r25
    1064:	31 1c       	adc	r3, r1
      f     += ddF_y;
    1066:	42 0c       	add	r4, r2
    1068:	53 1c       	adc	r5, r3
    x++;
    106a:	ef ef       	ldi	r30, 0xFF	; 255
    106c:	ce 1a       	sub	r12, r30
    106e:	de 0a       	sbc	r13, r30
    ddF_x += 2;
    1070:	f2 e0       	ldi	r31, 0x02	; 2
    1072:	6f 0e       	add	r6, r31
    1074:	71 1c       	adc	r7, r1
    f     += ddF_x;
    1076:	46 0c       	add	r4, r6
    1078:	57 1c       	adc	r5, r7
    if (cornername & 0x1) {
    107a:	49 81       	ldd	r20, Y+1	; 0x01
    107c:	44 23       	and	r20, r20
    107e:	01 f1       	breq	.+64     	; 0x10c0 <ili9341_fillCircleHelper+0x104>
      ili9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
    1080:	4b 81       	ldd	r20, Y+3	; 0x03
    1082:	5c 81       	ldd	r21, Y+4	; 0x04
    1084:	44 0f       	add	r20, r20
    1086:	55 1f       	adc	r21, r21
    1088:	4f 5f       	subi	r20, 0xFF	; 255
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	40 0f       	add	r20, r16
    108e:	51 1f       	adc	r21, r17
    1090:	97 01       	movw	r18, r14
    1092:	b4 01       	movw	r22, r8
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	68 1b       	sub	r22, r24
    109a:	79 0b       	sbc	r23, r25
    109c:	c5 01       	movw	r24, r10
    109e:	8c 0d       	add	r24, r12
    10a0:	9d 1d       	adc	r25, r13
    10a2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    10a6:	97 01       	movw	r18, r14
    10a8:	a8 01       	movw	r20, r16
    10aa:	46 0d       	add	r20, r6
    10ac:	57 1d       	adc	r21, r7
    10ae:	b4 01       	movw	r22, r8
    10b0:	6c 19       	sub	r22, r12
    10b2:	7d 09       	sbc	r23, r13
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	8a 0d       	add	r24, r10
    10ba:	9b 1d       	adc	r25, r11
    10bc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
    if (cornername & 0x2) {
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	99 23       	and	r25, r25
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <ili9341_fillCircleHelper+0x10c>
    10c6:	a9 cf       	rjmp	.-174    	; 0x101a <ili9341_fillCircleHelper+0x5e>
      ili9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
    10c8:	4b 81       	ldd	r20, Y+3	; 0x03
    10ca:	5c 81       	ldd	r21, Y+4	; 0x04
    10cc:	44 0f       	add	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	4f 5f       	subi	r20, 0xFF	; 255
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	40 0f       	add	r20, r16
    10d6:	51 1f       	adc	r21, r17
    10d8:	97 01       	movw	r18, r14
    10da:	b4 01       	movw	r22, r8
    10dc:	eb 81       	ldd	r30, Y+3	; 0x03
    10de:	fc 81       	ldd	r31, Y+4	; 0x04
    10e0:	6e 1b       	sub	r22, r30
    10e2:	7f 0b       	sbc	r23, r31
    10e4:	c5 01       	movw	r24, r10
    10e6:	8c 19       	sub	r24, r12
    10e8:	9d 09       	sbc	r25, r13
    10ea:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    10ee:	97 01       	movw	r18, r14
    10f0:	a3 01       	movw	r20, r6
    10f2:	40 0f       	add	r20, r16
    10f4:	51 1f       	adc	r21, r17
    10f6:	b4 01       	movw	r22, r8
    10f8:	6c 19       	sub	r22, r12
    10fa:	7d 09       	sbc	r23, r13
    10fc:	c5 01       	movw	r24, r10
    10fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1100:	fc 81       	ldd	r31, Y+4	; 0x04
    1102:	8e 1b       	sub	r24, r30
    1104:	9f 0b       	sbc	r25, r31
    1106:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
    110a:	87 cf       	rjmp	.-242    	; 0x101a <ili9341_fillCircleHelper+0x5e>

0000110c <ili9341_fillCircle>:
{
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	6c 01       	movw	r12, r24
    1122:	5b 01       	movw	r10, r22
    1124:	ea 01       	movw	r28, r20
    1126:	79 01       	movw	r14, r18
  ili9341_drawvline(x0, y0-r, 2*r+1, color);
    1128:	44 0f       	add	r20, r20
    112a:	55 1f       	adc	r21, r21
    112c:	4f 5f       	subi	r20, 0xFF	; 255
    112e:	5f 4f       	sbci	r21, 0xFF	; 255
    1130:	6c 1b       	sub	r22, r28
    1132:	7d 0b       	sbc	r23, r29
    1134:	c6 01       	movw	r24, r12
    1136:	0e 94 c4 04 	call	0x988	; 0x988 <ili9341_drawvline>
  ili9341_fillCircleHelper(x0, y0, r, 3, 0, color);
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	00 e0       	ldi	r16, 0x00	; 0
    113e:	23 e0       	ldi	r18, 0x03	; 3
    1140:	ae 01       	movw	r20, r28
    1142:	b5 01       	movw	r22, r10
    1144:	c6 01       	movw	r24, r12
    1146:	0e 94 de 07 	call	0xfbc	; 0xfbc <ili9341_fillCircleHelper>
}
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	08 95       	ret

00001160 <ili9341_drawFastHLine>:
{
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
  ili9341_drawLine(x, y, x+w-1, y, color);
    1164:	48 0f       	add	r20, r24
    1166:	59 1f       	adc	r21, r25
    1168:	41 50       	subi	r20, 0x01	; 1
    116a:	51 09       	sbc	r21, r1
    116c:	89 01       	movw	r16, r18
    116e:	9b 01       	movw	r18, r22
    1170:	0e 94 2f 07 	call	0xe5e	; 0xe5e <ili9341_drawLine>
}
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <ili9341_drawRect>:

// Draw a rectangle
void ili9341_drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    117a:	af 92       	push	r10
    117c:	bf 92       	push	r11
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
    1190:	7b 01       	movw	r14, r22
    1192:	5a 01       	movw	r10, r20
    1194:	69 01       	movw	r12, r18
  ili9341_drawFastHLine(x, y, w, color);
    1196:	98 01       	movw	r18, r16
    1198:	0e 94 b0 08 	call	0x1160	; 0x1160 <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x, y+h-1, w, color);
    119c:	b7 01       	movw	r22, r14
    119e:	6c 0d       	add	r22, r12
    11a0:	7d 1d       	adc	r23, r13
    11a2:	61 50       	subi	r22, 0x01	; 1
    11a4:	71 09       	sbc	r23, r1
    11a6:	98 01       	movw	r18, r16
    11a8:	a5 01       	movw	r20, r10
    11aa:	ce 01       	movw	r24, r28
    11ac:	0e 94 b0 08 	call	0x1160	; 0x1160 <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x, y, h, color);
    11b0:	98 01       	movw	r18, r16
    11b2:	a6 01       	movw	r20, r12
    11b4:	b7 01       	movw	r22, r14
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y, h, color);
    11bc:	ce 01       	movw	r24, r28
    11be:	8a 0d       	add	r24, r10
    11c0:	9b 1d       	adc	r25, r11
    11c2:	98 01       	movw	r18, r16
    11c4:	a6 01       	movw	r20, r12
    11c6:	b7 01       	movw	r22, r14
    11c8:	01 97       	sbiw	r24, 0x01	; 1
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	df 90       	pop	r13
    11d8:	cf 90       	pop	r12
    11da:	bf 90       	pop	r11
    11dc:	af 90       	pop	r10
  ili9341_drawFastVLine(x+w-1, y, h, color);
    11de:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <ili9341_drawFastVLine>

000011e2 <ili9341_fillRect>:


void ili9341_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	6b 01       	movw	r12, r22
    11f8:	59 01       	movw	r10, r18
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
    11fa:	ec 01       	movw	r28, r24
    11fc:	7c 01       	movw	r14, r24
    11fe:	e4 0e       	add	r14, r20
    1200:	f5 1e       	adc	r15, r21
    1202:	ce 15       	cp	r28, r14
    1204:	df 05       	cpc	r29, r15
    1206:	5c f0       	brlt	.+22     	; 0x121e <ili9341_fillRect+0x3c>
    ili9341_drawFastVLine(i, y, h, color);
  }
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	08 95       	ret
    ili9341_drawFastVLine(i, y, h, color);
    121e:	98 01       	movw	r18, r16
    1220:	a5 01       	movw	r20, r10
    1222:	b6 01       	movw	r22, r12
    1224:	ce 01       	movw	r24, r28
    1226:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
  for (int16_t i=x; i<x+w; i++) {
    122a:	21 96       	adiw	r28, 0x01	; 1
    122c:	ea cf       	rjmp	.-44     	; 0x1202 <ili9341_fillRect+0x20>

0000122e <ili9341_drawRoundRect>:
// Draw a rounded rectangle
void ili9341_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    122e:	2f 92       	push	r2
    1230:	3f 92       	push	r3
    1232:	4f 92       	push	r4
    1234:	5f 92       	push	r5
    1236:	6f 92       	push	r6
    1238:	7f 92       	push	r7
    123a:	8f 92       	push	r8
    123c:	9f 92       	push	r9
    123e:	af 92       	push	r10
    1240:	bf 92       	push	r11
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	00 d0       	rcall	.+0      	; 0x1254 <ili9341_drawRoundRect+0x26>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <ili9341_drawRoundRect+0x28>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2c 01       	movw	r4, r24
    125c:	3b 01       	movw	r6, r22
    125e:	1a 01       	movw	r2, r20
    1260:	69 01       	movw	r12, r18
    1262:	1c 83       	std	Y+4, r17	; 0x04
    1264:	0b 83       	std	Y+3, r16	; 0x03
  // smarter version
  ili9341_drawFastHLine(x+r  , y    , w-2*r, color); // Top
    1266:	00 0f       	add	r16, r16
    1268:	11 1f       	adc	r17, r17
    126a:	4a 01       	movw	r8, r20
    126c:	80 1a       	sub	r8, r16
    126e:	91 0a       	sbc	r9, r17
    1270:	ab 80       	ldd	r10, Y+3	; 0x03
    1272:	bc 80       	ldd	r11, Y+4	; 0x04
    1274:	a4 0c       	add	r10, r4
    1276:	b5 1c       	adc	r11, r5
    1278:	97 01       	movw	r18, r14
    127a:	a4 01       	movw	r20, r8
    127c:	c5 01       	movw	r24, r10
    127e:	0e 94 b0 08 	call	0x1160	; 0x1160 <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    1282:	c3 01       	movw	r24, r6
    1284:	8c 0d       	add	r24, r12
    1286:	9d 1d       	adc	r25, r13
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	bc 01       	movw	r22, r24
    128e:	61 50       	subi	r22, 0x01	; 1
    1290:	71 09       	sbc	r23, r1
    1292:	97 01       	movw	r18, r14
    1294:	a4 01       	movw	r20, r8
    1296:	c5 01       	movw	r24, r10
    1298:	0e 94 b0 08 	call	0x1160	; 0x1160 <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x    , y+r  , h-2*r, color); // Left
    129c:	c0 1a       	sub	r12, r16
    129e:	d1 0a       	sbc	r13, r17
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	68 0e       	add	r6, r24
    12a6:	79 1e       	adc	r7, r25
    12a8:	97 01       	movw	r18, r14
    12aa:	a6 01       	movw	r20, r12
    12ac:	b3 01       	movw	r22, r6
    12ae:	c2 01       	movw	r24, r4
    12b0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    12b4:	42 0c       	add	r4, r2
    12b6:	53 1c       	adc	r5, r3
    12b8:	97 01       	movw	r18, r14
    12ba:	a6 01       	movw	r20, r12
    12bc:	b3 01       	movw	r22, r6
    12be:	c2 01       	movw	r24, r4
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ili9341_drawFastVLine>
  // draw four corners
  ili9341_drawCircleHelper(x+r    , y+r    , r, 1, color);
    12c6:	87 01       	movw	r16, r14
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	4b 81       	ldd	r20, Y+3	; 0x03
    12cc:	5c 81       	ldd	r21, Y+4	; 0x04
    12ce:	b3 01       	movw	r22, r6
    12d0:	c5 01       	movw	r24, r10
    12d2:	0e 94 89 06 	call	0xd12	; 0xd12 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	48 1a       	sub	r4, r24
    12dc:	59 0a       	sbc	r5, r25
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	49 1a       	sub	r4, r25
    12e2:	51 08       	sbc	r5, r1
    12e4:	22 e0       	ldi	r18, 0x02	; 2
    12e6:	4b 81       	ldd	r20, Y+3	; 0x03
    12e8:	5c 81       	ldd	r21, Y+4	; 0x04
    12ea:	b3 01       	movw	r22, r6
    12ec:	c2 01       	movw	r24, r4
    12ee:	0e 94 89 06 	call	0xd12	; 0xd12 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    12f2:	c9 80       	ldd	r12, Y+1	; 0x01
    12f4:	da 80       	ldd	r13, Y+2	; 0x02
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	c8 1a       	sub	r12, r24
    12fc:	d9 0a       	sbc	r13, r25
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	c9 1a       	sub	r12, r25
    1302:	d1 08       	sbc	r13, r1
    1304:	24 e0       	ldi	r18, 0x04	; 4
    1306:	4b 81       	ldd	r20, Y+3	; 0x03
    1308:	5c 81       	ldd	r21, Y+4	; 0x04
    130a:	b6 01       	movw	r22, r12
    130c:	c2 01       	movw	r24, r4
    130e:	0e 94 89 06 	call	0xd12	; 0xd12 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    1312:	28 e0       	ldi	r18, 0x08	; 8
    1314:	4b 81       	ldd	r20, Y+3	; 0x03
    1316:	5c 81       	ldd	r21, Y+4	; 0x04
    1318:	b6 01       	movw	r22, r12
    131a:	c5 01       	movw	r24, r10
    131c:	0e 94 89 06 	call	0xd12	; 0xd12 <ili9341_drawCircleHelper>
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	7f 90       	pop	r7
    1342:	6f 90       	pop	r6
    1344:	5f 90       	pop	r5
    1346:	4f 90       	pop	r4
    1348:	3f 90       	pop	r3
    134a:	2f 90       	pop	r2
    134c:	08 95       	ret

0000134e <ili9341_fillRoundRect>:

// Fill a rounded rectangle
void ili9341_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    134e:	2f 92       	push	r2
    1350:	3f 92       	push	r3
    1352:	4f 92       	push	r4
    1354:	5f 92       	push	r5
    1356:	6f 92       	push	r6
    1358:	7f 92       	push	r7
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	1c 01       	movw	r2, r24
    1374:	5b 01       	movw	r10, r22
    1376:	2a 01       	movw	r4, r20
    1378:	e9 01       	movw	r28, r18
    137a:	68 01       	movw	r12, r16
    137c:	47 01       	movw	r8, r14
  // smarter version
  ili9341_fillRect(x+r, y, w-2*r, h, color);
    137e:	78 01       	movw	r14, r16
    1380:	ee 0c       	add	r14, r14
    1382:	ff 1c       	adc	r15, r15
    1384:	38 01       	movw	r6, r16
    1386:	62 0c       	add	r6, r2
    1388:	73 1c       	adc	r7, r3
    138a:	4e 19       	sub	r20, r14
    138c:	5f 09       	sbc	r21, r15
    138e:	84 01       	movw	r16, r8
    1390:	c3 01       	movw	r24, r6
    1392:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <ili9341_fillRect>

  // draw four corners
  ili9341_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    1396:	ce 19       	sub	r28, r14
    1398:	df 09       	sbc	r29, r15
    139a:	21 97       	sbiw	r28, 0x01	; 1
    139c:	ac 0c       	add	r10, r12
    139e:	bd 1c       	adc	r11, r13
    13a0:	42 0c       	add	r4, r2
    13a2:	53 1c       	adc	r5, r3
    13a4:	c2 01       	movw	r24, r4
    13a6:	8c 19       	sub	r24, r12
    13a8:	9d 09       	sbc	r25, r13
    13aa:	74 01       	movw	r14, r8
    13ac:	8e 01       	movw	r16, r28
    13ae:	21 e0       	ldi	r18, 0x01	; 1
    13b0:	a6 01       	movw	r20, r12
    13b2:	b5 01       	movw	r22, r10
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	0e 94 de 07 	call	0xfbc	; 0xfbc <ili9341_fillCircleHelper>
  ili9341_fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
    13ba:	22 e0       	ldi	r18, 0x02	; 2
    13bc:	a6 01       	movw	r20, r12
    13be:	b5 01       	movw	r22, r10
    13c0:	c3 01       	movw	r24, r6
    13c2:	0e 94 de 07 	call	0xfbc	; 0xfbc <ili9341_fillCircleHelper>
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	7f 90       	pop	r7
    13e0:	6f 90       	pop	r6
    13e2:	5f 90       	pop	r5
    13e4:	4f 90       	pop	r4
    13e6:	3f 90       	pop	r3
    13e8:	2f 90       	pop	r2
    13ea:	08 95       	ret

000013ec <ili9341_drawBitmap>:

// Draw a 1-bit image (bitmap) at the specified (x,y) position from the
// provided bitmap buffer (must be PROGMEM memory) using the specified
// foreground color (unset bits are transparent).
void ili9341_drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    13ec:	2f 92       	push	r2
    13ee:	3f 92       	push	r3
    13f0:	4f 92       	push	r4
    13f2:	5f 92       	push	r5
    13f4:	6f 92       	push	r6
    13f6:	7f 92       	push	r7
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	28 97       	sbiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	2c 01       	movw	r4, r24
    1420:	3b 01       	movw	r6, r22
    1422:	5c 83       	std	Y+4, r21	; 0x04
    1424:	4b 83       	std	Y+3, r20	; 0x03
    1426:	59 01       	movw	r10, r18
    1428:	18 01       	movw	r2, r16

  int16_t i, j, byteWidth = (w + 7) / 8;
    142a:	c9 01       	movw	r24, r18
    142c:	07 96       	adiw	r24, 0x07	; 7
    142e:	97 fd       	sbrc	r25, 7
    1430:	07 96       	adiw	r24, 0x07	; 7
    1432:	9c 01       	movw	r18, r24
    1434:	93 e0       	ldi	r25, 0x03	; 3
    1436:	35 95       	asr	r19
    1438:	27 95       	ror	r18
    143a:	9a 95       	dec	r25
    143c:	e1 f7       	brne	.-8      	; 0x1436 <ili9341_drawBitmap+0x4a>
    143e:	3a 83       	std	Y+2, r19	; 0x02
    1440:	29 83       	std	Y+1, r18	; 0x01
  uint8_t byte=0;

  for(j=0; j<h; j++) {
    1442:	d1 2c       	mov	r13, r1
    1444:	c1 2c       	mov	r12, r1
  uint8_t byte=0;
    1446:	91 2c       	mov	r9, r1
  for(j=0; j<h; j++) {
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	00 e0       	ldi	r16, 0x00	; 0
    144c:	02 15       	cp	r16, r2
    144e:	13 05       	cpc	r17, r3
    1450:	0c f4       	brge	.+2      	; 0x1454 <ili9341_drawBitmap+0x68>
    1452:	4a c0       	rjmp	.+148    	; 0x14e8 <ili9341_drawBitmap+0xfc>
      if(i & 7) byte <<= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    1454:	28 96       	adiw	r28, 0x08	; 8
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	7f 90       	pop	r7
    1478:	6f 90       	pop	r6
    147a:	5f 90       	pop	r5
    147c:	4f 90       	pop	r4
    147e:	3f 90       	pop	r3
    1480:	2f 90       	pop	r2
    1482:	08 95       	ret
      if(i & 7) byte <<= 1;
    1484:	8f 81       	ldd	r24, Y+7	; 0x07
    1486:	98 85       	ldd	r25, Y+8	; 0x08
    1488:	87 70       	andi	r24, 0x07	; 7
    148a:	99 27       	eor	r25, r25
    148c:	99 0c       	add	r9, r9
    148e:	89 2b       	or	r24, r25
    1490:	71 f4       	brne	.+28     	; 0x14ae <ili9341_drawBitmap+0xc2>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    1492:	ef 81       	ldd	r30, Y+7	; 0x07
    1494:	f8 85       	ldd	r31, Y+8	; 0x08
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	f5 95       	asr	r31
    149a:	e7 95       	ror	r30
    149c:	8a 95       	dec	r24
    149e:	e1 f7       	brne	.-8      	; 0x1498 <ili9341_drawBitmap+0xac>
    14a0:	ec 0d       	add	r30, r12
    14a2:	fd 1d       	adc	r31, r13
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	e8 0f       	add	r30, r24
    14aa:	f9 1f       	adc	r31, r25
    14ac:	94 90       	lpm	r9, Z
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    14ae:	97 fe       	sbrs	r9, 7
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <ili9341_drawBitmap+0xd8>
    14b2:	a7 01       	movw	r20, r14
    14b4:	6d 81       	ldd	r22, Y+5	; 0x05
    14b6:	7e 81       	ldd	r23, Y+6	; 0x06
    14b8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ba:	98 85       	ldd	r25, Y+8	; 0x08
    14bc:	84 0d       	add	r24, r4
    14be:	95 1d       	adc	r25, r5
    14c0:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    for(i=0; i<w; i++) {
    14c4:	2f 81       	ldd	r18, Y+7	; 0x07
    14c6:	38 85       	ldd	r19, Y+8	; 0x08
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	38 87       	std	Y+8, r19	; 0x08
    14ce:	2f 83       	std	Y+7, r18	; 0x07
    14d0:	2f 81       	ldd	r18, Y+7	; 0x07
    14d2:	38 85       	ldd	r19, Y+8	; 0x08
    14d4:	2a 15       	cp	r18, r10
    14d6:	3b 05       	cpc	r19, r11
    14d8:	ac f2       	brlt	.-86     	; 0x1484 <ili9341_drawBitmap+0x98>
  for(j=0; j<h; j++) {
    14da:	0f 5f       	subi	r16, 0xFF	; 255
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	c8 0e       	add	r12, r24
    14e4:	d9 1e       	adc	r13, r25
    14e6:	b2 cf       	rjmp	.-156    	; 0x144c <ili9341_drawBitmap+0x60>
    for(i=0; i<w; i++) {
    14e8:	18 86       	std	Y+8, r1	; 0x08
    14ea:	1f 82       	std	Y+7, r1	; 0x07
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    14ec:	c3 01       	movw	r24, r6
    14ee:	80 0f       	add	r24, r16
    14f0:	91 1f       	adc	r25, r17
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	ec cf       	rjmp	.-40     	; 0x14d0 <ili9341_drawBitmap+0xe4>

000014f8 <ili9341_drawXBitmap>:

//Draw XBitMap Files (*.xbm), exported from GIMP,
//Usage: Export from GIMP to *.xbm, rename *.xbm to *.c and open in editor.
//C Array can be directly used with this function
void ili9341_drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    14f8:	2f 92       	push	r2
    14fa:	3f 92       	push	r3
    14fc:	4f 92       	push	r4
    14fe:	5f 92       	push	r5
    1500:	7f 92       	push	r7
    1502:	8f 92       	push	r8
    1504:	9f 92       	push	r9
    1506:	af 92       	push	r10
    1508:	bf 92       	push	r11
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	00 d0       	rcall	.+0      	; 0x151c <ili9341_drawXBitmap+0x24>
    151c:	00 d0       	rcall	.+0      	; 0x151e <ili9341_drawXBitmap+0x26>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <ili9341_drawXBitmap+0x28>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	2c 01       	movw	r4, r24
    1526:	5c 83       	std	Y+4, r21	; 0x04
    1528:	4b 83       	std	Y+3, r20	; 0x03
    152a:	49 01       	movw	r8, r18
    152c:	18 01       	movw	r2, r16

  int16_t i, j, byteWidth = (w + 7) / 8;
  uint8_t byte=0;

  for(j=0; j<h; j++) {
    152e:	8b 01       	movw	r16, r22
  int16_t i, j, byteWidth = (w + 7) / 8;
    1530:	c9 01       	movw	r24, r18
    1532:	07 96       	adiw	r24, 0x07	; 7
    1534:	97 fd       	sbrc	r25, 7
    1536:	07 96       	adiw	r24, 0x07	; 7
    1538:	9c 01       	movw	r18, r24
    153a:	93 e0       	ldi	r25, 0x03	; 3
    153c:	35 95       	asr	r19
    153e:	27 95       	ror	r18
    1540:	9a 95       	dec	r25
    1542:	e1 f7       	brne	.-8      	; 0x153c <ili9341_drawXBitmap+0x44>
    1544:	3a 83       	std	Y+2, r19	; 0x02
    1546:	29 83       	std	Y+1, r18	; 0x01
  for(j=0; j<h; j++) {
    1548:	b1 2c       	mov	r11, r1
    154a:	a1 2c       	mov	r10, r1
  uint8_t byte=0;
    154c:	71 2c       	mov	r7, r1
  for(j=0; j<h; j++) {
    154e:	d1 2c       	mov	r13, r1
    1550:	c1 2c       	mov	r12, r1
    1552:	c2 14       	cp	r12, r2
    1554:	d3 04       	cpc	r13, r3
    1556:	0c f4       	brge	.+2      	; 0x155a <ili9341_drawXBitmap+0x62>
    1558:	4c c0       	rjmp	.+152    	; 0x15f2 <ili9341_drawXBitmap+0xfa>
      if(i & 7) byte >>= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    155a:	26 96       	adiw	r28, 0x06	; 6
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	8f 90       	pop	r8
    157e:	7f 90       	pop	r7
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret
      if(i & 7) byte >>= 1;
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	87 70       	andi	r24, 0x07	; 7
    1590:	99 27       	eor	r25, r25
    1592:	76 94       	lsr	r7
    1594:	89 2b       	or	r24, r25
    1596:	71 f4       	brne	.+28     	; 0x15b4 <ili9341_drawXBitmap+0xbc>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    1598:	ed 81       	ldd	r30, Y+5	; 0x05
    159a:	fe 81       	ldd	r31, Y+6	; 0x06
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	f5 95       	asr	r31
    15a0:	e7 95       	ror	r30
    15a2:	8a 95       	dec	r24
    15a4:	e1 f7       	brne	.-8      	; 0x159e <ili9341_drawXBitmap+0xa6>
    15a6:	ea 0d       	add	r30, r10
    15a8:	fb 1d       	adc	r31, r11
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	e8 0f       	add	r30, r24
    15b0:	f9 1f       	adc	r31, r25
    15b2:	74 90       	lpm	r7, Z
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    15b4:	70 fe       	sbrs	r7, 0
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <ili9341_drawXBitmap+0xd0>
    15b8:	a7 01       	movw	r20, r14
    15ba:	b8 01       	movw	r22, r16
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	84 0d       	add	r24, r4
    15c2:	95 1d       	adc	r25, r5
    15c4:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
    for(i=0; i<w; i++ ) {
    15c8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ca:	3e 81       	ldd	r19, Y+6	; 0x06
    15cc:	2f 5f       	subi	r18, 0xFF	; 255
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	3e 83       	std	Y+6, r19	; 0x06
    15d2:	2d 83       	std	Y+5, r18	; 0x05
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	88 15       	cp	r24, r8
    15da:	99 05       	cpc	r25, r9
    15dc:	b4 f2       	brlt	.-84     	; 0x158a <ili9341_drawXBitmap+0x92>
  for(j=0; j<h; j++) {
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	c9 1a       	sub	r12, r25
    15e2:	d9 0a       	sbc	r13, r25
    15e4:	0f 5f       	subi	r16, 0xFF	; 255
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	29 81       	ldd	r18, Y+1	; 0x01
    15ea:	3a 81       	ldd	r19, Y+2	; 0x02
    15ec:	a2 0e       	add	r10, r18
    15ee:	b3 1e       	adc	r11, r19
    15f0:	b0 cf       	rjmp	.-160    	; 0x1552 <ili9341_drawXBitmap+0x5a>
    for(i=0; i<w; i++ ) {
    15f2:	1e 82       	std	Y+6, r1	; 0x06
    15f4:	1d 82       	std	Y+5, r1	; 0x05
    15f6:	ee cf       	rjmp	.-36     	; 0x15d4 <ili9341_drawXBitmap+0xdc>

000015f8 <backuplocationvset>:



void backuplocationvset(void)//backing up vset data start location to print next vset data in exact location
{
vsetx=cursor_x;
    15f8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <cursor_x>
    15fc:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <cursor_x+0x1>
    1600:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <vsetx+0x1>
    1604:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <vsetx>
vsety=cursor_y;
    1608:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    160c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1610:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <vsety+0x1>
    1614:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <vsety>
}
    1618:	08 95       	ret

0000161a <backuplocationvactual>:


void backuplocationvactual(void)//backing up vactual data start location to print next vactual data in exact location
{
vactualx=cursor_x;
    161a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <cursor_x>
    161e:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <cursor_x+0x1>
    1622:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <vactualx+0x1>
    1626:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <vactualx>
vactualy=cursor_y;
    162a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    162e:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1632:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <vactualy+0x1>
    1636:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <vactualy>
}
    163a:	08 95       	ret

0000163c <backuplocationiset>:

void backuplocationiset(void)//backing up iset data start location to print next iset data in exact location
{
isetx=cursor_x;
    163c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <cursor_x>
    1640:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <cursor_x+0x1>
    1644:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <isetx+0x1>
    1648:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <isetx>
isety=cursor_y;
    164c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1650:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1654:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <isety+0x1>
    1658:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <isety>
}
    165c:	08 95       	ret

0000165e <backuplocationiactual>:


void backuplocationiactual(void)//backing up iactual data start location to print next iactual data in exact location
{
iactualx=cursor_x;
    165e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <cursor_x>
    1662:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <cursor_x+0x1>
    1666:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <iactualx+0x1>
    166a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <iactualx>
iactualy=cursor_y;
    166e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1672:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1676:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <iactualy+0x1>
    167a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <iactualy>
}
    167e:	08 95       	ret

00001680 <ili9341_drawchar>:
};

extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{
    1680:	2f 92       	push	r2
    1682:	3f 92       	push	r3
    1684:	4f 92       	push	r4
    1686:	5f 92       	push	r5
    1688:	6f 92       	push	r6
    168a:	7f 92       	push	r7
    168c:	8f 92       	push	r8
    168e:	9f 92       	push	r9
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <ili9341_drawchar+0x26>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <ili9341_drawchar+0x28>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <ili9341_drawchar+0x2a>
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	5b 01       	movw	r10, r22
    16b2:	3d 83       	std	Y+5, r19	; 0x05
    16b4:	2c 83       	std	Y+4, r18	; 0x04
    16b6:	38 01       	movw	r6, r16

if((x >=LCD_W)            || // Clip right
    16b8:	9f 83       	std	Y+7, r25	; 0x07
    16ba:	8e 83       	std	Y+6, r24	; 0x06
    16bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LCD_W>
    16c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <LCD_W+0x1>
    16c4:	2e 81       	ldd	r18, Y+6	; 0x06
    16c6:	3f 81       	ldd	r19, Y+7	; 0x07
    16c8:	28 17       	cp	r18, r24
    16ca:	39 07       	cpc	r19, r25
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <ili9341_drawchar+0x50>
    16ce:	63 c0       	rjmp	.+198    	; 0x1796 <ili9341_drawchar+0x116>
    16d0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LCD_H>
    16d4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <LCD_H+0x1>
    16d8:	68 17       	cp	r22, r24
    16da:	79 07       	cpc	r23, r25
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <ili9341_drawchar+0x60>
    16de:	5b c0       	rjmp	.+182    	; 0x1796 <ili9341_drawchar+0x116>
(y >=LCD_H)           || // Clip bottom
((x + 6 * size - 1) < 0) || // Clip left
    16e0:	c9 01       	movw	r24, r18
    16e2:	36 e0       	ldi	r19, 0x06	; 6
    16e4:	e3 9e       	mul	r14, r19
    16e6:	80 0d       	add	r24, r0
    16e8:	91 1d       	adc	r25, r1
    16ea:	11 24       	eor	r1, r1
(y >=LCD_H)           || // Clip bottom
    16ec:	18 16       	cp	r1, r24
    16ee:	19 06       	cpc	r1, r25
    16f0:	0c f0       	brlt	.+2      	; 0x16f4 <ili9341_drawchar+0x74>
    16f2:	51 c0       	rjmp	.+162    	; 0x1796 <ili9341_drawchar+0x116>
((y + 8 * size - 1) < 0))   // Clip top
    16f4:	ce 2c       	mov	r12, r14
    16f6:	d1 2c       	mov	r13, r1
    16f8:	c6 01       	movw	r24, r12
    16fa:	23 e0       	ldi	r18, 0x03	; 3
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	2a 95       	dec	r18
    1702:	e1 f7       	brne	.-8      	; 0x16fc <ili9341_drawchar+0x7c>
    1704:	86 0f       	add	r24, r22
    1706:	97 1f       	adc	r25, r23
((x + 6 * size - 1) < 0) || // Clip left
    1708:	18 16       	cp	r1, r24
    170a:	19 06       	cpc	r1, r25
    170c:	0c f0       	brlt	.+2      	; 0x1710 <ili9341_drawchar+0x90>
    170e:	43 c0       	rjmp	.+134    	; 0x1796 <ili9341_drawchar+0x116>
for (int8_t i=0; i<6; i++ ) {
uint8_t line;
if (i == 5) 
line = 0x0;
else 
line = pgm_read_byte(font+(c*5)+i);
    1710:	85 e0       	ldi	r24, 0x05	; 5
    1712:	48 9f       	mul	r20, r24
    1714:	a0 01       	movw	r20, r0
    1716:	11 24       	eor	r1, r1
    1718:	fa 01       	movw	r30, r20
    171a:	e8 59       	subi	r30, 0x98	; 152
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	fb 83       	std	Y+3, r31	; 0x03
    1720:	ea 83       	std	Y+2, r30	; 0x02
    1722:	2e 80       	ldd	r2, Y+6	; 0x06
    1724:	3f 80       	ldd	r3, Y+7	; 0x07
for (int8_t i=0; i<6; i++ ) {
    1726:	19 82       	std	Y+1, r1	; 0x01
if (i == 5) 
    1728:	f9 81       	ldd	r31, Y+1	; 0x01
line = 0x0;
    172a:	f1 2c       	mov	r15, r1
if (i == 5) 
    172c:	f5 30       	cpi	r31, 0x05	; 5
    172e:	19 f0       	breq	.+6      	; 0x1736 <ili9341_drawchar+0xb6>
line = pgm_read_byte(font+(c*5)+i);
    1730:	ea 81       	ldd	r30, Y+2	; 0x02
    1732:	fb 81       	ldd	r31, Y+3	; 0x03
    1734:	f4 90       	lpm	r15, Z
line = 0x0;
    1736:	25 01       	movw	r4, r10
    1738:	91 2c       	mov	r9, r1
    173a:	81 2c       	mov	r8, r1
for (int8_t j = 0; j<8; j++) {
if (line & 0x1) {
    173c:	f0 fe       	sbrs	r15, 0
    173e:	44 c0       	rjmp	.+136    	; 0x17c8 <ili9341_drawchar+0x148>
if (size == 1) // default size
    1740:	f1 e0       	ldi	r31, 0x01	; 1
ili9341_drawpixel(x+i, y+j, color);
    1742:	4c 81       	ldd	r20, Y+4	; 0x04
    1744:	5d 81       	ldd	r21, Y+5	; 0x05
else {  // big size
ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
    1746:	0c 81       	ldd	r16, Y+4	; 0x04
    1748:	1d 81       	ldd	r17, Y+5	; 0x05
if (size == 1) // default size
    174a:	ef 12       	cpse	r14, r31
    174c:	48 c0       	rjmp	.+144    	; 0x17de <ili9341_drawchar+0x15e>
} 
} else if (bg != color) {
if (size == 1) // default size
ili9341_drawpixel(x+i, y+j, bg);
    174e:	b5 01       	movw	r22, r10
    1750:	68 0d       	add	r22, r8
    1752:	79 1d       	adc	r23, r9
    1754:	c1 01       	movw	r24, r2
    1756:	0e 94 a3 04 	call	0x946	; 0x946 <ili9341_drawpixel>
else 
{  // big size
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
}
}
line >>= 1;
    175a:	f6 94       	lsr	r15
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	88 1a       	sub	r8, r24
    1760:	98 0a       	sbc	r9, r24
    1762:	4c 0c       	add	r4, r12
    1764:	5d 1c       	adc	r5, r13
for (int8_t j = 0; j<8; j++) {
    1766:	98 e0       	ldi	r25, 0x08	; 8
    1768:	89 16       	cp	r8, r25
    176a:	91 04       	cpc	r9, r1
    176c:	39 f7       	brne	.-50     	; 0x173c <ili9341_drawchar+0xbc>
    176e:	ee 81       	ldd	r30, Y+6	; 0x06
    1770:	ff 81       	ldd	r31, Y+7	; 0x07
    1772:	ec 0d       	add	r30, r12
    1774:	fd 1d       	adc	r31, r13
    1776:	ff 83       	std	Y+7, r31	; 0x07
    1778:	ee 83       	std	Y+6, r30	; 0x06
    177a:	ff ef       	ldi	r31, 0xFF	; 255
    177c:	2f 1a       	sub	r2, r31
    177e:	3f 0a       	sbc	r3, r31
    1780:	2a 81       	ldd	r18, Y+2	; 0x02
    1782:	3b 81       	ldd	r19, Y+3	; 0x03
    1784:	2f 5f       	subi	r18, 0xFF	; 255
    1786:	3f 4f       	sbci	r19, 0xFF	; 255
    1788:	3b 83       	std	Y+3, r19	; 0x03
    178a:	2a 83       	std	Y+2, r18	; 0x02
    178c:	39 81       	ldd	r19, Y+1	; 0x01
    178e:	3f 5f       	subi	r19, 0xFF	; 255
    1790:	39 83       	std	Y+1, r19	; 0x01
for (int8_t i=0; i<6; i++ ) {
    1792:	36 30       	cpi	r19, 0x06	; 6
    1794:	49 f6       	brne	.-110    	; 0x1728 <ili9341_drawchar+0xa8>
}
}
}
    1796:	27 96       	adiw	r28, 0x07	; 7
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	9f 90       	pop	r9
    17b8:	8f 90       	pop	r8
    17ba:	7f 90       	pop	r7
    17bc:	6f 90       	pop	r6
    17be:	5f 90       	pop	r5
    17c0:	4f 90       	pop	r4
    17c2:	3f 90       	pop	r3
    17c4:	2f 90       	pop	r2
    17c6:	08 95       	ret
} else if (bg != color) {
    17c8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ca:	3d 81       	ldd	r19, Y+5	; 0x05
    17cc:	26 15       	cp	r18, r6
    17ce:	37 05       	cpc	r19, r7
    17d0:	21 f2       	breq	.-120    	; 0x175a <ili9341_drawchar+0xda>
if (size == 1) // default size
    17d2:	31 e0       	ldi	r19, 0x01	; 1
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    17d4:	83 01       	movw	r16, r6
if (size == 1) // default size
    17d6:	e3 12       	cpse	r14, r19
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <ili9341_drawchar+0x15e>
ili9341_drawpixel(x+i, y+j, bg);
    17da:	a3 01       	movw	r20, r6
    17dc:	b8 cf       	rjmp	.-144    	; 0x174e <ili9341_drawchar+0xce>
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    17de:	96 01       	movw	r18, r12
    17e0:	a6 01       	movw	r20, r12
    17e2:	b2 01       	movw	r22, r4
    17e4:	8e 81       	ldd	r24, Y+6	; 0x06
    17e6:	9f 81       	ldd	r25, Y+7	; 0x07
    17e8:	0e 94 36 05 	call	0xa6c	; 0xa6c <ili9341_fillrect>
    17ec:	b6 cf       	rjmp	.-148    	; 0x175a <ili9341_drawchar+0xda>

000017ee <ili9341_write.part.0>:
{
if(s>8) return;
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
}

void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and colour
    17ee:	ef 92       	push	r14
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	48 2f       	mov	r20, r24
} else if (c == '\r') {
 // skip em
}
else
{
ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
    17f6:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <textsize>
    17fa:	00 91 b2 01 	lds	r16, 0x01B2	; 0x8001b2 <textbgcolour>
    17fe:	10 91 b3 01 	lds	r17, 0x01B3	; 0x8001b3 <textbgcolour+0x1>
    1802:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <textcolour>
    1806:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <textcolour+0x1>
    180a:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <cursor_y>
    180e:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1812:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <cursor_x>
    1816:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <cursor_x+0x1>
    181a:	0e 94 40 0b 	call	0x1680	; 0x1680 <ili9341_drawchar>
cursor_x += textsize*6;
    181e:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <textsize>
    1822:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <cursor_x>
    1826:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <cursor_x+0x1>
    182a:	36 e0       	ldi	r19, 0x06	; 6
    182c:	23 9f       	mul	r18, r19
    182e:	80 0d       	add	r24, r0
    1830:	91 1d       	adc	r25, r1
    1832:	11 24       	eor	r1, r1
    1834:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <cursor_x+0x1>
    1838:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <cursor_x>
}
}
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ef 90       	pop	r14
    1842:	08 95       	ret

00001844 <ili9341_setcursor>:
cursor_x=x;
    1844:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <cursor_x+0x1>
    1848:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <cursor_x>
cursor_y=y;
    184c:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <cursor_y+0x1>
    1850:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <cursor_y>
}
    1854:	08 95       	ret

00001856 <ili9341_settextcolour>:
textcolour=x;
    1856:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <textcolour+0x1>
    185a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <textcolour>
textbgcolour=y;
    185e:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <textbgcolour+0x1>
    1862:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <textbgcolour>
}
    1866:	08 95       	ret

00001868 <ili9341_settextsize>:
if(s>8) return;
    1868:	89 30       	cpi	r24, 0x09	; 9
    186a:	28 f4       	brcc	.+10     	; 0x1876 <ili9341_settextsize+0xe>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    186c:	81 11       	cpse	r24, r1
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <ili9341_settextsize+0xa>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <textsize>
}
    1876:	08 95       	ret

00001878 <ili9341_write>:
if (c == '\n') {
    1878:	8a 30       	cpi	r24, 0x0A	; 10
    187a:	a9 f4       	brne	.+42     	; 0x18a6 <ili9341_write+0x2e>
cursor_y += textsize*8;
    187c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <textsize>
    1880:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <cursor_y>
    1884:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1888:	48 e0       	ldi	r20, 0x08	; 8
    188a:	84 9f       	mul	r24, r20
    188c:	c0 01       	movw	r24, r0
    188e:	11 24       	eor	r1, r1
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1898:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
cursor_x  = 0;
    189c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <cursor_x+0x1>
    18a0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <cursor_x>
    18a4:	08 95       	ret
} else if (c == '\r') {
    18a6:	8d 30       	cpi	r24, 0x0D	; 13
    18a8:	11 f0       	breq	.+4      	; 0x18ae <ili9341_write+0x36>
    18aa:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <ili9341_write.part.0>
}
    18ae:	08 95       	ret

000018b0 <ili9341_putchar_printf>:
	ili9341_write(var);
    18b0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <ili9341_write>
}
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	08 95       	ret

000018ba <display_init>:


void display_init(void)//display initial data regarding my power supply
{
    18ba:	8f 92       	push	r8
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
stdout = & mydata;//it is used for printf function and must be declared locally
    18d0:	86 e1       	ldi	r24, 0x16	; 22
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__iob+0x3>
    18d8:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <__iob+0x2>
cursor_x=x;
    18dc:	04 e0       	ldi	r16, 0x04	; 4
    18de:	10 e0       	ldi	r17, 0x00	; 0
    18e0:	10 93 c7 01 	sts	0x01C7, r17	; 0x8001c7 <cursor_x+0x1>
    18e4:	00 93 c6 01 	sts	0x01C6, r16	; 0x8001c6 <cursor_x>
cursor_y=y;
    18e8:	10 93 b5 01 	sts	0x01B5, r17	; 0x8001b5 <cursor_y+0x1>
    18ec:	00 93 b4 01 	sts	0x01B4, r16	; 0x8001b4 <cursor_y>
    18f0:	8f e9       	ldi	r24, 0x9F	; 159
    18f2:	9f e0       	ldi	r25, 0x0F	; 15
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <display_init+0x3a>
    18f8:	00 c0       	rjmp	.+0      	; 0x18fa <display_init+0x40>
    18fa:	00 00       	nop
textcolour=x;
    18fc:	80 ee       	ldi	r24, 0xE0	; 224
    18fe:	97 e0       	ldi	r25, 0x07	; 7
    1900:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <textcolour+0x1>
    1904:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <textcolour>
textbgcolour=y;
    1908:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <textbgcolour+0x1>
    190c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <textbgcolour>
    1910:	8f e9       	ldi	r24, 0x9F	; 159
    1912:	9f e0       	ldi	r25, 0x0F	; 15
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <display_init+0x5a>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <display_init+0x60>
    191a:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    191c:	c2 e0       	ldi	r28, 0x02	; 2
    191e:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <textsize>
    1922:	8f e9       	ldi	r24, 0x9F	; 159
    1924:	9f e0       	ldi	r25, 0x0F	; 15
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <display_init+0x6c>
    192a:	00 c0       	rjmp	.+0      	; 0x192c <display_init+0x72>
    192c:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(GREEN,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("mode - ");
    192e:	8a e2       	ldi	r24, 0x2A	; 42
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	9f 93       	push	r25
    1934:	8f 93       	push	r24
    1936:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    193a:	8f e9       	ldi	r24, 0x9F	; 159
    193c:	9f e0       	ldi	r25, 0x0F	; 15
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <display_init+0x84>
    1942:	00 c0       	rjmp	.+0      	; 0x1944 <display_init+0x8a>
    1944:	00 00       	nop
textcolour=x;
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	98 ef       	ldi	r25, 0xF8	; 248
    194a:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <textcolour+0x1>
    194e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <textcolour>
textbgcolour=y;
    1952:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <textbgcolour+0x1>
    1956:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <textbgcolour>
    195a:	8f e9       	ldi	r24, 0x9F	; 159
    195c:	9f e0       	ldi	r25, 0x0F	; 15
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <display_init+0xa4>
    1962:	00 c0       	rjmp	.+0      	; 0x1964 <display_init+0xaa>
    1964:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1966:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <textsize>
    196a:	8f e9       	ldi	r24, 0x9F	; 159
    196c:	9f e0       	ldi	r25, 0x0F	; 15
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <display_init+0xb4>
    1972:	00 c0       	rjmp	.+0      	; 0x1974 <display_init+0xba>
    1974:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(RED,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("constant voltage");
    1976:	82 e3       	ldi	r24, 0x32	; 50
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	9f 93       	push	r25
    197c:	8f 93       	push	r24
    197e:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    1982:	8f e9       	ldi	r24, 0x9F	; 159
    1984:	9f e0       	ldi	r25, 0x0F	; 15
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <display_init+0xcc>
    198a:	00 c0       	rjmp	.+0      	; 0x198c <display_init+0xd2>
    198c:	00 00       	nop
cursor_x=x;
    198e:	10 93 c7 01 	sts	0x01C7, r17	; 0x8001c7 <cursor_x+0x1>
    1992:	00 93 c6 01 	sts	0x01C6, r16	; 0x8001c6 <cursor_x>
cursor_y=y;
    1996:	88 e2       	ldi	r24, 0x28	; 40
    1998:	a8 2e       	mov	r10, r24
    199a:	b1 2c       	mov	r11, r1
    199c:	b0 92 b5 01 	sts	0x01B5, r11	; 0x8001b5 <cursor_y+0x1>
    19a0:	a0 92 b4 01 	sts	0x01B4, r10	; 0x8001b4 <cursor_y>
    19a4:	8f e9       	ldi	r24, 0x9F	; 159
    19a6:	9f e0       	ldi	r25, 0x0F	; 15
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <display_init+0xee>
    19ac:	00 c0       	rjmp	.+0      	; 0x19ae <display_init+0xf4>
    19ae:	00 00       	nop
textcolour=x;
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	97 e0       	ldi	r25, 0x07	; 7
    19b4:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <textcolour+0x1>
    19b8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <textcolour>
textbgcolour=y;
    19bc:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <textbgcolour+0x1>
    19c0:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <textbgcolour>
    19c4:	8f e9       	ldi	r24, 0x9F	; 159
    19c6:	9f e0       	ldi	r25, 0x0F	; 15
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <display_init+0x10e>
    19cc:	00 c0       	rjmp	.+0      	; 0x19ce <display_init+0x114>
    19ce:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    19d0:	d4 e0       	ldi	r29, 0x04	; 4
    19d2:	d0 93 c8 01 	sts	0x01C8, r29	; 0x8001c8 <textsize>
    19d6:	8f e9       	ldi	r24, 0x9F	; 159
    19d8:	9f e0       	ldi	r25, 0x0F	; 15
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <display_init+0x120>
    19de:	00 c0       	rjmp	.+0      	; 0x19e0 <display_init+0x126>
    19e0:	00 00       	nop
} else if (c == '\r') {
    19e2:	86 e5       	ldi	r24, 0x56	; 86
    19e4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ili9341_write.part.0>
    19e8:	8f e9       	ldi	r24, 0x9F	; 159
    19ea:	9f e0       	ldi	r25, 0x0F	; 15
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <display_init+0x132>
    19f0:	00 c0       	rjmp	.+0      	; 0x19f2 <display_init+0x138>
    19f2:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
_delay_ms(2);
cursor_y=cursor_y+6;
    19f4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    19f8:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    19fc:	06 96       	adiw	r24, 0x06	; 6
    19fe:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1a02:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1a06:	c3 e0       	ldi	r28, 0x03	; 3
    1a08:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <textsize>
    1a0c:	8f e9       	ldi	r24, 0x9F	; 159
    1a0e:	9f e0       	ldi	r25, 0x0F	; 15
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <display_init+0x156>
    1a14:	00 c0       	rjmp	.+0      	; 0x1a16 <display_init+0x15c>
    1a16:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set\n");
    1a18:	83 e4       	ldi	r24, 0x43	; 67
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	0e 94 31 14 	call	0x2862	; 0x2862 <puts>
    1a20:	8f e9       	ldi	r24, 0x9F	; 159
    1a22:	9f e0       	ldi	r25, 0x0F	; 15
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <display_init+0x16a>
    1a28:	00 c0       	rjmp	.+0      	; 0x1a2a <display_init+0x170>
    1a2a:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+12;
    1a2c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1a30:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1a34:	0c 96       	adiw	r24, 0x0c	; 12
    1a36:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1a3a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
backuplocationvset();
    1a3e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <backuplocationvset>
printf("00.00v");
    1a42:	87 e4       	ldi	r24, 0x47	; 71
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	9f 93       	push	r25
    1a48:	8f 93       	push	r24
    1a4a:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    1a4e:	8f e9       	ldi	r24, 0x9F	; 159
    1a50:	9f e0       	ldi	r25, 0x0F	; 15
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <display_init+0x198>
    1a56:	00 c0       	rjmp	.+0      	; 0x1a58 <display_init+0x19e>
    1a58:	00 00       	nop
cursor_x=x;
    1a5a:	10 93 c7 01 	sts	0x01C7, r17	; 0x8001c7 <cursor_x+0x1>
    1a5e:	00 93 c6 01 	sts	0x01C6, r16	; 0x8001c6 <cursor_x>
cursor_y=y;
    1a62:	98 e7       	ldi	r25, 0x78	; 120
    1a64:	89 2e       	mov	r8, r25
    1a66:	91 2c       	mov	r9, r1
    1a68:	90 92 b5 01 	sts	0x01B5, r9	; 0x8001b5 <cursor_y+0x1>
    1a6c:	80 92 b4 01 	sts	0x01B4, r8	; 0x8001b4 <cursor_y>
    1a70:	8f e9       	ldi	r24, 0x9F	; 159
    1a72:	9f e0       	ldi	r25, 0x0F	; 15
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <display_init+0x1ba>
    1a78:	00 c0       	rjmp	.+0      	; 0x1a7a <display_init+0x1c0>
    1a7a:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1a7c:	d0 93 c8 01 	sts	0x01C8, r29	; 0x8001c8 <textsize>
    1a80:	8f e9       	ldi	r24, 0x9F	; 159
    1a82:	9f e0       	ldi	r25, 0x0F	; 15
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <display_init+0x1ca>
    1a88:	00 c0       	rjmp	.+0      	; 0x1a8a <display_init+0x1d0>
    1a8a:	00 00       	nop
} else if (c == '\r') {
    1a8c:	86 e5       	ldi	r24, 0x56	; 86
    1a8e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ili9341_write.part.0>
    1a92:	8f e9       	ldi	r24, 0x9F	; 159
    1a94:	9f e0       	ldi	r25, 0x0F	; 15
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <display_init+0x1dc>
    1a9a:	00 c0       	rjmp	.+0      	; 0x1a9c <display_init+0x1e2>
    1a9c:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
_delay_ms(2);
cursor_y=cursor_y+6;
    1a9e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1aa2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1aa6:	06 96       	adiw	r24, 0x06	; 6
    1aa8:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1aac:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1ab0:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <textsize>
    1ab4:	8f e9       	ldi	r24, 0x9F	; 159
    1ab6:	9f e0       	ldi	r25, 0x0F	; 15
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <display_init+0x1fe>
    1abc:	00 c0       	rjmp	.+0      	; 0x1abe <display_init+0x204>
    1abe:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual\n\n");
    1ac0:	8e e4       	ldi	r24, 0x4E	; 78
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	0e 94 31 14 	call	0x2862	; 0x2862 <puts>
    1ac8:	8f e9       	ldi	r24, 0x9F	; 159
    1aca:	9f e0       	ldi	r25, 0x0F	; 15
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <display_init+0x212>
    1ad0:	00 c0       	rjmp	.+0      	; 0x1ad2 <display_init+0x218>
    1ad2:	00 00       	nop
_delay_ms(2);
backuplocationvactual();
    1ad4:	0e 94 0d 0b 	call	0x161a	; 0x161a <backuplocationvactual>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1ad8:	25 e0       	ldi	r18, 0x05	; 5
    1ada:	d2 2e       	mov	r13, r18
    1adc:	d0 92 c8 01 	sts	0x01C8, r13	; 0x8001c8 <textsize>
ili9341_settextsize(5);
printf("00.00");
    1ae0:	06 e5       	ldi	r16, 0x56	; 86
    1ae2:	11 e0       	ldi	r17, 0x01	; 1
    1ae4:	1f 93       	push	r17
    1ae6:	0f 93       	push	r16
    1ae8:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    1aec:	8f e9       	ldi	r24, 0x9F	; 159
    1aee:	9f e0       	ldi	r25, 0x0F	; 15
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <display_init+0x236>
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <display_init+0x23c>
    1af6:	00 00       	nop
cursor_x=x;
    1af8:	34 ea       	ldi	r19, 0xA4	; 164
    1afa:	e3 2e       	mov	r14, r19
    1afc:	f1 2c       	mov	r15, r1
    1afe:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <cursor_x+0x1>
    1b02:	e0 92 c6 01 	sts	0x01C6, r14	; 0x8001c6 <cursor_x>
cursor_y=y;
    1b06:	b0 92 b5 01 	sts	0x01B5, r11	; 0x8001b5 <cursor_y+0x1>
    1b0a:	a0 92 b4 01 	sts	0x01B4, r10	; 0x8001b4 <cursor_y>
    1b0e:	8f e9       	ldi	r24, 0x9F	; 159
    1b10:	9f e0       	ldi	r25, 0x0F	; 15
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <display_init+0x258>
    1b16:	00 c0       	rjmp	.+0      	; 0x1b18 <display_init+0x25e>
    1b18:	00 00       	nop
textcolour=x;
    1b1a:	80 ee       	ldi	r24, 0xE0	; 224
    1b1c:	9f ef       	ldi	r25, 0xFF	; 255
    1b1e:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <textcolour+0x1>
    1b22:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <textcolour>
textbgcolour=y;
    1b26:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <textbgcolour+0x1>
    1b2a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <textbgcolour>
    1b2e:	8f e9       	ldi	r24, 0x9F	; 159
    1b30:	9f e0       	ldi	r25, 0x0F	; 15
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <display_init+0x278>
    1b36:	00 c0       	rjmp	.+0      	; 0x1b38 <display_init+0x27e>
    1b38:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1b3a:	d0 93 c8 01 	sts	0x01C8, r29	; 0x8001c8 <textsize>
    1b3e:	8f e9       	ldi	r24, 0x9F	; 159
    1b40:	9f e0       	ldi	r25, 0x0F	; 15
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <display_init+0x288>
    1b46:	00 c0       	rjmp	.+0      	; 0x1b48 <display_init+0x28e>
    1b48:	00 00       	nop
} else if (c == '\r') {
    1b4a:	89 e4       	ldi	r24, 0x49	; 73
    1b4c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ili9341_write.part.0>
    1b50:	8f e9       	ldi	r24, 0x9F	; 159
    1b52:	9f e0       	ldi	r25, 0x0F	; 15
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <display_init+0x29a>
    1b58:	00 c0       	rjmp	.+0      	; 0x1b5a <display_init+0x2a0>
    1b5a:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
_delay_ms(2);
cursor_y=cursor_y+6;
    1b5c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1b60:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1b64:	06 96       	adiw	r24, 0x06	; 6
    1b66:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1b6a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1b6e:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <textsize>
    1b72:	8f e9       	ldi	r24, 0x9F	; 159
    1b74:	9f e0       	ldi	r25, 0x0F	; 15
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <display_init+0x2bc>
    1b7a:	00 c0       	rjmp	.+0      	; 0x1b7c <display_init+0x2c2>
    1b7c:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set");
    1b7e:	83 e4       	ldi	r24, 0x43	; 67
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    1b8a:	8f e9       	ldi	r24, 0x9F	; 159
    1b8c:	9f e0       	ldi	r25, 0x0F	; 15
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <display_init+0x2d4>
    1b92:	00 c0       	rjmp	.+0      	; 0x1b94 <display_init+0x2da>
    1b94:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    1b96:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <cursor_x+0x1>
    1b9a:	e0 92 c6 01 	sts	0x01C6, r14	; 0x8001c6 <cursor_x>
cursor_y=(cursor_y+36);
    1b9e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1ba2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1ba6:	84 96       	adiw	r24, 0x24	; 36
    1ba8:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1bac:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
backuplocationiset();
    1bb0:	0e 94 1e 0b 	call	0x163c	; 0x163c <backuplocationiset>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1bb4:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <textsize>
ili9341_settextsize(3);
printf("00.00a");
    1bb8:	8c e5       	ldi	r24, 0x5C	; 92
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	9f 93       	push	r25
    1bbe:	8f 93       	push	r24
    1bc0:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    1bc4:	8f e9       	ldi	r24, 0x9F	; 159
    1bc6:	9f e0       	ldi	r25, 0x0F	; 15
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <display_init+0x30e>
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <display_init+0x314>
    1bce:	00 00       	nop
cursor_x=x;
    1bd0:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <cursor_x+0x1>
    1bd4:	e0 92 c6 01 	sts	0x01C6, r14	; 0x8001c6 <cursor_x>
cursor_y=y;
    1bd8:	90 92 b5 01 	sts	0x01B5, r9	; 0x8001b5 <cursor_y+0x1>
    1bdc:	80 92 b4 01 	sts	0x01B4, r8	; 0x8001b4 <cursor_y>
    1be0:	8f e9       	ldi	r24, 0x9F	; 159
    1be2:	9f e0       	ldi	r25, 0x0F	; 15
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <display_init+0x32a>
    1be8:	00 c0       	rjmp	.+0      	; 0x1bea <display_init+0x330>
    1bea:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1bec:	d0 93 c8 01 	sts	0x01C8, r29	; 0x8001c8 <textsize>
    1bf0:	8f e9       	ldi	r24, 0x9F	; 159
    1bf2:	9f e0       	ldi	r25, 0x0F	; 15
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <display_init+0x33a>
    1bf8:	00 c0       	rjmp	.+0      	; 0x1bfa <display_init+0x340>
    1bfa:	00 00       	nop
} else if (c == '\r') {
    1bfc:	89 e4       	ldi	r24, 0x49	; 73
    1bfe:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ili9341_write.part.0>
    1c02:	8f e9       	ldi	r24, 0x9F	; 159
    1c04:	9f e0       	ldi	r25, 0x0F	; 15
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <display_init+0x34c>
    1c0a:	00 c0       	rjmp	.+0      	; 0x1c0c <display_init+0x352>
    1c0c:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
_delay_ms(2);
cursor_y=cursor_y+6;
    1c0e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1c12:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1c16:	06 96       	adiw	r24, 0x06	; 6
    1c18:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1c1c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1c20:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <textsize>
    1c24:	8f e9       	ldi	r24, 0x9F	; 159
    1c26:	9f e0       	ldi	r25, 0x0F	; 15
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <display_init+0x36e>
    1c2c:	00 c0       	rjmp	.+0      	; 0x1c2e <display_init+0x374>
    1c2e:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual");
    1c30:	83 e6       	ldi	r24, 0x63	; 99
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    1c3c:	8f e9       	ldi	r24, 0x9F	; 159
    1c3e:	9f e0       	ldi	r25, 0x0F	; 15
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <display_init+0x386>
    1c44:	00 c0       	rjmp	.+0      	; 0x1c46 <display_init+0x38c>
    1c46:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    1c48:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <cursor_x+0x1>
    1c4c:	e0 92 c6 01 	sts	0x01C6, r14	; 0x8001c6 <cursor_x>
backuplocationiactual();
    1c50:	0e 94 2f 0b 	call	0x165e	; 0x165e <backuplocationiactual>
cursor_y=cursor_y+48;
    1c54:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <cursor_y>
    1c58:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <cursor_y+0x1>
    1c5c:	c0 96       	adiw	r24, 0x30	; 48
    1c5e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <cursor_y+0x1>
    1c62:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1c66:	d0 92 c8 01 	sts	0x01C8, r13	; 0x8001c8 <textsize>
ili9341_settextsize(5);
printf("00.00");
    1c6a:	1f 93       	push	r17
    1c6c:	0f 93       	push	r16
    1c6e:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    1c72:	9f ef       	ldi	r25, 0xFF	; 255
    1c74:	23 ed       	ldi	r18, 0xD3	; 211
    1c76:	80 e3       	ldi	r24, 0x30	; 48
    1c78:	91 50       	subi	r25, 0x01	; 1
    1c7a:	20 40       	sbci	r18, 0x00	; 0
    1c7c:	80 40       	sbci	r24, 0x00	; 0
    1c7e:	e1 f7       	brne	.-8      	; 0x1c78 <display_init+0x3be>
    1c80:	00 c0       	rjmp	.+0      	; 0x1c82 <display_init+0x3c8>
    1c82:	00 00       	nop
_delay_ms(2000);

}
    1c84:	8d b7       	in	r24, 0x3d	; 61
    1c86:	9e b7       	in	r25, 0x3e	; 62
    1c88:	40 96       	adiw	r24, 0x10	; 16
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	9e bf       	out	0x3e, r25	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	8d bf       	out	0x3d, r24	; 61
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	08 95       	ret

00001cac <uart_send_char>:
#include <stdlib.h>


void uart_send_char(char c)
{
	while((UCSR0A & (1<<UDRE0)) == 0){};
    1cac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1cb0:	95 ff       	sbrs	r25, 5
    1cb2:	fc cf       	rjmp	.-8      	; 0x1cac <uart_send_char>
    UDR0 = c;
    1cb4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    1cb8:	08 95       	ret

00001cba <uart_send_string>:
void uart_send_string(char *s)
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	ec 01       	movw	r28, r24
	while(*s != 0x00)
    1cc0:	89 91       	ld	r24, Y+
    1cc2:	81 11       	cpse	r24, r1
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <uart_send_string+0x12>
	{
		uart_send_char(*s);
		s++;
	}
}//end of send_string
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	08 95       	ret
		uart_send_char(*s);
    1ccc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <uart_send_char>
		s++;
    1cd0:	f7 cf       	rjmp	.-18     	; 0x1cc0 <uart_send_string+0x6>

00001cd2 <uart_send_u8data>:

void uart_send_u8data(uint8_t d)
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	2a 97       	sbiw	r28, 0x0a	; 10
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1ce6:	4a e0       	ldi	r20, 0x0A	; 10
    1ce8:	be 01       	movw	r22, r28
    1cea:	6f 5f       	subi	r22, 0xFF	; 255
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__itoa_ncheck>
	char buffer[10];
	
	itoa(d,buffer,10);
	uart_send_string(buffer);
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_string>
}
    1cfc:	2a 96       	adiw	r28, 0x0a	; 10
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	08 95       	ret

00001d0e <uart_send_u16data>:
void uart_send_u16data(uint16_t d)
{
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	2a 97       	sbiw	r28, 0x0a	; 10
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    1d22:	4a e0       	ldi	r20, 0x0A	; 10
    1d24:	be 01       	movw	r22, r28
    1d26:	6f 5f       	subi	r22, 0xFF	; 255
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	0e 94 01 14 	call	0x2802	; 0x2802 <__utoa_ncheck>
	char buffer[10];
	
	utoa(d,buffer,10);
	uart_send_string(buffer);
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_string>
}
    1d36:	2a 96       	adiw	r28, 0x0a	; 10
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	08 95       	ret

00001d48 <TWIInit>:
 */

void TWIInit(void)
{
 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  PRR =0x00;
    1d48:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 // TWSR |= (1<<TWPS0);                          /* no prescaler */
 
  
  //set sck to 400khz
	TWSR = 0x02;
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	//TWBR = 0x0C;
	 TWBR = ((16000000/400000)-16)/2;  /* (F_CPU / F_TWI) must be > 10 for stable operation */
    1d52:	8c e0       	ldi	r24, 0x0C	; 12
    1d54:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//enable TWI
	TWCR = (1<<TWEN);
    1d58:	84 e0       	ldi	r24, 0x04	; 4
    1d5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    1d5e:	08 95       	ret

00001d60 <TWIStart>:
 
void TWIStart(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    1d60:	84 ea       	ldi	r24, 0xA4	; 164
    1d62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    1d66:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d6a:	87 ff       	sbrs	r24, 7
    1d6c:	fc cf       	rjmp	.-8      	; 0x1d66 <TWIStart+0x6>
}
    1d6e:	08 95       	ret

00001d70 <TWIStop>:

void TWIStop(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
    1d70:	84 e9       	ldi	r24, 0x94	; 148
    1d72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
} 
    1d76:	08 95       	ret

00001d78 <TWIWrite>:

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
    1d78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1d7c:	84 e8       	ldi	r24, 0x84	; 132
    1d7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    1d82:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d86:	87 ff       	sbrs	r24, 7
    1d88:	fc cf       	rjmp	.-8      	; 0x1d82 <TWIWrite+0xa>
}
    1d8a:	08 95       	ret

00001d8c <TWIReadACK>:

uint8_t TWIReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN) | (1<<TWEA));
    1d8c:	84 ec       	ldi	r24, 0xC4	; 196
    1d8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    1d92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d96:	87 ff       	sbrs	r24, 7
    1d98:	fc cf       	rjmp	.-8      	; 0x1d92 <TWIReadACK+0x6>
	return TWDR;
    1d9a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    1d9e:	08 95       	ret

00001da0 <TWIReadNACK>:

uint8_t TWIReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    1da0:	84 e8       	ldi	r24, 0x84	; 132
    1da2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    1da6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1daa:	87 ff       	sbrs	r24, 7
    1dac:	fc cf       	rjmp	.-8      	; 0x1da6 <TWIReadNACK+0x6>
	return TWDR;
    1dae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    1db2:	08 95       	ret

00001db4 <TWIGetStatus>:
	 *  0x38   Arbitration in SLA+W lost
	 */
	 
	uint8_t status;
	//mask status
	status = TWSR & 0xF8;
    1db4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return status;
}
    1db8:	88 7f       	andi	r24, 0xF8	; 248
    1dba:	08 95       	ret

00001dbc <make_signed_16>:
{
	uint16_t tmpvar=0;// roh zahl unsigned aus 2er Komplement
	int16_t ret=0;//return variable signed
	tmpvar=(((uint16_t)high_byte)<<8 | low_byte); //schiftet 8
	
	if(tmpvar>=32768)//Vorzeichenbit gesetzt?
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	86 2f       	mov	r24, r22
    1dc0:	97 ff       	sbrs	r25, 7
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <make_signed_16+0x10>
	{
		tmpvar -=32768;//Wertigkeit von Vorzeichenbit abzählen
    1dc4:	90 58       	subi	r25, 0x80	; 128
		ret = 0 -((int16_t)tmpvar);
    1dc6:	91 95       	neg	r25
    1dc8:	81 95       	neg	r24
    1dca:	91 09       	sbc	r25, r1
	}else ret = (int16_t)tmpvar;
	return ret;
}
    1dcc:	08 95       	ret

00001dce <DPS310_read_8>:
uint8_t DPS310_read_8(uint8_t reg)
{
    1dce:	cf 93       	push	r28
    1dd0:	c8 2f       	mov	r28, r24
		uint8_t result=0;
		
		TWIStart();
    1dd2:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <TWIStart>
		if(TWIGetStatus() != 0x08)return 123;
    1dd6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1dda:	88 30       	cpi	r24, 0x08	; 8
    1ddc:	31 f5       	brne	.+76     	; 0x1e2a <DPS310_read_8+0x5c>
		TWIWrite(DPS310_W);
    1dde:	8e ee       	ldi	r24, 0xEE	; 238
    1de0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWIWrite>
		if(TWIGetStatus() != 0x18)return 2;
    1de4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1de8:	88 31       	cpi	r24, 0x18	; 24
    1dea:	09 f5       	brne	.+66     	; 0x1e2e <DPS310_read_8+0x60>
		TWIWrite(reg);
    1dec:	8c 2f       	mov	r24, r28
    1dee:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 3;
    1df2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1df6:	c3 e0       	ldi	r28, 0x03	; 3
    1df8:	88 32       	cpi	r24, 0x28	; 40
    1dfa:	a1 f4       	brne	.+40     	; 0x1e24 <DPS310_read_8+0x56>
		TWIStart();
    1dfc:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <TWIStart>
		if(TWIGetStatus() != 0x10)return 4; //repetet Start sent?
    1e00:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1e04:	c4 e0       	ldi	r28, 0x04	; 4
    1e06:	80 31       	cpi	r24, 0x10	; 16
    1e08:	69 f4       	brne	.+26     	; 0x1e24 <DPS310_read_8+0x56>
		TWIWrite(DPS310_R);
    1e0a:	8f ee       	ldi	r24, 0xEF	; 239
    1e0c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWIWrite>
		if(TWIGetStatus() != 0x40)return 5;
    1e10:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1e14:	c5 e0       	ldi	r28, 0x05	; 5
    1e16:	80 34       	cpi	r24, 0x40	; 64
    1e18:	29 f4       	brne	.+10     	; 0x1e24 <DPS310_read_8+0x56>
		result=TWIReadNACK();
    1e1a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <TWIReadNACK>
    1e1e:	c8 2f       	mov	r28, r24
		TWIStop();
    1e20:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TWIStop>
	return result;	
								//Daten zurueckgeben
}
    1e24:	8c 2f       	mov	r24, r28
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 123;
    1e2a:	cb e7       	ldi	r28, 0x7B	; 123
    1e2c:	fb cf       	rjmp	.-10     	; 0x1e24 <DPS310_read_8+0x56>
		if(TWIGetStatus() != 0x18)return 2;
    1e2e:	c2 e0       	ldi	r28, 0x02	; 2
    1e30:	f9 cf       	rjmp	.-14     	; 0x1e24 <DPS310_read_8+0x56>

00001e32 <DPS310_write>:
uint8_t DPS310_write(uint8_t reg, uint8_t data)
{
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	d8 2f       	mov	r29, r24
    1e38:	c6 2f       	mov	r28, r22
		TWIStart();
    1e3a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <TWIStart>
		if(TWIGetStatus() != 0x08)return 11;
    1e3e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1e42:	88 30       	cpi	r24, 0x08	; 8
    1e44:	d9 f4       	brne	.+54     	; 0x1e7c <DPS310_write+0x4a>
		TWIWrite(DPS310_W);
    1e46:	8e ee       	ldi	r24, 0xEE	; 238
    1e48:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWIWrite>
		if(TWIGetStatus() != 0x18)return 22;
    1e4c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1e50:	88 31       	cpi	r24, 0x18	; 24
    1e52:	b1 f4       	brne	.+44     	; 0x1e80 <DPS310_write+0x4e>
		TWIWrite(reg);
    1e54:	8d 2f       	mov	r24, r29
    1e56:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 33;
    1e5a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1e5e:	88 32       	cpi	r24, 0x28	; 40
    1e60:	89 f4       	brne	.+34     	; 0x1e84 <DPS310_write+0x52>
		TWIWrite(data);
    1e62:	8c 2f       	mov	r24, r28
    1e64:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 44;
    1e68:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWIGetStatus>
    1e6c:	88 32       	cpi	r24, 0x28	; 40
    1e6e:	61 f4       	brne	.+24     	; 0x1e88 <DPS310_write+0x56>
		TWIStop();
    1e70:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TWIStop>
	return 0;	
    1e74:	80 e0       	ldi	r24, 0x00	; 0
	
	//Daten zurueckgeben
}
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 11;
    1e7c:	8b e0       	ldi	r24, 0x0B	; 11
    1e7e:	fb cf       	rjmp	.-10     	; 0x1e76 <DPS310_write+0x44>
		if(TWIGetStatus() != 0x18)return 22;
    1e80:	86 e1       	ldi	r24, 0x16	; 22
    1e82:	f9 cf       	rjmp	.-14     	; 0x1e76 <DPS310_write+0x44>
		if(TWIGetStatus() != 0x28)return 33;
    1e84:	81 e2       	ldi	r24, 0x21	; 33
    1e86:	f7 cf       	rjmp	.-18     	; 0x1e76 <DPS310_write+0x44>
		if(TWIGetStatus() != 0x28)return 44;
    1e88:	8c e2       	ldi	r24, 0x2C	; 44
    1e8a:	f5 cf       	rjmp	.-22     	; 0x1e76 <DPS310_write+0x44>

00001e8c <DPS310_init>:
uint16_t DPS310_init(void)
{
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
	
	DPS310_write(0x07, 0x00);//1 Messung / sec 8 mal oversampling
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	87 e0       	ldi	r24, 0x07	; 7
    1e94:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <DPS310_write>
    1e98:	2f ef       	ldi	r18, 0xFF	; 255
    1e9a:	30 e7       	ldi	r19, 0x70	; 112
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	21 50       	subi	r18, 0x01	; 1
    1ea0:	30 40       	sbci	r19, 0x00	; 0
    1ea2:	80 40       	sbci	r24, 0x00	; 0
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <DPS310_init+0x12>
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <DPS310_init+0x1c>
    1ea8:	00 00       	nop
	_delay_ms(100);
	DPS310_write(0x08, 0x07);
    1eaa:	67 e0       	ldi	r22, 0x07	; 7
    1eac:	88 e0       	ldi	r24, 0x08	; 8
    1eae:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <DPS310_write>
    1eb2:	9f ef       	ldi	r25, 0xFF	; 255
    1eb4:	20 e7       	ldi	r18, 0x70	; 112
    1eb6:	32 e0       	ldi	r19, 0x02	; 2
    1eb8:	91 50       	subi	r25, 0x01	; 1
    1eba:	20 40       	sbci	r18, 0x00	; 0
    1ebc:	30 40       	sbci	r19, 0x00	; 0
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <DPS310_init+0x2c>
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <DPS310_init+0x36>
    1ec2:	00 00       	nop
	_delay_ms(100);
	DPS310_write(0x08, 0x07);
    1ec4:	67 e0       	ldi	r22, 0x07	; 7
    1ec6:	88 e0       	ldi	r24, 0x08	; 8
    1ec8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <DPS310_write>
    1ecc:	8f e1       	ldi	r24, 0x1F	; 31
    1ece:	9e e4       	ldi	r25, 0x4E	; 78
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <DPS310_init+0x44>
    1ed4:	00 c0       	rjmp	.+0      	; 0x1ed6 <DPS310_init+0x4a>
    1ed6:	00 00       	nop
	 
	 uint8_t ut1=0;
	 uint8_t ut2=0;
	 uint8_t ut3=0;
	 
	 ut1 = DPS310_read_8(0x10);	//Bit 4-11 von C0
    1ed8:	80 e1       	ldi	r24, 0x10	; 16
    1eda:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1ede:	c8 2f       	mov	r28, r24
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	20 e7       	ldi	r18, 0x70	; 112
    1ee4:	32 e0       	ldi	r19, 0x02	; 2
    1ee6:	91 50       	subi	r25, 0x01	; 1
    1ee8:	20 40       	sbci	r18, 0x00	; 0
    1eea:	30 40       	sbci	r19, 0x00	; 0
    1eec:	e1 f7       	brne	.-8      	; 0x1ee6 <DPS310_init+0x5a>
    1eee:	00 c0       	rjmp	.+0      	; 0x1ef0 <DPS310_init+0x64>
    1ef0:	00 00       	nop
	 _delay_ms(100);
	 ut2 = DPS310_read_8(0x11);//Bit 4-7 im Register sind Bit 0-3 in C0 / Bit 0-3 in Register sind Bit 8-11 in C1
    1ef2:	81 e1       	ldi	r24, 0x11	; 17
    1ef4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1ef8:	d8 2f       	mov	r29, r24
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	90 e7       	ldi	r25, 0x70	; 112
    1efe:	22 e0       	ldi	r18, 0x02	; 2
    1f00:	81 50       	subi	r24, 0x01	; 1
    1f02:	90 40       	sbci	r25, 0x00	; 0
    1f04:	20 40       	sbci	r18, 0x00	; 0
    1f06:	e1 f7       	brne	.-8      	; 0x1f00 <DPS310_init+0x74>
    1f08:	00 c0       	rjmp	.+0      	; 0x1f0a <DPS310_init+0x7e>
    1f0a:	00 00       	nop
	 _delay_ms(100);
	 ut3 = DPS310_read_8(0x12);//Bit 0-7 in C1
    1f0c:	82 e1       	ldi	r24, 0x12	; 18
    1f0e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	90 e7       	ldi	r25, 0x70	; 112
    1f16:	22 e0       	ldi	r18, 0x02	; 2
    1f18:	31 50       	subi	r19, 0x01	; 1
    1f1a:	90 40       	sbci	r25, 0x00	; 0
    1f1c:	20 40       	sbci	r18, 0x00	; 0
    1f1e:	e1 f7       	brne	.-8      	; 0x1f18 <DPS310_init+0x8c>
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <DPS310_init+0x96>
    1f22:	00 00       	nop
	 _delay_ms(100);
	 
	 uint16_t t_16_1=0;
	 
	 t_16_1 = (ut2>>4);		 //4 mal nach rechts da nur die obersten 4 bits aus diesem Register zu C0 gehören
	 C0 = (ut1<<4) | t_16_1; //Zusammensetzten der 12 Bit Zahl 
    1f24:	90 e1       	ldi	r25, 0x10	; 16
    1f26:	c9 9f       	mul	r28, r25
    1f28:	90 01       	movw	r18, r0
    1f2a:	11 24       	eor	r1, r1
	 t_16_1 = (ut2>>4);		 //4 mal nach rechts da nur die obersten 4 bits aus diesem Register zu C0 gehören
    1f2c:	9d 2f       	mov	r25, r29
    1f2e:	92 95       	swap	r25
    1f30:	9f 70       	andi	r25, 0x0F	; 15
	 C0 = (ut1<<4) | t_16_1; //Zusammensetzten der 12 Bit Zahl 
    1f32:	29 2b       	or	r18, r25
    1f34:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <C0+0x1>
    1f38:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <C0>
	//C0=(((int)ut1<<8)|ut2)>>4;
      // C0=C0/2;
	 t_16_1 = 0; 			//Hilfsvariable zurücksetzen
	 t_16_1 = ut2 & 0x0F; 	//nur die tiefsten 4 Bits übernehmen
    1f3c:	df 70       	andi	r29, 0x0F	; 15
	 C1 = (t_16_1<< 8) | ut3;	//12 Bits zusammensetzen
    1f3e:	9d 2f       	mov	r25, r29
    1f40:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <C1+0x1>
    1f44:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <C1>
	_delay_ms(verz);
	tmp2=DPS310_read_8(0x21);
	_delay_ms(verz);
	C30 = make_signed_16(tmp1, tmp2);
	* */
}
    1f48:	c9 01       	movw	r24, r18
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	08 95       	ret

00001f50 <DPS310_get_raw_temp>:
int32_t DPS310_get_raw_temp(void)
{
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
	uint8_t verz=100; //Verzoegerund für Auslesen aus Register


	
		
	tmp2=DPS310_read_8(TMP_B2);	//MSB rohdaten aus Sensor auslesen
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1f5a:	d8 2f       	mov	r29, r24
    1f5c:	2f ef       	ldi	r18, 0xFF	; 255
    1f5e:	30 e7       	ldi	r19, 0x70	; 112
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	21 50       	subi	r18, 0x01	; 1
    1f64:	30 40       	sbci	r19, 0x00	; 0
    1f66:	80 40       	sbci	r24, 0x00	; 0
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <DPS310_get_raw_temp+0x12>
    1f6a:	00 c0       	rjmp	.+0      	; 0x1f6c <DPS310_get_raw_temp+0x1c>
    1f6c:	00 00       	nop
	_delay_ms(verz);
	tmp1=DPS310_read_8(TMP_B1);	//mittleres Bit auslesen
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1f74:	c8 2f       	mov	r28, r24
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	20 e7       	ldi	r18, 0x70	; 112
    1f7a:	32 e0       	ldi	r19, 0x02	; 2
    1f7c:	91 50       	subi	r25, 0x01	; 1
    1f7e:	20 40       	sbci	r18, 0x00	; 0
    1f80:	30 40       	sbci	r19, 0x00	; 0
    1f82:	e1 f7       	brne	.-8      	; 0x1f7c <DPS310_get_raw_temp+0x2c>
    1f84:	00 c0       	rjmp	.+0      	; 0x1f86 <DPS310_get_raw_temp+0x36>
    1f86:	00 00       	nop
	_delay_ms(verz);
	tmp0=DPS310_read_8(TMP_B0);	//LSB auslesen
    1f88:	85 e0       	ldi	r24, 0x05	; 5
    1f8a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1f8e:	28 2f       	mov	r18, r24
    1f90:	8f ef       	ldi	r24, 0xFF	; 255
    1f92:	90 e7       	ldi	r25, 0x70	; 112
    1f94:	32 e0       	ldi	r19, 0x02	; 2
    1f96:	81 50       	subi	r24, 0x01	; 1
    1f98:	90 40       	sbci	r25, 0x00	; 0
    1f9a:	30 40       	sbci	r19, 0x00	; 0
    1f9c:	e1 f7       	brne	.-8      	; 0x1f96 <DPS310_get_raw_temp+0x46>
    1f9e:	00 c0       	rjmp	.+0      	; 0x1fa0 <DPS310_get_raw_temp+0x50>
    1fa0:	00 00       	nop
	_delay_ms(verz);
	
	
	tmp16 = ((uint16_t)tmp2<<8) | tmp1;	//schiebe MSB 8 Schritte links
	tmp32 = tmp16;				//16 Bit Variable in 32 Bit Variable kopieren
    1fa2:	be 01       	movw	r22, r28
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
	tmp32 = (tmp32<<8) | tmp0;	//LSB hinzufügen
    1fa8:	98 2f       	mov	r25, r24
    1faa:	87 2f       	mov	r24, r23
    1fac:	76 2f       	mov	r23, r22
    1fae:	66 27       	eor	r22, r22
    1fb0:	62 2b       	or	r22, r18
	}else ret = (int32_t)tmp32;
	ret = (int32_t)tmp32;
 */
	ret = tmp32;
  return ret;
}
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	08 95       	ret

00001fb8 <DPS310_gettemp>:
int32_t DPS310_gettemp(void)
{
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
	uint8_t buffer[3] = {0};
	//read raw pressure data to buffer

	buffer[0]= DPS310_read_8(TMP_B2);
    1fc0:	83 e0       	ldi	r24, 0x03	; 3
    1fc2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1fc6:	d8 2f       	mov	r29, r24
	buffer[1]= DPS310_read_8(TMP_B1);
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    1fce:	c8 2f       	mov	r28, r24
	buffer[2]= DPS310_read_8(TMP_B0);
    1fd0:	85 e0       	ldi	r24, 0x05	; 5
    1fd2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>

	//compose raw temperature value from buffer
	int32_t temp =    (uint32_t)buffer[0] << 16
					| (uint32_t)buffer[1] << 8
    1fd6:	4c 2f       	mov	r20, r28
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	76 2f       	mov	r23, r22
    1fe0:	65 2f       	mov	r22, r21
    1fe2:	54 2f       	mov	r21, r20
    1fe4:	44 27       	eor	r20, r20
    1fe6:	6d 2b       	or	r22, r29
					| (uint32_t)buffer[2];
    1fe8:	8a 01       	movw	r16, r20
    1fea:	9b 01       	movw	r18, r22
    1fec:	08 2b       	or	r16, r24
    1fee:	c9 01       	movw	r24, r18
    1ff0:	b8 01       	movw	r22, r16
	//recognize non-32-bit negative numbers
	//and convert them to 32-bit negative numbers using 2's complement
	if(temp & ((uint32_t)1 << 23))
    1ff2:	87 fd       	sbrc	r24, 7
	{
		temp -= (uint32_t)1 << 24;
    1ff4:	9a 95       	dec	r25
	}

	//return temperature
	
	return temp;
}
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	08 95       	ret

00002000 <DPS310_calcTemp>:
int32_t DPS310_calcTemp(int32_t raw, int32_t m_c0Half,int32_t m_c1)
{
    2000:	4f 92       	push	r4
    2002:	5f 92       	push	r5
    2004:	6f 92       	push	r6
    2006:	7f 92       	push	r7
    2008:	8f 92       	push	r8
    200a:	9f 92       	push	r9
    200c:	af 92       	push	r10
    200e:	bf 92       	push	r11
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	49 01       	movw	r8, r18
    201e:	5a 01       	movw	r10, r20
    2020:	67 01       	movw	r12, r14
	double temp = raw;
    2022:	0e 94 a2 12 	call	0x2544	; 0x2544 <__floatsisf>
    2026:	2b 01       	movw	r4, r22
    2028:	3c 01       	movw	r6, r24
	//update last measured temperature
	//it will be used for pressure compensation
	//m_lastTempScal = temp;

	//Calculate compensated temperature
	temp = m_c0Half + m_c1 * temp;
    202a:	c8 01       	movw	r24, r16
    202c:	b6 01       	movw	r22, r12
    202e:	0e 94 a2 12 	call	0x2544	; 0x2544 <__floatsisf>
    2032:	6b 01       	movw	r12, r22
    2034:	7c 01       	movw	r14, r24
	temp /= 1572864;
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 ec       	ldi	r20, 0xC0	; 192
    203c:	59 e4       	ldi	r21, 0x49	; 73
    203e:	c3 01       	movw	r24, r6
    2040:	b2 01       	movw	r22, r4
    2042:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__divsf3>
    2046:	9b 01       	movw	r18, r22
    2048:	ac 01       	movw	r20, r24
	temp = m_c0Half + m_c1 * temp;
    204a:	c7 01       	movw	r24, r14
    204c:	b6 01       	movw	r22, r12
    204e:	0e 94 2e 13 	call	0x265c	; 0x265c <__mulsf3>
    2052:	6b 01       	movw	r12, r22
    2054:	7c 01       	movw	r14, r24
    2056:	c5 01       	movw	r24, r10
    2058:	b4 01       	movw	r22, r8
    205a:	0e 94 a2 12 	call	0x2544	; 0x2544 <__floatsisf>
    205e:	a7 01       	movw	r20, r14
    2060:	96 01       	movw	r18, r12
    2062:	0e 94 8c 11 	call	0x2318	; 0x2318 <__addsf3>

	//return temperature
	return (int32_t)temp;
    2066:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__fixsfsi>
}
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	df 90       	pop	r13
    2074:	cf 90       	pop	r12
    2076:	bf 90       	pop	r11
    2078:	af 90       	pop	r10
    207a:	9f 90       	pop	r9
    207c:	8f 90       	pop	r8
    207e:	7f 90       	pop	r7
    2080:	6f 90       	pop	r6
    2082:	5f 90       	pop	r5
    2084:	4f 90       	pop	r4
    2086:	08 95       	ret

00002088 <calculate_temperature_pressure>:
    2088:	2f ef       	ldi	r18, 0xFF	; 255
    208a:	80 e7       	ldi	r24, 0x70	; 112
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	80 40       	sbci	r24, 0x00	; 0
    2092:	90 40       	sbci	r25, 0x00	; 0
    2094:	e1 f7       	brne	.-8      	; 0x208e <calculate_temperature_pressure+0x6>
    2096:	00 c0       	rjmp	.+0      	; 0x2098 <calculate_temperature_pressure+0x10>
    2098:	00 00       	nop
	float Temperature=0;
       long temptemp = 0;
       Temperature=0;
      
     _delay_ms(100);
	DPS310_write(PRS_CFG, 0x01);
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	86 e0       	ldi	r24, 0x06	; 6
    209e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <DPS310_write>
    20a2:	2f ef       	ldi	r18, 0xFF	; 255
    20a4:	80 e7       	ldi	r24, 0x70	; 112
    20a6:	92 e0       	ldi	r25, 0x02	; 2
    20a8:	21 50       	subi	r18, 0x01	; 1
    20aa:	80 40       	sbci	r24, 0x00	; 0
    20ac:	90 40       	sbci	r25, 0x00	; 0
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <calculate_temperature_pressure+0x20>
    20b0:	00 c0       	rjmp	.+0      	; 0x20b2 <calculate_temperature_pressure+0x2a>
    20b2:	00 00       	nop
	_delay_ms(100);
	DPS310_write(TMP_CFG, 0x80);//1 Messung / sec 8 mal oversampling
    20b4:	60 e8       	ldi	r22, 0x80	; 128
    20b6:	87 e0       	ldi	r24, 0x07	; 7
    20b8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <DPS310_write>
    20bc:	2f ef       	ldi	r18, 0xFF	; 255
    20be:	80 e7       	ldi	r24, 0x70	; 112
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	21 50       	subi	r18, 0x01	; 1
    20c4:	80 40       	sbci	r24, 0x00	; 0
    20c6:	90 40       	sbci	r25, 0x00	; 0
    20c8:	e1 f7       	brne	.-8      	; 0x20c2 <calculate_temperature_pressure+0x3a>
    20ca:	00 c0       	rjmp	.+0      	; 0x20cc <calculate_temperature_pressure+0x44>
    20cc:	00 00       	nop
	_delay_ms(100);
	DPS310_write(0x08, 0x07);
    20ce:	67 e0       	ldi	r22, 0x07	; 7
    20d0:	88 e0       	ldi	r24, 0x08	; 8
    20d2:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <DPS310_write>
    20d6:	2f ef       	ldi	r18, 0xFF	; 255
    20d8:	80 e7       	ldi	r24, 0x70	; 112
    20da:	92 e0       	ldi	r25, 0x02	; 2
    20dc:	21 50       	subi	r18, 0x01	; 1
    20de:	80 40       	sbci	r24, 0x00	; 0
    20e0:	90 40       	sbci	r25, 0x00	; 0
    20e2:	e1 f7       	brne	.-8      	; 0x20dc <calculate_temperature_pressure+0x54>
    20e4:	00 c0       	rjmp	.+0      	; 0x20e6 <calculate_temperature_pressure+0x5e>
    20e6:	00 00       	nop
	_delay_ms(100);
       
       
       
       
       Temperature=(float)DPS310_get_raw_temp();
    20e8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <DPS310_get_raw_temp>
    20ec:	0e 94 a2 12 	call	0x2544	; 0x2544 <__floatsisf>
       Temperature/=524288;
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	56 e3       	ldi	r21, 0x36	; 54
    20f8:	0e 94 2e 13 	call	0x265c	; 0x265c <__mulsf3>
       temptemp = Temperature;
    20fc:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__fixsfsi>
     return temptemp;
}
    2100:	08 95       	ret

00002102 <DPS310_get_raw_pres>:
	uint16_t tmp16=0;
	uint32_t tmp32=0;
	int32_t ret=0;
	uint8_t verz=100; //Verzoegerund für Auslesen aus Register
	
	DPS310_write(0x08, 0x02);//eine temp messung auslösen
    2102:	62 e0       	ldi	r22, 0x02	; 2
    2104:	88 e0       	ldi	r24, 0x08	; 8
    2106:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <DPS310_write>
    210a:	2f ef       	ldi	r18, 0xFF	; 255
    210c:	80 e7       	ldi	r24, 0x70	; 112
    210e:	92 e0       	ldi	r25, 0x02	; 2
    2110:	21 50       	subi	r18, 0x01	; 1
    2112:	80 40       	sbci	r24, 0x00	; 0
    2114:	90 40       	sbci	r25, 0x00	; 0
    2116:	e1 f7       	brne	.-8      	; 0x2110 <DPS310_get_raw_pres+0xe>
    2118:	00 c0       	rjmp	.+0      	; 0x211a <DPS310_get_raw_pres+0x18>
    211a:	00 00       	nop
	_delay_ms(100);
		
	tmp2=DPS310_read_8(PSR_B2);	//MSB rohdaten aus Sensor auslesen
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    2122:	2f ef       	ldi	r18, 0xFF	; 255
    2124:	80 e7       	ldi	r24, 0x70	; 112
    2126:	92 e0       	ldi	r25, 0x02	; 2
    2128:	21 50       	subi	r18, 0x01	; 1
    212a:	80 40       	sbci	r24, 0x00	; 0
    212c:	90 40       	sbci	r25, 0x00	; 0
    212e:	e1 f7       	brne	.-8      	; 0x2128 <DPS310_get_raw_pres+0x26>
    2130:	00 c0       	rjmp	.+0      	; 0x2132 <DPS310_get_raw_pres+0x30>
    2132:	00 00       	nop
	_delay_ms(verz);
	tmp1=DPS310_read_8(PSR_B1);	//mittleres Bit auslesen
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    213a:	2f ef       	ldi	r18, 0xFF	; 255
    213c:	80 e7       	ldi	r24, 0x70	; 112
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	21 50       	subi	r18, 0x01	; 1
    2142:	80 40       	sbci	r24, 0x00	; 0
    2144:	90 40       	sbci	r25, 0x00	; 0
    2146:	e1 f7       	brne	.-8      	; 0x2140 <DPS310_get_raw_pres+0x3e>
    2148:	00 c0       	rjmp	.+0      	; 0x214a <DPS310_get_raw_pres+0x48>
    214a:	00 00       	nop
	_delay_ms(verz);
	tmp0=DPS310_read_8(PSR_B0);	//LSB auslesen
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    2152:	2f ef       	ldi	r18, 0xFF	; 255
    2154:	80 e7       	ldi	r24, 0x70	; 112
    2156:	92 e0       	ldi	r25, 0x02	; 2
    2158:	21 50       	subi	r18, 0x01	; 1
    215a:	80 40       	sbci	r24, 0x00	; 0
    215c:	90 40       	sbci	r25, 0x00	; 0
    215e:	e1 f7       	brne	.-8      	; 0x2158 <DPS310_get_raw_pres+0x56>
    2160:	00 c0       	rjmp	.+0      	; 0x2162 <DPS310_get_raw_pres+0x60>
    2162:	00 00       	nop
  //  ret=(ret<<8)>>8;
	
	*/
	return ret;
	
}
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	cb 01       	movw	r24, r22
    216a:	08 95       	ret

0000216c <DPS310_get_komp_temp>:



int32_t DPS310_get_komp_temp(void)
{
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
	int32_t ret=0;
	int32_t temp_raw_sc=0;
	int32_t temp_raw=0;
	uint8_t verz=10; //Verzoegerund für Auslesen aus Register
		
	tmp2=DPS310_read_8(TMP_B2);	//MSB rohdaten aus Sensor auslesen
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    217e:	f8 2e       	mov	r15, r24
    2180:	8f e1       	ldi	r24, 0x1F	; 31
    2182:	9e e4       	ldi	r25, 0x4E	; 78
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <DPS310_get_komp_temp+0x18>
    2188:	00 c0       	rjmp	.+0      	; 0x218a <DPS310_get_komp_temp+0x1e>
    218a:	00 00       	nop
	_delay_ms(verz);
	tmp1=DPS310_read_8(TMP_B1);	//mittleres Bit auslesen
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    2192:	c8 2f       	mov	r28, r24
    2194:	8f e1       	ldi	r24, 0x1F	; 31
    2196:	9e e4       	ldi	r25, 0x4E	; 78
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <DPS310_get_komp_temp+0x2c>
    219c:	00 c0       	rjmp	.+0      	; 0x219e <DPS310_get_komp_temp+0x32>
    219e:	00 00       	nop
	_delay_ms(verz);
	tmp0=DPS310_read_8(TMP_B0);	//LSB auslesen
    21a0:	85 e0       	ldi	r24, 0x05	; 5
    21a2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <DPS310_read_8>
    21a6:	28 2f       	mov	r18, r24
    21a8:	8f e1       	ldi	r24, 0x1F	; 31
    21aa:	9e e4       	ldi	r25, 0x4E	; 78
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <DPS310_get_komp_temp+0x40>
    21b0:	00 c0       	rjmp	.+0      	; 0x21b2 <DPS310_get_komp_temp+0x46>
    21b2:	00 00       	nop
	_delay_ms(verz);
	
	tmp16 = (tmp2<<8) | tmp1;	//schiebe MSB 8 Schritte links
    21b4:	df 2d       	mov	r29, r15
	tmp32 = tmp16;				//16 Bit Variable in 32 Bit Variable kopieren
    21b6:	be 01       	movw	r22, r28
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	80 e0       	ldi	r24, 0x00	; 0
	tmp32 = (tmp32<<8) | tmp0;	//LSB hinzufügen
    21bc:	98 2f       	mov	r25, r24
    21be:	87 2f       	mov	r24, r23
    21c0:	76 2f       	mov	r23, r22
    21c2:	66 27       	eor	r22, r22
    21c4:	62 2b       	or	r22, r18
	
	if(tmp32 >= 8388608)		//Vorzeichenbit gesetzt
    21c6:	61 15       	cp	r22, r1
    21c8:	71 05       	cpc	r23, r1
    21ca:	20 e8       	ldi	r18, 0x80	; 128
    21cc:	82 07       	cpc	r24, r18
    21ce:	91 05       	cpc	r25, r1
    21d0:	b8 f1       	brcs	.+110    	; 0x2240 <DPS310_get_komp_temp+0xd4>
	{
		tmp32 -= 8388608;		//Wertigkeit von Vorzeichenbit abzählen
    21d2:	80 58       	subi	r24, 0x80	; 128
    21d4:	91 09       	sbc	r25, r1
		temp_raw = 0 -((int32_t)tmp32);
    21d6:	90 95       	com	r25
    21d8:	80 95       	com	r24
    21da:	70 95       	com	r23
    21dc:	61 95       	neg	r22
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	8f 4f       	sbci	r24, 0xFF	; 255
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
	}else ret = (int32_t)tmp32;
	
	temp_raw_sc=temp_raw / 7864320;
	ret = (C0*0.5)+(C1*temp_raw_sc);
    21e4:	e0 90 88 01 	lds	r14, 0x0188	; 0x800188 <C1>
    21e8:	f0 90 89 01 	lds	r15, 0x0189	; 0x800189 <C1+0x1>
	temp_raw_sc=temp_raw / 7864320;
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	48 e7       	ldi	r20, 0x78	; 120
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	0e 94 9b 13 	call	0x2736	; 0x2736 <__divmodsi4>
	ret = (C0*0.5)+(C1*temp_raw_sc);
    21f8:	d7 01       	movw	r26, r14
    21fa:	0e 94 ba 13 	call	0x2774	; 0x2774 <__muluhisi3>
    21fe:	0e 94 a2 12 	call	0x2544	; 0x2544 <__floatsisf>
    2202:	6b 01       	movw	r12, r22
    2204:	7c 01       	movw	r14, r24
    2206:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <C0>
    220a:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <C0+0x1>
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatunsisf>
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 2e 13 	call	0x265c	; 0x265c <__mulsf3>
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	c7 01       	movw	r24, r14
    2228:	b6 01       	movw	r22, r12
    222a:	0e 94 8c 11 	call	0x2318	; 0x2318 <__addsf3>
    222e:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__fixsfsi>
    
	return ret;
}
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	df 90       	pop	r13
    223c:	cf 90       	pop	r12
    223e:	08 95       	ret
	int32_t temp_raw=0;
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	cb 01       	movw	r24, r22
    2246:	ce cf       	rjmp	.-100    	; 0x21e4 <DPS310_get_komp_temp+0x78>

00002248 <main>:
char string[30] = "";


int main(void)
{
	stdout = & mydata;
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__iob+0x3>
    2250:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <__iob+0x2>
	ili9341_init();//initial driver setup to drive ili9341
    2254:	0e 94 4f 03 	call	0x69e	; 0x69e <ili9341_init>
	ili9341_clear(BLACK);//fill screen with black colour
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <ili9341_clear>
    2260:	2f ef       	ldi	r18, 0xFF	; 255
    2262:	89 e6       	ldi	r24, 0x69	; 105
    2264:	98 e1       	ldi	r25, 0x18	; 24
    2266:	21 50       	subi	r18, 0x01	; 1
    2268:	80 40       	sbci	r24, 0x00	; 0
    226a:	90 40       	sbci	r25, 0x00	; 0
    226c:	e1 f7       	brne	.-8      	; 0x2266 <main+0x1e>
    226e:	00 c0       	rjmp	.+0      	; 0x2270 <main+0x28>
    2270:	00 00       	nop
	_delay_ms(1000);
	ili9341_setRotation(3);//rotate screen
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	0e 94 96 05 	call	0xb2c	; 0xb2c <ili9341_setRotation>
    2278:	8f e9       	ldi	r24, 0x9F	; 159
    227a:	9f e0       	ldi	r25, 0x0F	; 15
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <main+0x34>
    2280:	00 c0       	rjmp	.+0      	; 0x2282 <main+0x3a>
    2282:	00 00       	nop
	_delay_ms(2);

	//display_init();//display initial data
	yy=240;
    2284:	80 ef       	ldi	r24, 0xF0	; 240
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <yy+0x1>
    228c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <yy>
	xx=0;
    2290:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <xx+0x1>
    2294:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <xx>
	zell=0;
    2298:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <zell+0x1>
    229c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <zell>
	color=123;
    22a0:	8b e7       	ldi	r24, 0x7B	; 123
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <color+0x1>
    22a8:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <color>
	var_x=0x01;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <var_x+0x1>
    22b4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <var_x>

	ili9341_settextcolour(RED,BLACK);
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	98 ef       	ldi	r25, 0xF8	; 248
    22c0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <ili9341_settextcolour>
	ili9341_setcursor(0,0);
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	0e 94 22 0c 	call	0x1844	; 0x1844 <ili9341_setcursor>
	ili9341_settextsize(3);
    22d0:	83 e0       	ldi	r24, 0x03	; 3
    22d2:	0e 94 34 0c 	call	0x1868	; 0x1868 <ili9341_settextsize>
	
	TWIInit();
    22d6:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <TWIInit>
		
	while(1)
	{
		
		ili9341_setcursor(0,0);
		printf("B2 %d", 12345);
    22da:	00 e3       	ldi	r16, 0x30	; 48
    22dc:	19 e3       	ldi	r17, 0x39	; 57
    22de:	c4 e2       	ldi	r28, 0x24	; 36
    22e0:	d1 e0       	ldi	r29, 0x01	; 1
		ili9341_setcursor(0,0);
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	0e 94 22 0c 	call	0x1844	; 0x1844 <ili9341_setcursor>
		printf("B2 %d", 12345);
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	0e 94 1b 14 	call	0x2836	; 0x2836 <printf>
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	94 e3       	ldi	r25, 0x34	; 52
    22fe:	2c e0       	ldi	r18, 0x0C	; 12
    2300:	81 50       	subi	r24, 0x01	; 1
    2302:	90 40       	sbci	r25, 0x00	; 0
    2304:	20 40       	sbci	r18, 0x00	; 0
    2306:	e1 f7       	brne	.-8      	; 0x2300 <main+0xb8>
    2308:	00 c0       	rjmp	.+0      	; 0x230a <main+0xc2>
    230a:	00 00       	nop
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	e6 cf       	rjmp	.-52     	; 0x22e2 <main+0x9a>

00002316 <__subsf3>:
    2316:	50 58       	subi	r21, 0x80	; 128

00002318 <__addsf3>:
    2318:	bb 27       	eor	r27, r27
    231a:	aa 27       	eor	r26, r26
    231c:	0e 94 a3 11 	call	0x2346	; 0x2346 <__addsf3x>
    2320:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__fp_round>
    2324:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fp_pscA>
    2328:	38 f0       	brcs	.+14     	; 0x2338 <__addsf3+0x20>
    232a:	0e 94 ed 12 	call	0x25da	; 0x25da <__fp_pscB>
    232e:	20 f0       	brcs	.+8      	; 0x2338 <__addsf3+0x20>
    2330:	39 f4       	brne	.+14     	; 0x2340 <__addsf3+0x28>
    2332:	9f 3f       	cpi	r25, 0xFF	; 255
    2334:	19 f4       	brne	.+6      	; 0x233c <__addsf3+0x24>
    2336:	26 f4       	brtc	.+8      	; 0x2340 <__addsf3+0x28>
    2338:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_nan>
    233c:	0e f4       	brtc	.+2      	; 0x2340 <__addsf3+0x28>
    233e:	e0 95       	com	r30
    2340:	e7 fb       	bst	r30, 7
    2342:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__fp_inf>

00002346 <__addsf3x>:
    2346:	e9 2f       	mov	r30, r25
    2348:	0e 94 05 13 	call	0x260a	; 0x260a <__fp_split3>
    234c:	58 f3       	brcs	.-42     	; 0x2324 <__addsf3+0xc>
    234e:	ba 17       	cp	r27, r26
    2350:	62 07       	cpc	r22, r18
    2352:	73 07       	cpc	r23, r19
    2354:	84 07       	cpc	r24, r20
    2356:	95 07       	cpc	r25, r21
    2358:	20 f0       	brcs	.+8      	; 0x2362 <__addsf3x+0x1c>
    235a:	79 f4       	brne	.+30     	; 0x237a <__addsf3x+0x34>
    235c:	a6 f5       	brtc	.+104    	; 0x23c6 <__addsf3x+0x80>
    235e:	0c 94 27 13 	jmp	0x264e	; 0x264e <__fp_zero>
    2362:	0e f4       	brtc	.+2      	; 0x2366 <__addsf3x+0x20>
    2364:	e0 95       	com	r30
    2366:	0b 2e       	mov	r0, r27
    2368:	ba 2f       	mov	r27, r26
    236a:	a0 2d       	mov	r26, r0
    236c:	0b 01       	movw	r0, r22
    236e:	b9 01       	movw	r22, r18
    2370:	90 01       	movw	r18, r0
    2372:	0c 01       	movw	r0, r24
    2374:	ca 01       	movw	r24, r20
    2376:	a0 01       	movw	r20, r0
    2378:	11 24       	eor	r1, r1
    237a:	ff 27       	eor	r31, r31
    237c:	59 1b       	sub	r21, r25
    237e:	99 f0       	breq	.+38     	; 0x23a6 <__addsf3x+0x60>
    2380:	59 3f       	cpi	r21, 0xF9	; 249
    2382:	50 f4       	brcc	.+20     	; 0x2398 <__addsf3x+0x52>
    2384:	50 3e       	cpi	r21, 0xE0	; 224
    2386:	68 f1       	brcs	.+90     	; 0x23e2 <__addsf3x+0x9c>
    2388:	1a 16       	cp	r1, r26
    238a:	f0 40       	sbci	r31, 0x00	; 0
    238c:	a2 2f       	mov	r26, r18
    238e:	23 2f       	mov	r18, r19
    2390:	34 2f       	mov	r19, r20
    2392:	44 27       	eor	r20, r20
    2394:	58 5f       	subi	r21, 0xF8	; 248
    2396:	f3 cf       	rjmp	.-26     	; 0x237e <__addsf3x+0x38>
    2398:	46 95       	lsr	r20
    239a:	37 95       	ror	r19
    239c:	27 95       	ror	r18
    239e:	a7 95       	ror	r26
    23a0:	f0 40       	sbci	r31, 0x00	; 0
    23a2:	53 95       	inc	r21
    23a4:	c9 f7       	brne	.-14     	; 0x2398 <__addsf3x+0x52>
    23a6:	7e f4       	brtc	.+30     	; 0x23c6 <__addsf3x+0x80>
    23a8:	1f 16       	cp	r1, r31
    23aa:	ba 0b       	sbc	r27, r26
    23ac:	62 0b       	sbc	r22, r18
    23ae:	73 0b       	sbc	r23, r19
    23b0:	84 0b       	sbc	r24, r20
    23b2:	ba f0       	brmi	.+46     	; 0x23e2 <__addsf3x+0x9c>
    23b4:	91 50       	subi	r25, 0x01	; 1
    23b6:	a1 f0       	breq	.+40     	; 0x23e0 <__addsf3x+0x9a>
    23b8:	ff 0f       	add	r31, r31
    23ba:	bb 1f       	adc	r27, r27
    23bc:	66 1f       	adc	r22, r22
    23be:	77 1f       	adc	r23, r23
    23c0:	88 1f       	adc	r24, r24
    23c2:	c2 f7       	brpl	.-16     	; 0x23b4 <__addsf3x+0x6e>
    23c4:	0e c0       	rjmp	.+28     	; 0x23e2 <__addsf3x+0x9c>
    23c6:	ba 0f       	add	r27, r26
    23c8:	62 1f       	adc	r22, r18
    23ca:	73 1f       	adc	r23, r19
    23cc:	84 1f       	adc	r24, r20
    23ce:	48 f4       	brcc	.+18     	; 0x23e2 <__addsf3x+0x9c>
    23d0:	87 95       	ror	r24
    23d2:	77 95       	ror	r23
    23d4:	67 95       	ror	r22
    23d6:	b7 95       	ror	r27
    23d8:	f7 95       	ror	r31
    23da:	9e 3f       	cpi	r25, 0xFE	; 254
    23dc:	08 f0       	brcs	.+2      	; 0x23e0 <__addsf3x+0x9a>
    23de:	b0 cf       	rjmp	.-160    	; 0x2340 <__addsf3+0x28>
    23e0:	93 95       	inc	r25
    23e2:	88 0f       	add	r24, r24
    23e4:	08 f0       	brcs	.+2      	; 0x23e8 <__addsf3x+0xa2>
    23e6:	99 27       	eor	r25, r25
    23e8:	ee 0f       	add	r30, r30
    23ea:	97 95       	ror	r25
    23ec:	87 95       	ror	r24
    23ee:	08 95       	ret

000023f0 <__divsf3>:
    23f0:	0e 94 0c 12 	call	0x2418	; 0x2418 <__divsf3x>
    23f4:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__fp_round>
    23f8:	0e 94 ed 12 	call	0x25da	; 0x25da <__fp_pscB>
    23fc:	58 f0       	brcs	.+22     	; 0x2414 <__divsf3+0x24>
    23fe:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fp_pscA>
    2402:	40 f0       	brcs	.+16     	; 0x2414 <__divsf3+0x24>
    2404:	29 f4       	brne	.+10     	; 0x2410 <__divsf3+0x20>
    2406:	5f 3f       	cpi	r21, 0xFF	; 255
    2408:	29 f0       	breq	.+10     	; 0x2414 <__divsf3+0x24>
    240a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__fp_inf>
    240e:	51 11       	cpse	r21, r1
    2410:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_szero>
    2414:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_nan>

00002418 <__divsf3x>:
    2418:	0e 94 05 13 	call	0x260a	; 0x260a <__fp_split3>
    241c:	68 f3       	brcs	.-38     	; 0x23f8 <__divsf3+0x8>

0000241e <__divsf3_pse>:
    241e:	99 23       	and	r25, r25
    2420:	b1 f3       	breq	.-20     	; 0x240e <__divsf3+0x1e>
    2422:	55 23       	and	r21, r21
    2424:	91 f3       	breq	.-28     	; 0x240a <__divsf3+0x1a>
    2426:	95 1b       	sub	r25, r21
    2428:	55 0b       	sbc	r21, r21
    242a:	bb 27       	eor	r27, r27
    242c:	aa 27       	eor	r26, r26
    242e:	62 17       	cp	r22, r18
    2430:	73 07       	cpc	r23, r19
    2432:	84 07       	cpc	r24, r20
    2434:	38 f0       	brcs	.+14     	; 0x2444 <__divsf3_pse+0x26>
    2436:	9f 5f       	subi	r25, 0xFF	; 255
    2438:	5f 4f       	sbci	r21, 0xFF	; 255
    243a:	22 0f       	add	r18, r18
    243c:	33 1f       	adc	r19, r19
    243e:	44 1f       	adc	r20, r20
    2440:	aa 1f       	adc	r26, r26
    2442:	a9 f3       	breq	.-22     	; 0x242e <__divsf3_pse+0x10>
    2444:	35 d0       	rcall	.+106    	; 0x24b0 <__divsf3_pse+0x92>
    2446:	0e 2e       	mov	r0, r30
    2448:	3a f0       	brmi	.+14     	; 0x2458 <__divsf3_pse+0x3a>
    244a:	e0 e8       	ldi	r30, 0x80	; 128
    244c:	32 d0       	rcall	.+100    	; 0x24b2 <__divsf3_pse+0x94>
    244e:	91 50       	subi	r25, 0x01	; 1
    2450:	50 40       	sbci	r21, 0x00	; 0
    2452:	e6 95       	lsr	r30
    2454:	00 1c       	adc	r0, r0
    2456:	ca f7       	brpl	.-14     	; 0x244a <__divsf3_pse+0x2c>
    2458:	2b d0       	rcall	.+86     	; 0x24b0 <__divsf3_pse+0x92>
    245a:	fe 2f       	mov	r31, r30
    245c:	29 d0       	rcall	.+82     	; 0x24b0 <__divsf3_pse+0x92>
    245e:	66 0f       	add	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	88 1f       	adc	r24, r24
    2464:	bb 1f       	adc	r27, r27
    2466:	26 17       	cp	r18, r22
    2468:	37 07       	cpc	r19, r23
    246a:	48 07       	cpc	r20, r24
    246c:	ab 07       	cpc	r26, r27
    246e:	b0 e8       	ldi	r27, 0x80	; 128
    2470:	09 f0       	breq	.+2      	; 0x2474 <__divsf3_pse+0x56>
    2472:	bb 0b       	sbc	r27, r27
    2474:	80 2d       	mov	r24, r0
    2476:	bf 01       	movw	r22, r30
    2478:	ff 27       	eor	r31, r31
    247a:	93 58       	subi	r25, 0x83	; 131
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	3a f0       	brmi	.+14     	; 0x248e <__divsf3_pse+0x70>
    2480:	9e 3f       	cpi	r25, 0xFE	; 254
    2482:	51 05       	cpc	r21, r1
    2484:	78 f0       	brcs	.+30     	; 0x24a4 <__divsf3_pse+0x86>
    2486:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__fp_inf>
    248a:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_szero>
    248e:	5f 3f       	cpi	r21, 0xFF	; 255
    2490:	e4 f3       	brlt	.-8      	; 0x248a <__divsf3_pse+0x6c>
    2492:	98 3e       	cpi	r25, 0xE8	; 232
    2494:	d4 f3       	brlt	.-12     	; 0x248a <__divsf3_pse+0x6c>
    2496:	86 95       	lsr	r24
    2498:	77 95       	ror	r23
    249a:	67 95       	ror	r22
    249c:	b7 95       	ror	r27
    249e:	f7 95       	ror	r31
    24a0:	9f 5f       	subi	r25, 0xFF	; 255
    24a2:	c9 f7       	brne	.-14     	; 0x2496 <__divsf3_pse+0x78>
    24a4:	88 0f       	add	r24, r24
    24a6:	91 1d       	adc	r25, r1
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	97 f9       	bld	r25, 7
    24ae:	08 95       	ret
    24b0:	e1 e0       	ldi	r30, 0x01	; 1
    24b2:	66 0f       	add	r22, r22
    24b4:	77 1f       	adc	r23, r23
    24b6:	88 1f       	adc	r24, r24
    24b8:	bb 1f       	adc	r27, r27
    24ba:	62 17       	cp	r22, r18
    24bc:	73 07       	cpc	r23, r19
    24be:	84 07       	cpc	r24, r20
    24c0:	ba 07       	cpc	r27, r26
    24c2:	20 f0       	brcs	.+8      	; 0x24cc <__divsf3_pse+0xae>
    24c4:	62 1b       	sub	r22, r18
    24c6:	73 0b       	sbc	r23, r19
    24c8:	84 0b       	sbc	r24, r20
    24ca:	ba 0b       	sbc	r27, r26
    24cc:	ee 1f       	adc	r30, r30
    24ce:	88 f7       	brcc	.-30     	; 0x24b2 <__divsf3_pse+0x94>
    24d0:	e0 95       	com	r30
    24d2:	08 95       	ret

000024d4 <__fixsfsi>:
    24d4:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__fixunssfsi>
    24d8:	68 94       	set
    24da:	b1 11       	cpse	r27, r1
    24dc:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_szero>
    24e0:	08 95       	ret

000024e2 <__fixunssfsi>:
    24e2:	0e 94 0d 13 	call	0x261a	; 0x261a <__fp_splitA>
    24e6:	88 f0       	brcs	.+34     	; 0x250a <__fixunssfsi+0x28>
    24e8:	9f 57       	subi	r25, 0x7F	; 127
    24ea:	98 f0       	brcs	.+38     	; 0x2512 <__fixunssfsi+0x30>
    24ec:	b9 2f       	mov	r27, r25
    24ee:	99 27       	eor	r25, r25
    24f0:	b7 51       	subi	r27, 0x17	; 23
    24f2:	b0 f0       	brcs	.+44     	; 0x2520 <__fixunssfsi+0x3e>
    24f4:	e1 f0       	breq	.+56     	; 0x252e <__fixunssfsi+0x4c>
    24f6:	66 0f       	add	r22, r22
    24f8:	77 1f       	adc	r23, r23
    24fa:	88 1f       	adc	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	1a f0       	brmi	.+6      	; 0x2506 <__fixunssfsi+0x24>
    2500:	ba 95       	dec	r27
    2502:	c9 f7       	brne	.-14     	; 0x24f6 <__fixunssfsi+0x14>
    2504:	14 c0       	rjmp	.+40     	; 0x252e <__fixunssfsi+0x4c>
    2506:	b1 30       	cpi	r27, 0x01	; 1
    2508:	91 f0       	breq	.+36     	; 0x252e <__fixunssfsi+0x4c>
    250a:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_zero>
    250e:	b1 e0       	ldi	r27, 0x01	; 1
    2510:	08 95       	ret
    2512:	0c 94 27 13 	jmp	0x264e	; 0x264e <__fp_zero>
    2516:	67 2f       	mov	r22, r23
    2518:	78 2f       	mov	r23, r24
    251a:	88 27       	eor	r24, r24
    251c:	b8 5f       	subi	r27, 0xF8	; 248
    251e:	39 f0       	breq	.+14     	; 0x252e <__fixunssfsi+0x4c>
    2520:	b9 3f       	cpi	r27, 0xF9	; 249
    2522:	cc f3       	brlt	.-14     	; 0x2516 <__fixunssfsi+0x34>
    2524:	86 95       	lsr	r24
    2526:	77 95       	ror	r23
    2528:	67 95       	ror	r22
    252a:	b3 95       	inc	r27
    252c:	d9 f7       	brne	.-10     	; 0x2524 <__fixunssfsi+0x42>
    252e:	3e f4       	brtc	.+14     	; 0x253e <__fixunssfsi+0x5c>
    2530:	90 95       	com	r25
    2532:	80 95       	com	r24
    2534:	70 95       	com	r23
    2536:	61 95       	neg	r22
    2538:	7f 4f       	sbci	r23, 0xFF	; 255
    253a:	8f 4f       	sbci	r24, 0xFF	; 255
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	08 95       	ret

00002540 <__floatunsisf>:
    2540:	e8 94       	clt
    2542:	09 c0       	rjmp	.+18     	; 0x2556 <__floatsisf+0x12>

00002544 <__floatsisf>:
    2544:	97 fb       	bst	r25, 7
    2546:	3e f4       	brtc	.+14     	; 0x2556 <__floatsisf+0x12>
    2548:	90 95       	com	r25
    254a:	80 95       	com	r24
    254c:	70 95       	com	r23
    254e:	61 95       	neg	r22
    2550:	7f 4f       	sbci	r23, 0xFF	; 255
    2552:	8f 4f       	sbci	r24, 0xFF	; 255
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	99 23       	and	r25, r25
    2558:	a9 f0       	breq	.+42     	; 0x2584 <__floatsisf+0x40>
    255a:	f9 2f       	mov	r31, r25
    255c:	96 e9       	ldi	r25, 0x96	; 150
    255e:	bb 27       	eor	r27, r27
    2560:	93 95       	inc	r25
    2562:	f6 95       	lsr	r31
    2564:	87 95       	ror	r24
    2566:	77 95       	ror	r23
    2568:	67 95       	ror	r22
    256a:	b7 95       	ror	r27
    256c:	f1 11       	cpse	r31, r1
    256e:	f8 cf       	rjmp	.-16     	; 0x2560 <__floatsisf+0x1c>
    2570:	fa f4       	brpl	.+62     	; 0x25b0 <__floatsisf+0x6c>
    2572:	bb 0f       	add	r27, r27
    2574:	11 f4       	brne	.+4      	; 0x257a <__floatsisf+0x36>
    2576:	60 ff       	sbrs	r22, 0
    2578:	1b c0       	rjmp	.+54     	; 0x25b0 <__floatsisf+0x6c>
    257a:	6f 5f       	subi	r22, 0xFF	; 255
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	8f 4f       	sbci	r24, 0xFF	; 255
    2580:	9f 4f       	sbci	r25, 0xFF	; 255
    2582:	16 c0       	rjmp	.+44     	; 0x25b0 <__floatsisf+0x6c>
    2584:	88 23       	and	r24, r24
    2586:	11 f0       	breq	.+4      	; 0x258c <__floatsisf+0x48>
    2588:	96 e9       	ldi	r25, 0x96	; 150
    258a:	11 c0       	rjmp	.+34     	; 0x25ae <__floatsisf+0x6a>
    258c:	77 23       	and	r23, r23
    258e:	21 f0       	breq	.+8      	; 0x2598 <__floatsisf+0x54>
    2590:	9e e8       	ldi	r25, 0x8E	; 142
    2592:	87 2f       	mov	r24, r23
    2594:	76 2f       	mov	r23, r22
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <__floatsisf+0x5e>
    2598:	66 23       	and	r22, r22
    259a:	71 f0       	breq	.+28     	; 0x25b8 <__floatsisf+0x74>
    259c:	96 e8       	ldi	r25, 0x86	; 134
    259e:	86 2f       	mov	r24, r22
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	2a f0       	brmi	.+10     	; 0x25b0 <__floatsisf+0x6c>
    25a6:	9a 95       	dec	r25
    25a8:	66 0f       	add	r22, r22
    25aa:	77 1f       	adc	r23, r23
    25ac:	88 1f       	adc	r24, r24
    25ae:	da f7       	brpl	.-10     	; 0x25a6 <__floatsisf+0x62>
    25b0:	88 0f       	add	r24, r24
    25b2:	96 95       	lsr	r25
    25b4:	87 95       	ror	r24
    25b6:	97 f9       	bld	r25, 7
    25b8:	08 95       	ret

000025ba <__fp_inf>:
    25ba:	97 f9       	bld	r25, 7
    25bc:	9f 67       	ori	r25, 0x7F	; 127
    25be:	80 e8       	ldi	r24, 0x80	; 128
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	08 95       	ret

000025c6 <__fp_nan>:
    25c6:	9f ef       	ldi	r25, 0xFF	; 255
    25c8:	80 ec       	ldi	r24, 0xC0	; 192
    25ca:	08 95       	ret

000025cc <__fp_pscA>:
    25cc:	00 24       	eor	r0, r0
    25ce:	0a 94       	dec	r0
    25d0:	16 16       	cp	r1, r22
    25d2:	17 06       	cpc	r1, r23
    25d4:	18 06       	cpc	r1, r24
    25d6:	09 06       	cpc	r0, r25
    25d8:	08 95       	ret

000025da <__fp_pscB>:
    25da:	00 24       	eor	r0, r0
    25dc:	0a 94       	dec	r0
    25de:	12 16       	cp	r1, r18
    25e0:	13 06       	cpc	r1, r19
    25e2:	14 06       	cpc	r1, r20
    25e4:	05 06       	cpc	r0, r21
    25e6:	08 95       	ret

000025e8 <__fp_round>:
    25e8:	09 2e       	mov	r0, r25
    25ea:	03 94       	inc	r0
    25ec:	00 0c       	add	r0, r0
    25ee:	11 f4       	brne	.+4      	; 0x25f4 <__fp_round+0xc>
    25f0:	88 23       	and	r24, r24
    25f2:	52 f0       	brmi	.+20     	; 0x2608 <__fp_round+0x20>
    25f4:	bb 0f       	add	r27, r27
    25f6:	40 f4       	brcc	.+16     	; 0x2608 <__fp_round+0x20>
    25f8:	bf 2b       	or	r27, r31
    25fa:	11 f4       	brne	.+4      	; 0x2600 <__fp_round+0x18>
    25fc:	60 ff       	sbrs	r22, 0
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <__fp_round+0x20>
    2600:	6f 5f       	subi	r22, 0xFF	; 255
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	8f 4f       	sbci	r24, 0xFF	; 255
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	08 95       	ret

0000260a <__fp_split3>:
    260a:	57 fd       	sbrc	r21, 7
    260c:	90 58       	subi	r25, 0x80	; 128
    260e:	44 0f       	add	r20, r20
    2610:	55 1f       	adc	r21, r21
    2612:	59 f0       	breq	.+22     	; 0x262a <__fp_splitA+0x10>
    2614:	5f 3f       	cpi	r21, 0xFF	; 255
    2616:	71 f0       	breq	.+28     	; 0x2634 <__fp_splitA+0x1a>
    2618:	47 95       	ror	r20

0000261a <__fp_splitA>:
    261a:	88 0f       	add	r24, r24
    261c:	97 fb       	bst	r25, 7
    261e:	99 1f       	adc	r25, r25
    2620:	61 f0       	breq	.+24     	; 0x263a <__fp_splitA+0x20>
    2622:	9f 3f       	cpi	r25, 0xFF	; 255
    2624:	79 f0       	breq	.+30     	; 0x2644 <__fp_splitA+0x2a>
    2626:	87 95       	ror	r24
    2628:	08 95       	ret
    262a:	12 16       	cp	r1, r18
    262c:	13 06       	cpc	r1, r19
    262e:	14 06       	cpc	r1, r20
    2630:	55 1f       	adc	r21, r21
    2632:	f2 cf       	rjmp	.-28     	; 0x2618 <__fp_split3+0xe>
    2634:	46 95       	lsr	r20
    2636:	f1 df       	rcall	.-30     	; 0x261a <__fp_splitA>
    2638:	08 c0       	rjmp	.+16     	; 0x264a <__fp_splitA+0x30>
    263a:	16 16       	cp	r1, r22
    263c:	17 06       	cpc	r1, r23
    263e:	18 06       	cpc	r1, r24
    2640:	99 1f       	adc	r25, r25
    2642:	f1 cf       	rjmp	.-30     	; 0x2626 <__fp_splitA+0xc>
    2644:	86 95       	lsr	r24
    2646:	71 05       	cpc	r23, r1
    2648:	61 05       	cpc	r22, r1
    264a:	08 94       	sec
    264c:	08 95       	ret

0000264e <__fp_zero>:
    264e:	e8 94       	clt

00002650 <__fp_szero>:
    2650:	bb 27       	eor	r27, r27
    2652:	66 27       	eor	r22, r22
    2654:	77 27       	eor	r23, r23
    2656:	cb 01       	movw	r24, r22
    2658:	97 f9       	bld	r25, 7
    265a:	08 95       	ret

0000265c <__mulsf3>:
    265c:	0e 94 41 13 	call	0x2682	; 0x2682 <__mulsf3x>
    2660:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__fp_round>
    2664:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fp_pscA>
    2668:	38 f0       	brcs	.+14     	; 0x2678 <__mulsf3+0x1c>
    266a:	0e 94 ed 12 	call	0x25da	; 0x25da <__fp_pscB>
    266e:	20 f0       	brcs	.+8      	; 0x2678 <__mulsf3+0x1c>
    2670:	95 23       	and	r25, r21
    2672:	11 f0       	breq	.+4      	; 0x2678 <__mulsf3+0x1c>
    2674:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__fp_inf>
    2678:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_nan>
    267c:	11 24       	eor	r1, r1
    267e:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_szero>

00002682 <__mulsf3x>:
    2682:	0e 94 05 13 	call	0x260a	; 0x260a <__fp_split3>
    2686:	70 f3       	brcs	.-36     	; 0x2664 <__mulsf3+0x8>

00002688 <__mulsf3_pse>:
    2688:	95 9f       	mul	r25, r21
    268a:	c1 f3       	breq	.-16     	; 0x267c <__mulsf3+0x20>
    268c:	95 0f       	add	r25, r21
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	55 1f       	adc	r21, r21
    2692:	62 9f       	mul	r22, r18
    2694:	f0 01       	movw	r30, r0
    2696:	72 9f       	mul	r23, r18
    2698:	bb 27       	eor	r27, r27
    269a:	f0 0d       	add	r31, r0
    269c:	b1 1d       	adc	r27, r1
    269e:	63 9f       	mul	r22, r19
    26a0:	aa 27       	eor	r26, r26
    26a2:	f0 0d       	add	r31, r0
    26a4:	b1 1d       	adc	r27, r1
    26a6:	aa 1f       	adc	r26, r26
    26a8:	64 9f       	mul	r22, r20
    26aa:	66 27       	eor	r22, r22
    26ac:	b0 0d       	add	r27, r0
    26ae:	a1 1d       	adc	r26, r1
    26b0:	66 1f       	adc	r22, r22
    26b2:	82 9f       	mul	r24, r18
    26b4:	22 27       	eor	r18, r18
    26b6:	b0 0d       	add	r27, r0
    26b8:	a1 1d       	adc	r26, r1
    26ba:	62 1f       	adc	r22, r18
    26bc:	73 9f       	mul	r23, r19
    26be:	b0 0d       	add	r27, r0
    26c0:	a1 1d       	adc	r26, r1
    26c2:	62 1f       	adc	r22, r18
    26c4:	83 9f       	mul	r24, r19
    26c6:	a0 0d       	add	r26, r0
    26c8:	61 1d       	adc	r22, r1
    26ca:	22 1f       	adc	r18, r18
    26cc:	74 9f       	mul	r23, r20
    26ce:	33 27       	eor	r19, r19
    26d0:	a0 0d       	add	r26, r0
    26d2:	61 1d       	adc	r22, r1
    26d4:	23 1f       	adc	r18, r19
    26d6:	84 9f       	mul	r24, r20
    26d8:	60 0d       	add	r22, r0
    26da:	21 1d       	adc	r18, r1
    26dc:	82 2f       	mov	r24, r18
    26de:	76 2f       	mov	r23, r22
    26e0:	6a 2f       	mov	r22, r26
    26e2:	11 24       	eor	r1, r1
    26e4:	9f 57       	subi	r25, 0x7F	; 127
    26e6:	50 40       	sbci	r21, 0x00	; 0
    26e8:	9a f0       	brmi	.+38     	; 0x2710 <__mulsf3_pse+0x88>
    26ea:	f1 f0       	breq	.+60     	; 0x2728 <__mulsf3_pse+0xa0>
    26ec:	88 23       	and	r24, r24
    26ee:	4a f0       	brmi	.+18     	; 0x2702 <__mulsf3_pse+0x7a>
    26f0:	ee 0f       	add	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	bb 1f       	adc	r27, r27
    26f6:	66 1f       	adc	r22, r22
    26f8:	77 1f       	adc	r23, r23
    26fa:	88 1f       	adc	r24, r24
    26fc:	91 50       	subi	r25, 0x01	; 1
    26fe:	50 40       	sbci	r21, 0x00	; 0
    2700:	a9 f7       	brne	.-22     	; 0x26ec <__mulsf3_pse+0x64>
    2702:	9e 3f       	cpi	r25, 0xFE	; 254
    2704:	51 05       	cpc	r21, r1
    2706:	80 f0       	brcs	.+32     	; 0x2728 <__mulsf3_pse+0xa0>
    2708:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__fp_inf>
    270c:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_szero>
    2710:	5f 3f       	cpi	r21, 0xFF	; 255
    2712:	e4 f3       	brlt	.-8      	; 0x270c <__mulsf3_pse+0x84>
    2714:	98 3e       	cpi	r25, 0xE8	; 232
    2716:	d4 f3       	brlt	.-12     	; 0x270c <__mulsf3_pse+0x84>
    2718:	86 95       	lsr	r24
    271a:	77 95       	ror	r23
    271c:	67 95       	ror	r22
    271e:	b7 95       	ror	r27
    2720:	f7 95       	ror	r31
    2722:	e7 95       	ror	r30
    2724:	9f 5f       	subi	r25, 0xFF	; 255
    2726:	c1 f7       	brne	.-16     	; 0x2718 <__mulsf3_pse+0x90>
    2728:	fe 2b       	or	r31, r30
    272a:	88 0f       	add	r24, r24
    272c:	91 1d       	adc	r25, r1
    272e:	96 95       	lsr	r25
    2730:	87 95       	ror	r24
    2732:	97 f9       	bld	r25, 7
    2734:	08 95       	ret

00002736 <__divmodsi4>:
    2736:	05 2e       	mov	r0, r21
    2738:	97 fb       	bst	r25, 7
    273a:	1e f4       	brtc	.+6      	; 0x2742 <__divmodsi4+0xc>
    273c:	00 94       	com	r0
    273e:	0e 94 b2 13 	call	0x2764	; 0x2764 <__negsi2>
    2742:	57 fd       	sbrc	r21, 7
    2744:	07 d0       	rcall	.+14     	; 0x2754 <__divmodsi4_neg2>
    2746:	0e 94 c5 13 	call	0x278a	; 0x278a <__udivmodsi4>
    274a:	07 fc       	sbrc	r0, 7
    274c:	03 d0       	rcall	.+6      	; 0x2754 <__divmodsi4_neg2>
    274e:	4e f4       	brtc	.+18     	; 0x2762 <__divmodsi4_exit>
    2750:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__negsi2>

00002754 <__divmodsi4_neg2>:
    2754:	50 95       	com	r21
    2756:	40 95       	com	r20
    2758:	30 95       	com	r19
    275a:	21 95       	neg	r18
    275c:	3f 4f       	sbci	r19, 0xFF	; 255
    275e:	4f 4f       	sbci	r20, 0xFF	; 255
    2760:	5f 4f       	sbci	r21, 0xFF	; 255

00002762 <__divmodsi4_exit>:
    2762:	08 95       	ret

00002764 <__negsi2>:
    2764:	90 95       	com	r25
    2766:	80 95       	com	r24
    2768:	70 95       	com	r23
    276a:	61 95       	neg	r22
    276c:	7f 4f       	sbci	r23, 0xFF	; 255
    276e:	8f 4f       	sbci	r24, 0xFF	; 255
    2770:	9f 4f       	sbci	r25, 0xFF	; 255
    2772:	08 95       	ret

00002774 <__muluhisi3>:
    2774:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__umulhisi3>
    2778:	a5 9f       	mul	r26, r21
    277a:	90 0d       	add	r25, r0
    277c:	b4 9f       	mul	r27, r20
    277e:	90 0d       	add	r25, r0
    2780:	a4 9f       	mul	r26, r20
    2782:	80 0d       	add	r24, r0
    2784:	91 1d       	adc	r25, r1
    2786:	11 24       	eor	r1, r1
    2788:	08 95       	ret

0000278a <__udivmodsi4>:
    278a:	a1 e2       	ldi	r26, 0x21	; 33
    278c:	1a 2e       	mov	r1, r26
    278e:	aa 1b       	sub	r26, r26
    2790:	bb 1b       	sub	r27, r27
    2792:	fd 01       	movw	r30, r26
    2794:	0d c0       	rjmp	.+26     	; 0x27b0 <__udivmodsi4_ep>

00002796 <__udivmodsi4_loop>:
    2796:	aa 1f       	adc	r26, r26
    2798:	bb 1f       	adc	r27, r27
    279a:	ee 1f       	adc	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	a2 17       	cp	r26, r18
    27a0:	b3 07       	cpc	r27, r19
    27a2:	e4 07       	cpc	r30, r20
    27a4:	f5 07       	cpc	r31, r21
    27a6:	20 f0       	brcs	.+8      	; 0x27b0 <__udivmodsi4_ep>
    27a8:	a2 1b       	sub	r26, r18
    27aa:	b3 0b       	sbc	r27, r19
    27ac:	e4 0b       	sbc	r30, r20
    27ae:	f5 0b       	sbc	r31, r21

000027b0 <__udivmodsi4_ep>:
    27b0:	66 1f       	adc	r22, r22
    27b2:	77 1f       	adc	r23, r23
    27b4:	88 1f       	adc	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	1a 94       	dec	r1
    27ba:	69 f7       	brne	.-38     	; 0x2796 <__udivmodsi4_loop>
    27bc:	60 95       	com	r22
    27be:	70 95       	com	r23
    27c0:	80 95       	com	r24
    27c2:	90 95       	com	r25
    27c4:	9b 01       	movw	r18, r22
    27c6:	ac 01       	movw	r20, r24
    27c8:	bd 01       	movw	r22, r26
    27ca:	cf 01       	movw	r24, r30
    27cc:	08 95       	ret

000027ce <__umulhisi3>:
    27ce:	a2 9f       	mul	r26, r18
    27d0:	b0 01       	movw	r22, r0
    27d2:	b3 9f       	mul	r27, r19
    27d4:	c0 01       	movw	r24, r0
    27d6:	a3 9f       	mul	r26, r19
    27d8:	70 0d       	add	r23, r0
    27da:	81 1d       	adc	r24, r1
    27dc:	11 24       	eor	r1, r1
    27de:	91 1d       	adc	r25, r1
    27e0:	b2 9f       	mul	r27, r18
    27e2:	70 0d       	add	r23, r0
    27e4:	81 1d       	adc	r24, r1
    27e6:	11 24       	eor	r1, r1
    27e8:	91 1d       	adc	r25, r1
    27ea:	08 95       	ret

000027ec <__itoa_ncheck>:
    27ec:	bb 27       	eor	r27, r27
    27ee:	4a 30       	cpi	r20, 0x0A	; 10
    27f0:	31 f4       	brne	.+12     	; 0x27fe <__itoa_ncheck+0x12>
    27f2:	99 23       	and	r25, r25
    27f4:	22 f4       	brpl	.+8      	; 0x27fe <__itoa_ncheck+0x12>
    27f6:	bd e2       	ldi	r27, 0x2D	; 45
    27f8:	90 95       	com	r25
    27fa:	81 95       	neg	r24
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__utoa_common>

00002802 <__utoa_ncheck>:
    2802:	bb 27       	eor	r27, r27

00002804 <__utoa_common>:
    2804:	fb 01       	movw	r30, r22
    2806:	55 27       	eor	r21, r21
    2808:	aa 27       	eor	r26, r26
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	aa 1f       	adc	r26, r26
    2810:	a4 17       	cp	r26, r20
    2812:	10 f0       	brcs	.+4      	; 0x2818 <__utoa_common+0x14>
    2814:	a4 1b       	sub	r26, r20
    2816:	83 95       	inc	r24
    2818:	50 51       	subi	r21, 0x10	; 16
    281a:	b9 f7       	brne	.-18     	; 0x280a <__utoa_common+0x6>
    281c:	a0 5d       	subi	r26, 0xD0	; 208
    281e:	aa 33       	cpi	r26, 0x3A	; 58
    2820:	08 f0       	brcs	.+2      	; 0x2824 <__utoa_common+0x20>
    2822:	a9 5d       	subi	r26, 0xD9	; 217
    2824:	a1 93       	st	Z+, r26
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	79 f7       	brne	.-34     	; 0x2808 <__utoa_common+0x4>
    282a:	b1 11       	cpse	r27, r1
    282c:	b1 93       	st	Z+, r27
    282e:	11 92       	st	Z+, r1
    2830:	cb 01       	movw	r24, r22
    2832:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <strrev>

00002836 <printf>:
    2836:	a0 e0       	ldi	r26, 0x00	; 0
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e1 e2       	ldi	r30, 0x21	; 33
    283c:	f4 e1       	ldi	r31, 0x14	; 20
    283e:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x20>
    2842:	ae 01       	movw	r20, r28
    2844:	4b 5f       	subi	r20, 0xFB	; 251
    2846:	5f 4f       	sbci	r21, 0xFF	; 255
    2848:	fa 01       	movw	r30, r20
    284a:	61 91       	ld	r22, Z+
    284c:	71 91       	ld	r23, Z+
    284e:	af 01       	movw	r20, r30
    2850:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <__iob+0x2>
    2854:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <__iob+0x3>
    2858:	0e 94 61 14 	call	0x28c2	; 0x28c2 <vfprintf>
    285c:	e2 e0       	ldi	r30, 0x02	; 2
    285e:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x20>

00002862 <puts>:
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <__iob+0x2>
    286e:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <__iob+0x3>
    2872:	23 81       	ldd	r18, Z+3	; 0x03
    2874:	21 ff       	sbrs	r18, 1
    2876:	1b c0       	rjmp	.+54     	; 0x28ae <puts+0x4c>
    2878:	8c 01       	movw	r16, r24
    287a:	d0 e0       	ldi	r29, 0x00	; 0
    287c:	c0 e0       	ldi	r28, 0x00	; 0
    287e:	f8 01       	movw	r30, r16
    2880:	81 91       	ld	r24, Z+
    2882:	8f 01       	movw	r16, r30
    2884:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <__iob+0x2>
    2888:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <__iob+0x3>
    288c:	db 01       	movw	r26, r22
    288e:	18 96       	adiw	r26, 0x08	; 8
    2890:	ed 91       	ld	r30, X+
    2892:	fc 91       	ld	r31, X
    2894:	19 97       	sbiw	r26, 0x09	; 9
    2896:	88 23       	and	r24, r24
    2898:	31 f0       	breq	.+12     	; 0x28a6 <puts+0x44>
    289a:	09 95       	icall
    289c:	89 2b       	or	r24, r25
    289e:	79 f3       	breq	.-34     	; 0x287e <puts+0x1c>
    28a0:	df ef       	ldi	r29, 0xFF	; 255
    28a2:	cf ef       	ldi	r28, 0xFF	; 255
    28a4:	ec cf       	rjmp	.-40     	; 0x287e <puts+0x1c>
    28a6:	8a e0       	ldi	r24, 0x0A	; 10
    28a8:	09 95       	icall
    28aa:	89 2b       	or	r24, r25
    28ac:	19 f0       	breq	.+6      	; 0x28b4 <puts+0x52>
    28ae:	8f ef       	ldi	r24, 0xFF	; 255
    28b0:	9f ef       	ldi	r25, 0xFF	; 255
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <puts+0x56>
    28b4:	8d 2f       	mov	r24, r29
    28b6:	9c 2f       	mov	r25, r28
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <vfprintf>:
    28c2:	ac e0       	ldi	r26, 0x0C	; 12
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e7 e6       	ldi	r30, 0x67	; 103
    28c8:	f4 e1       	ldi	r31, 0x14	; 20
    28ca:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__>
    28ce:	6c 01       	movw	r12, r24
    28d0:	7b 01       	movw	r14, r22
    28d2:	8a 01       	movw	r16, r20
    28d4:	fc 01       	movw	r30, r24
    28d6:	17 82       	std	Z+7, r1	; 0x07
    28d8:	16 82       	std	Z+6, r1	; 0x06
    28da:	83 81       	ldd	r24, Z+3	; 0x03
    28dc:	81 ff       	sbrs	r24, 1
    28de:	be c1       	rjmp	.+892    	; 0x2c5c <vfprintf+0x39a>
    28e0:	ce 01       	movw	r24, r28
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	4c 01       	movw	r8, r24
    28e6:	f6 01       	movw	r30, r12
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	f7 01       	movw	r30, r14
    28ec:	93 fd       	sbrc	r25, 3
    28ee:	85 91       	lpm	r24, Z+
    28f0:	93 ff       	sbrs	r25, 3
    28f2:	81 91       	ld	r24, Z+
    28f4:	7f 01       	movw	r14, r30
    28f6:	88 23       	and	r24, r24
    28f8:	09 f4       	brne	.+2      	; 0x28fc <vfprintf+0x3a>
    28fa:	ac c1       	rjmp	.+856    	; 0x2c54 <vfprintf+0x392>
    28fc:	85 32       	cpi	r24, 0x25	; 37
    28fe:	39 f4       	brne	.+14     	; 0x290e <vfprintf+0x4c>
    2900:	93 fd       	sbrc	r25, 3
    2902:	85 91       	lpm	r24, Z+
    2904:	93 ff       	sbrs	r25, 3
    2906:	81 91       	ld	r24, Z+
    2908:	7f 01       	movw	r14, r30
    290a:	85 32       	cpi	r24, 0x25	; 37
    290c:	29 f4       	brne	.+10     	; 0x2918 <vfprintf+0x56>
    290e:	b6 01       	movw	r22, r12
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2916:	e7 cf       	rjmp	.-50     	; 0x28e6 <vfprintf+0x24>
    2918:	51 2c       	mov	r5, r1
    291a:	31 2c       	mov	r3, r1
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	20 32       	cpi	r18, 0x20	; 32
    2920:	a0 f4       	brcc	.+40     	; 0x294a <vfprintf+0x88>
    2922:	8b 32       	cpi	r24, 0x2B	; 43
    2924:	69 f0       	breq	.+26     	; 0x2940 <vfprintf+0x7e>
    2926:	30 f4       	brcc	.+12     	; 0x2934 <vfprintf+0x72>
    2928:	80 32       	cpi	r24, 0x20	; 32
    292a:	59 f0       	breq	.+22     	; 0x2942 <vfprintf+0x80>
    292c:	83 32       	cpi	r24, 0x23	; 35
    292e:	69 f4       	brne	.+26     	; 0x294a <vfprintf+0x88>
    2930:	20 61       	ori	r18, 0x10	; 16
    2932:	2c c0       	rjmp	.+88     	; 0x298c <vfprintf+0xca>
    2934:	8d 32       	cpi	r24, 0x2D	; 45
    2936:	39 f0       	breq	.+14     	; 0x2946 <vfprintf+0x84>
    2938:	80 33       	cpi	r24, 0x30	; 48
    293a:	39 f4       	brne	.+14     	; 0x294a <vfprintf+0x88>
    293c:	21 60       	ori	r18, 0x01	; 1
    293e:	26 c0       	rjmp	.+76     	; 0x298c <vfprintf+0xca>
    2940:	22 60       	ori	r18, 0x02	; 2
    2942:	24 60       	ori	r18, 0x04	; 4
    2944:	23 c0       	rjmp	.+70     	; 0x298c <vfprintf+0xca>
    2946:	28 60       	ori	r18, 0x08	; 8
    2948:	21 c0       	rjmp	.+66     	; 0x298c <vfprintf+0xca>
    294a:	27 fd       	sbrc	r18, 7
    294c:	27 c0       	rjmp	.+78     	; 0x299c <vfprintf+0xda>
    294e:	30 ed       	ldi	r19, 0xD0	; 208
    2950:	38 0f       	add	r19, r24
    2952:	3a 30       	cpi	r19, 0x0A	; 10
    2954:	78 f4       	brcc	.+30     	; 0x2974 <vfprintf+0xb2>
    2956:	26 ff       	sbrs	r18, 6
    2958:	06 c0       	rjmp	.+12     	; 0x2966 <vfprintf+0xa4>
    295a:	fa e0       	ldi	r31, 0x0A	; 10
    295c:	5f 9e       	mul	r5, r31
    295e:	30 0d       	add	r19, r0
    2960:	11 24       	eor	r1, r1
    2962:	53 2e       	mov	r5, r19
    2964:	13 c0       	rjmp	.+38     	; 0x298c <vfprintf+0xca>
    2966:	8a e0       	ldi	r24, 0x0A	; 10
    2968:	38 9e       	mul	r3, r24
    296a:	30 0d       	add	r19, r0
    296c:	11 24       	eor	r1, r1
    296e:	33 2e       	mov	r3, r19
    2970:	20 62       	ori	r18, 0x20	; 32
    2972:	0c c0       	rjmp	.+24     	; 0x298c <vfprintf+0xca>
    2974:	8e 32       	cpi	r24, 0x2E	; 46
    2976:	21 f4       	brne	.+8      	; 0x2980 <vfprintf+0xbe>
    2978:	26 fd       	sbrc	r18, 6
    297a:	6c c1       	rjmp	.+728    	; 0x2c54 <vfprintf+0x392>
    297c:	20 64       	ori	r18, 0x40	; 64
    297e:	06 c0       	rjmp	.+12     	; 0x298c <vfprintf+0xca>
    2980:	8c 36       	cpi	r24, 0x6C	; 108
    2982:	11 f4       	brne	.+4      	; 0x2988 <vfprintf+0xc6>
    2984:	20 68       	ori	r18, 0x80	; 128
    2986:	02 c0       	rjmp	.+4      	; 0x298c <vfprintf+0xca>
    2988:	88 36       	cpi	r24, 0x68	; 104
    298a:	41 f4       	brne	.+16     	; 0x299c <vfprintf+0xda>
    298c:	f7 01       	movw	r30, r14
    298e:	93 fd       	sbrc	r25, 3
    2990:	85 91       	lpm	r24, Z+
    2992:	93 ff       	sbrs	r25, 3
    2994:	81 91       	ld	r24, Z+
    2996:	7f 01       	movw	r14, r30
    2998:	81 11       	cpse	r24, r1
    299a:	c1 cf       	rjmp	.-126    	; 0x291e <vfprintf+0x5c>
    299c:	98 2f       	mov	r25, r24
    299e:	9f 7d       	andi	r25, 0xDF	; 223
    29a0:	95 54       	subi	r25, 0x45	; 69
    29a2:	93 30       	cpi	r25, 0x03	; 3
    29a4:	28 f4       	brcc	.+10     	; 0x29b0 <vfprintf+0xee>
    29a6:	0c 5f       	subi	r16, 0xFC	; 252
    29a8:	1f 4f       	sbci	r17, 0xFF	; 255
    29aa:	9f e3       	ldi	r25, 0x3F	; 63
    29ac:	99 83       	std	Y+1, r25	; 0x01
    29ae:	0d c0       	rjmp	.+26     	; 0x29ca <vfprintf+0x108>
    29b0:	83 36       	cpi	r24, 0x63	; 99
    29b2:	31 f0       	breq	.+12     	; 0x29c0 <vfprintf+0xfe>
    29b4:	83 37       	cpi	r24, 0x73	; 115
    29b6:	71 f0       	breq	.+28     	; 0x29d4 <vfprintf+0x112>
    29b8:	83 35       	cpi	r24, 0x53	; 83
    29ba:	09 f0       	breq	.+2      	; 0x29be <vfprintf+0xfc>
    29bc:	5b c0       	rjmp	.+182    	; 0x2a74 <vfprintf+0x1b2>
    29be:	22 c0       	rjmp	.+68     	; 0x2a04 <vfprintf+0x142>
    29c0:	f8 01       	movw	r30, r16
    29c2:	80 81       	ld	r24, Z
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	0e 5f       	subi	r16, 0xFE	; 254
    29c8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ca:	44 24       	eor	r4, r4
    29cc:	43 94       	inc	r4
    29ce:	51 2c       	mov	r5, r1
    29d0:	54 01       	movw	r10, r8
    29d2:	15 c0       	rjmp	.+42     	; 0x29fe <vfprintf+0x13c>
    29d4:	38 01       	movw	r6, r16
    29d6:	f2 e0       	ldi	r31, 0x02	; 2
    29d8:	6f 0e       	add	r6, r31
    29da:	71 1c       	adc	r7, r1
    29dc:	f8 01       	movw	r30, r16
    29de:	a0 80       	ld	r10, Z
    29e0:	b1 80       	ldd	r11, Z+1	; 0x01
    29e2:	26 ff       	sbrs	r18, 6
    29e4:	03 c0       	rjmp	.+6      	; 0x29ec <vfprintf+0x12a>
    29e6:	65 2d       	mov	r22, r5
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <vfprintf+0x12e>
    29ec:	6f ef       	ldi	r22, 0xFF	; 255
    29ee:	7f ef       	ldi	r23, 0xFF	; 255
    29f0:	c5 01       	movw	r24, r10
    29f2:	2c 87       	std	Y+12, r18	; 0x0c
    29f4:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <strnlen>
    29f8:	2c 01       	movw	r4, r24
    29fa:	83 01       	movw	r16, r6
    29fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    29fe:	2f 77       	andi	r18, 0x7F	; 127
    2a00:	22 2e       	mov	r2, r18
    2a02:	17 c0       	rjmp	.+46     	; 0x2a32 <vfprintf+0x170>
    2a04:	38 01       	movw	r6, r16
    2a06:	f2 e0       	ldi	r31, 0x02	; 2
    2a08:	6f 0e       	add	r6, r31
    2a0a:	71 1c       	adc	r7, r1
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	a0 80       	ld	r10, Z
    2a10:	b1 80       	ldd	r11, Z+1	; 0x01
    2a12:	26 ff       	sbrs	r18, 6
    2a14:	03 c0       	rjmp	.+6      	; 0x2a1c <vfprintf+0x15a>
    2a16:	65 2d       	mov	r22, r5
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <vfprintf+0x15e>
    2a1c:	6f ef       	ldi	r22, 0xFF	; 255
    2a1e:	7f ef       	ldi	r23, 0xFF	; 255
    2a20:	c5 01       	movw	r24, r10
    2a22:	2c 87       	std	Y+12, r18	; 0x0c
    2a24:	0e 94 34 16 	call	0x2c68	; 0x2c68 <strnlen_P>
    2a28:	2c 01       	movw	r4, r24
    2a2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a2c:	20 68       	ori	r18, 0x80	; 128
    2a2e:	22 2e       	mov	r2, r18
    2a30:	83 01       	movw	r16, r6
    2a32:	23 fc       	sbrc	r2, 3
    2a34:	1b c0       	rjmp	.+54     	; 0x2a6c <vfprintf+0x1aa>
    2a36:	83 2d       	mov	r24, r3
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	48 16       	cp	r4, r24
    2a3c:	59 06       	cpc	r5, r25
    2a3e:	b0 f4       	brcc	.+44     	; 0x2a6c <vfprintf+0x1aa>
    2a40:	b6 01       	movw	r22, r12
    2a42:	80 e2       	ldi	r24, 0x20	; 32
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2a4a:	3a 94       	dec	r3
    2a4c:	f4 cf       	rjmp	.-24     	; 0x2a36 <vfprintf+0x174>
    2a4e:	f5 01       	movw	r30, r10
    2a50:	27 fc       	sbrc	r2, 7
    2a52:	85 91       	lpm	r24, Z+
    2a54:	27 fe       	sbrs	r2, 7
    2a56:	81 91       	ld	r24, Z+
    2a58:	5f 01       	movw	r10, r30
    2a5a:	b6 01       	movw	r22, r12
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2a62:	31 10       	cpse	r3, r1
    2a64:	3a 94       	dec	r3
    2a66:	f1 e0       	ldi	r31, 0x01	; 1
    2a68:	4f 1a       	sub	r4, r31
    2a6a:	51 08       	sbc	r5, r1
    2a6c:	41 14       	cp	r4, r1
    2a6e:	51 04       	cpc	r5, r1
    2a70:	71 f7       	brne	.-36     	; 0x2a4e <vfprintf+0x18c>
    2a72:	e6 c0       	rjmp	.+460    	; 0x2c40 <vfprintf+0x37e>
    2a74:	84 36       	cpi	r24, 0x64	; 100
    2a76:	11 f0       	breq	.+4      	; 0x2a7c <vfprintf+0x1ba>
    2a78:	89 36       	cpi	r24, 0x69	; 105
    2a7a:	39 f5       	brne	.+78     	; 0x2aca <vfprintf+0x208>
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	27 ff       	sbrs	r18, 7
    2a80:	07 c0       	rjmp	.+14     	; 0x2a90 <vfprintf+0x1ce>
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	0c 5f       	subi	r16, 0xFC	; 252
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	08 c0       	rjmp	.+16     	; 0x2aa0 <vfprintf+0x1de>
    2a90:	60 81       	ld	r22, Z
    2a92:	71 81       	ldd	r23, Z+1	; 0x01
    2a94:	07 2e       	mov	r0, r23
    2a96:	00 0c       	add	r0, r0
    2a98:	88 0b       	sbc	r24, r24
    2a9a:	99 0b       	sbc	r25, r25
    2a9c:	0e 5f       	subi	r16, 0xFE	; 254
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	2f 76       	andi	r18, 0x6F	; 111
    2aa2:	72 2e       	mov	r7, r18
    2aa4:	97 ff       	sbrs	r25, 7
    2aa6:	09 c0       	rjmp	.+18     	; 0x2aba <vfprintf+0x1f8>
    2aa8:	90 95       	com	r25
    2aaa:	80 95       	com	r24
    2aac:	70 95       	com	r23
    2aae:	61 95       	neg	r22
    2ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab6:	20 68       	ori	r18, 0x80	; 128
    2ab8:	72 2e       	mov	r7, r18
    2aba:	2a e0       	ldi	r18, 0x0A	; 10
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	a4 01       	movw	r20, r8
    2ac0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__ultoa_invert>
    2ac4:	a8 2e       	mov	r10, r24
    2ac6:	a8 18       	sub	r10, r8
    2ac8:	44 c0       	rjmp	.+136    	; 0x2b52 <vfprintf+0x290>
    2aca:	85 37       	cpi	r24, 0x75	; 117
    2acc:	29 f4       	brne	.+10     	; 0x2ad8 <vfprintf+0x216>
    2ace:	2f 7e       	andi	r18, 0xEF	; 239
    2ad0:	b2 2e       	mov	r11, r18
    2ad2:	2a e0       	ldi	r18, 0x0A	; 10
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	25 c0       	rjmp	.+74     	; 0x2b22 <vfprintf+0x260>
    2ad8:	f2 2f       	mov	r31, r18
    2ada:	f9 7f       	andi	r31, 0xF9	; 249
    2adc:	bf 2e       	mov	r11, r31
    2ade:	8f 36       	cpi	r24, 0x6F	; 111
    2ae0:	c1 f0       	breq	.+48     	; 0x2b12 <vfprintf+0x250>
    2ae2:	18 f4       	brcc	.+6      	; 0x2aea <vfprintf+0x228>
    2ae4:	88 35       	cpi	r24, 0x58	; 88
    2ae6:	79 f0       	breq	.+30     	; 0x2b06 <vfprintf+0x244>
    2ae8:	b5 c0       	rjmp	.+362    	; 0x2c54 <vfprintf+0x392>
    2aea:	80 37       	cpi	r24, 0x70	; 112
    2aec:	19 f0       	breq	.+6      	; 0x2af4 <vfprintf+0x232>
    2aee:	88 37       	cpi	r24, 0x78	; 120
    2af0:	21 f0       	breq	.+8      	; 0x2afa <vfprintf+0x238>
    2af2:	b0 c0       	rjmp	.+352    	; 0x2c54 <vfprintf+0x392>
    2af4:	2f 2f       	mov	r18, r31
    2af6:	20 61       	ori	r18, 0x10	; 16
    2af8:	b2 2e       	mov	r11, r18
    2afa:	b4 fe       	sbrs	r11, 4
    2afc:	0d c0       	rjmp	.+26     	; 0x2b18 <vfprintf+0x256>
    2afe:	8b 2d       	mov	r24, r11
    2b00:	84 60       	ori	r24, 0x04	; 4
    2b02:	b8 2e       	mov	r11, r24
    2b04:	09 c0       	rjmp	.+18     	; 0x2b18 <vfprintf+0x256>
    2b06:	24 ff       	sbrs	r18, 4
    2b08:	0a c0       	rjmp	.+20     	; 0x2b1e <vfprintf+0x25c>
    2b0a:	9f 2f       	mov	r25, r31
    2b0c:	96 60       	ori	r25, 0x06	; 6
    2b0e:	b9 2e       	mov	r11, r25
    2b10:	06 c0       	rjmp	.+12     	; 0x2b1e <vfprintf+0x25c>
    2b12:	28 e0       	ldi	r18, 0x08	; 8
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	05 c0       	rjmp	.+10     	; 0x2b22 <vfprintf+0x260>
    2b18:	20 e1       	ldi	r18, 0x10	; 16
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <vfprintf+0x260>
    2b1e:	20 e1       	ldi	r18, 0x10	; 16
    2b20:	32 e0       	ldi	r19, 0x02	; 2
    2b22:	f8 01       	movw	r30, r16
    2b24:	b7 fe       	sbrs	r11, 7
    2b26:	07 c0       	rjmp	.+14     	; 0x2b36 <vfprintf+0x274>
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	0c 5f       	subi	r16, 0xFC	; 252
    2b32:	1f 4f       	sbci	r17, 0xFF	; 255
    2b34:	06 c0       	rjmp	.+12     	; 0x2b42 <vfprintf+0x280>
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 5f       	subi	r16, 0xFE	; 254
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
    2b42:	a4 01       	movw	r20, r8
    2b44:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__ultoa_invert>
    2b48:	a8 2e       	mov	r10, r24
    2b4a:	a8 18       	sub	r10, r8
    2b4c:	fb 2d       	mov	r31, r11
    2b4e:	ff 77       	andi	r31, 0x7F	; 127
    2b50:	7f 2e       	mov	r7, r31
    2b52:	76 fe       	sbrs	r7, 6
    2b54:	0b c0       	rjmp	.+22     	; 0x2b6c <vfprintf+0x2aa>
    2b56:	37 2d       	mov	r19, r7
    2b58:	3e 7f       	andi	r19, 0xFE	; 254
    2b5a:	a5 14       	cp	r10, r5
    2b5c:	50 f4       	brcc	.+20     	; 0x2b72 <vfprintf+0x2b0>
    2b5e:	74 fe       	sbrs	r7, 4
    2b60:	0a c0       	rjmp	.+20     	; 0x2b76 <vfprintf+0x2b4>
    2b62:	72 fc       	sbrc	r7, 2
    2b64:	08 c0       	rjmp	.+16     	; 0x2b76 <vfprintf+0x2b4>
    2b66:	37 2d       	mov	r19, r7
    2b68:	3e 7e       	andi	r19, 0xEE	; 238
    2b6a:	05 c0       	rjmp	.+10     	; 0x2b76 <vfprintf+0x2b4>
    2b6c:	ba 2c       	mov	r11, r10
    2b6e:	37 2d       	mov	r19, r7
    2b70:	03 c0       	rjmp	.+6      	; 0x2b78 <vfprintf+0x2b6>
    2b72:	ba 2c       	mov	r11, r10
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <vfprintf+0x2b6>
    2b76:	b5 2c       	mov	r11, r5
    2b78:	34 ff       	sbrs	r19, 4
    2b7a:	0d c0       	rjmp	.+26     	; 0x2b96 <vfprintf+0x2d4>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ea 0d       	add	r30, r10
    2b80:	f1 1d       	adc	r31, r1
    2b82:	80 81       	ld	r24, Z
    2b84:	80 33       	cpi	r24, 0x30	; 48
    2b86:	11 f4       	brne	.+4      	; 0x2b8c <vfprintf+0x2ca>
    2b88:	39 7e       	andi	r19, 0xE9	; 233
    2b8a:	09 c0       	rjmp	.+18     	; 0x2b9e <vfprintf+0x2dc>
    2b8c:	32 ff       	sbrs	r19, 2
    2b8e:	06 c0       	rjmp	.+12     	; 0x2b9c <vfprintf+0x2da>
    2b90:	b3 94       	inc	r11
    2b92:	b3 94       	inc	r11
    2b94:	04 c0       	rjmp	.+8      	; 0x2b9e <vfprintf+0x2dc>
    2b96:	83 2f       	mov	r24, r19
    2b98:	86 78       	andi	r24, 0x86	; 134
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <vfprintf+0x2dc>
    2b9c:	b3 94       	inc	r11
    2b9e:	33 fd       	sbrc	r19, 3
    2ba0:	13 c0       	rjmp	.+38     	; 0x2bc8 <vfprintf+0x306>
    2ba2:	30 ff       	sbrs	r19, 0
    2ba4:	06 c0       	rjmp	.+12     	; 0x2bb2 <vfprintf+0x2f0>
    2ba6:	b3 14       	cp	r11, r3
    2ba8:	98 f4       	brcc	.+38     	; 0x2bd0 <vfprintf+0x30e>
    2baa:	3a 0c       	add	r3, r10
    2bac:	53 2c       	mov	r5, r3
    2bae:	5b 18       	sub	r5, r11
    2bb0:	10 c0       	rjmp	.+32     	; 0x2bd2 <vfprintf+0x310>
    2bb2:	b3 14       	cp	r11, r3
    2bb4:	70 f4       	brcc	.+28     	; 0x2bd2 <vfprintf+0x310>
    2bb6:	b6 01       	movw	r22, r12
    2bb8:	80 e2       	ldi	r24, 0x20	; 32
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	3c 87       	std	Y+12, r19	; 0x0c
    2bbe:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2bc2:	b3 94       	inc	r11
    2bc4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bc6:	f5 cf       	rjmp	.-22     	; 0x2bb2 <vfprintf+0x2f0>
    2bc8:	b3 14       	cp	r11, r3
    2bca:	18 f4       	brcc	.+6      	; 0x2bd2 <vfprintf+0x310>
    2bcc:	3b 18       	sub	r3, r11
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <vfprintf+0x312>
    2bd0:	5a 2c       	mov	r5, r10
    2bd2:	31 2c       	mov	r3, r1
    2bd4:	34 ff       	sbrs	r19, 4
    2bd6:	12 c0       	rjmp	.+36     	; 0x2bfc <vfprintf+0x33a>
    2bd8:	b6 01       	movw	r22, r12
    2bda:	80 e3       	ldi	r24, 0x30	; 48
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	3c 87       	std	Y+12, r19	; 0x0c
    2be0:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2be4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2be6:	32 ff       	sbrs	r19, 2
    2be8:	17 c0       	rjmp	.+46     	; 0x2c18 <vfprintf+0x356>
    2bea:	31 fd       	sbrc	r19, 1
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <vfprintf+0x332>
    2bee:	88 e7       	ldi	r24, 0x78	; 120
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <vfprintf+0x336>
    2bf4:	88 e5       	ldi	r24, 0x58	; 88
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	b6 01       	movw	r22, r12
    2bfa:	0c c0       	rjmp	.+24     	; 0x2c14 <vfprintf+0x352>
    2bfc:	83 2f       	mov	r24, r19
    2bfe:	86 78       	andi	r24, 0x86	; 134
    2c00:	59 f0       	breq	.+22     	; 0x2c18 <vfprintf+0x356>
    2c02:	31 ff       	sbrs	r19, 1
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <vfprintf+0x348>
    2c06:	8b e2       	ldi	r24, 0x2B	; 43
    2c08:	01 c0       	rjmp	.+2      	; 0x2c0c <vfprintf+0x34a>
    2c0a:	80 e2       	ldi	r24, 0x20	; 32
    2c0c:	37 fd       	sbrc	r19, 7
    2c0e:	8d e2       	ldi	r24, 0x2D	; 45
    2c10:	b6 01       	movw	r22, r12
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2c18:	a5 14       	cp	r10, r5
    2c1a:	38 f4       	brcc	.+14     	; 0x2c2a <vfprintf+0x368>
    2c1c:	b6 01       	movw	r22, r12
    2c1e:	80 e3       	ldi	r24, 0x30	; 48
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2c26:	5a 94       	dec	r5
    2c28:	f7 cf       	rjmp	.-18     	; 0x2c18 <vfprintf+0x356>
    2c2a:	aa 94       	dec	r10
    2c2c:	f4 01       	movw	r30, r8
    2c2e:	ea 0d       	add	r30, r10
    2c30:	f1 1d       	adc	r31, r1
    2c32:	80 81       	ld	r24, Z
    2c34:	b6 01       	movw	r22, r12
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2c3c:	a1 10       	cpse	r10, r1
    2c3e:	f5 cf       	rjmp	.-22     	; 0x2c2a <vfprintf+0x368>
    2c40:	33 20       	and	r3, r3
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <vfprintf+0x384>
    2c44:	50 ce       	rjmp	.-864    	; 0x28e6 <vfprintf+0x24>
    2c46:	b6 01       	movw	r22, r12
    2c48:	80 e2       	ldi	r24, 0x20	; 32
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <fputc>
    2c50:	3a 94       	dec	r3
    2c52:	f6 cf       	rjmp	.-20     	; 0x2c40 <vfprintf+0x37e>
    2c54:	f6 01       	movw	r30, r12
    2c56:	86 81       	ldd	r24, Z+6	; 0x06
    2c58:	97 81       	ldd	r25, Z+7	; 0x07
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <vfprintf+0x39e>
    2c5c:	8f ef       	ldi	r24, 0xFF	; 255
    2c5e:	9f ef       	ldi	r25, 0xFF	; 255
    2c60:	2c 96       	adiw	r28, 0x0c	; 12
    2c62:	e2 e1       	ldi	r30, 0x12	; 18
    2c64:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__>

00002c68 <strnlen_P>:
    2c68:	fc 01       	movw	r30, r24
    2c6a:	05 90       	lpm	r0, Z+
    2c6c:	61 50       	subi	r22, 0x01	; 1
    2c6e:	70 40       	sbci	r23, 0x00	; 0
    2c70:	01 10       	cpse	r0, r1
    2c72:	d8 f7       	brcc	.-10     	; 0x2c6a <strnlen_P+0x2>
    2c74:	80 95       	com	r24
    2c76:	90 95       	com	r25
    2c78:	8e 0f       	add	r24, r30
    2c7a:	9f 1f       	adc	r25, r31
    2c7c:	08 95       	ret

00002c7e <strnlen>:
    2c7e:	fc 01       	movw	r30, r24
    2c80:	61 50       	subi	r22, 0x01	; 1
    2c82:	70 40       	sbci	r23, 0x00	; 0
    2c84:	01 90       	ld	r0, Z+
    2c86:	01 10       	cpse	r0, r1
    2c88:	d8 f7       	brcc	.-10     	; 0x2c80 <strnlen+0x2>
    2c8a:	80 95       	com	r24
    2c8c:	90 95       	com	r25
    2c8e:	8e 0f       	add	r24, r30
    2c90:	9f 1f       	adc	r25, r31
    2c92:	08 95       	ret

00002c94 <strrev>:
    2c94:	dc 01       	movw	r26, r24
    2c96:	fc 01       	movw	r30, r24
    2c98:	67 2f       	mov	r22, r23
    2c9a:	71 91       	ld	r23, Z+
    2c9c:	77 23       	and	r23, r23
    2c9e:	e1 f7       	brne	.-8      	; 0x2c98 <strrev+0x4>
    2ca0:	32 97       	sbiw	r30, 0x02	; 2
    2ca2:	04 c0       	rjmp	.+8      	; 0x2cac <strrev+0x18>
    2ca4:	7c 91       	ld	r23, X
    2ca6:	6d 93       	st	X+, r22
    2ca8:	70 83       	st	Z, r23
    2caa:	62 91       	ld	r22, -Z
    2cac:	ae 17       	cp	r26, r30
    2cae:	bf 07       	cpc	r27, r31
    2cb0:	c8 f3       	brcs	.-14     	; 0x2ca4 <strrev+0x10>
    2cb2:	08 95       	ret

00002cb4 <fputc>:
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	18 2f       	mov	r17, r24
    2cbe:	09 2f       	mov	r16, r25
    2cc0:	eb 01       	movw	r28, r22
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	81 fd       	sbrc	r24, 1
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <fputc+0x1a>
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
    2cca:	9f ef       	ldi	r25, 0xFF	; 255
    2ccc:	1e c0       	rjmp	.+60     	; 0x2d0a <fputc+0x56>
    2cce:	82 ff       	sbrs	r24, 2
    2cd0:	0f c0       	rjmp	.+30     	; 0x2cf0 <fputc+0x3c>
    2cd2:	2e 81       	ldd	r18, Y+6	; 0x06
    2cd4:	3f 81       	ldd	r19, Y+7	; 0x07
    2cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cda:	28 17       	cp	r18, r24
    2cdc:	39 07       	cpc	r19, r25
    2cde:	74 f4       	brge	.+28     	; 0x2cfc <fputc+0x48>
    2ce0:	e8 81       	ld	r30, Y
    2ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ce4:	cf 01       	movw	r24, r30
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	99 83       	std	Y+1, r25	; 0x01
    2cea:	88 83       	st	Y, r24
    2cec:	10 83       	st	Z, r17
    2cee:	06 c0       	rjmp	.+12     	; 0x2cfc <fputc+0x48>
    2cf0:	e8 85       	ldd	r30, Y+8	; 0x08
    2cf2:	f9 85       	ldd	r31, Y+9	; 0x09
    2cf4:	81 2f       	mov	r24, r17
    2cf6:	09 95       	icall
    2cf8:	89 2b       	or	r24, r25
    2cfa:	31 f7       	brne	.-52     	; 0x2cc8 <fputc+0x14>
    2cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfe:	9f 81       	ldd	r25, Y+7	; 0x07
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	9f 83       	std	Y+7, r25	; 0x07
    2d04:	8e 83       	std	Y+6, r24	; 0x06
    2d06:	81 2f       	mov	r24, r17
    2d08:	90 2f       	mov	r25, r16
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	08 95       	ret

00002d14 <__ultoa_invert>:
    2d14:	fa 01       	movw	r30, r20
    2d16:	aa 27       	eor	r26, r26
    2d18:	28 30       	cpi	r18, 0x08	; 8
    2d1a:	51 f1       	breq	.+84     	; 0x2d70 <__ultoa_invert+0x5c>
    2d1c:	20 31       	cpi	r18, 0x10	; 16
    2d1e:	81 f1       	breq	.+96     	; 0x2d80 <__ultoa_invert+0x6c>
    2d20:	e8 94       	clt
    2d22:	6f 93       	push	r22
    2d24:	6e 7f       	andi	r22, 0xFE	; 254
    2d26:	6e 5f       	subi	r22, 0xFE	; 254
    2d28:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	af 4f       	sbci	r26, 0xFF	; 255
    2d30:	b1 e0       	ldi	r27, 0x01	; 1
    2d32:	3e d0       	rcall	.+124    	; 0x2db0 <__ultoa_invert+0x9c>
    2d34:	b4 e0       	ldi	r27, 0x04	; 4
    2d36:	3c d0       	rcall	.+120    	; 0x2db0 <__ultoa_invert+0x9c>
    2d38:	67 0f       	add	r22, r23
    2d3a:	78 1f       	adc	r23, r24
    2d3c:	89 1f       	adc	r24, r25
    2d3e:	9a 1f       	adc	r25, r26
    2d40:	a1 1d       	adc	r26, r1
    2d42:	68 0f       	add	r22, r24
    2d44:	79 1f       	adc	r23, r25
    2d46:	8a 1f       	adc	r24, r26
    2d48:	91 1d       	adc	r25, r1
    2d4a:	a1 1d       	adc	r26, r1
    2d4c:	6a 0f       	add	r22, r26
    2d4e:	71 1d       	adc	r23, r1
    2d50:	81 1d       	adc	r24, r1
    2d52:	91 1d       	adc	r25, r1
    2d54:	a1 1d       	adc	r26, r1
    2d56:	20 d0       	rcall	.+64     	; 0x2d98 <__ultoa_invert+0x84>
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <__ultoa_invert+0x48>
    2d5a:	68 94       	set
    2d5c:	3f 91       	pop	r19
    2d5e:	2a e0       	ldi	r18, 0x0A	; 10
    2d60:	26 9f       	mul	r18, r22
    2d62:	11 24       	eor	r1, r1
    2d64:	30 19       	sub	r19, r0
    2d66:	30 5d       	subi	r19, 0xD0	; 208
    2d68:	31 93       	st	Z+, r19
    2d6a:	de f6       	brtc	.-74     	; 0x2d22 <__ultoa_invert+0xe>
    2d6c:	cf 01       	movw	r24, r30
    2d6e:	08 95       	ret
    2d70:	46 2f       	mov	r20, r22
    2d72:	47 70       	andi	r20, 0x07	; 7
    2d74:	40 5d       	subi	r20, 0xD0	; 208
    2d76:	41 93       	st	Z+, r20
    2d78:	b3 e0       	ldi	r27, 0x03	; 3
    2d7a:	0f d0       	rcall	.+30     	; 0x2d9a <__ultoa_invert+0x86>
    2d7c:	c9 f7       	brne	.-14     	; 0x2d70 <__ultoa_invert+0x5c>
    2d7e:	f6 cf       	rjmp	.-20     	; 0x2d6c <__ultoa_invert+0x58>
    2d80:	46 2f       	mov	r20, r22
    2d82:	4f 70       	andi	r20, 0x0F	; 15
    2d84:	40 5d       	subi	r20, 0xD0	; 208
    2d86:	4a 33       	cpi	r20, 0x3A	; 58
    2d88:	18 f0       	brcs	.+6      	; 0x2d90 <__ultoa_invert+0x7c>
    2d8a:	49 5d       	subi	r20, 0xD9	; 217
    2d8c:	31 fd       	sbrc	r19, 1
    2d8e:	40 52       	subi	r20, 0x20	; 32
    2d90:	41 93       	st	Z+, r20
    2d92:	02 d0       	rcall	.+4      	; 0x2d98 <__ultoa_invert+0x84>
    2d94:	a9 f7       	brne	.-22     	; 0x2d80 <__ultoa_invert+0x6c>
    2d96:	ea cf       	rjmp	.-44     	; 0x2d6c <__ultoa_invert+0x58>
    2d98:	b4 e0       	ldi	r27, 0x04	; 4
    2d9a:	a6 95       	lsr	r26
    2d9c:	97 95       	ror	r25
    2d9e:	87 95       	ror	r24
    2da0:	77 95       	ror	r23
    2da2:	67 95       	ror	r22
    2da4:	ba 95       	dec	r27
    2da6:	c9 f7       	brne	.-14     	; 0x2d9a <__ultoa_invert+0x86>
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	61 05       	cpc	r22, r1
    2dac:	71 05       	cpc	r23, r1
    2dae:	08 95       	ret
    2db0:	9b 01       	movw	r18, r22
    2db2:	ac 01       	movw	r20, r24
    2db4:	0a 2e       	mov	r0, r26
    2db6:	06 94       	lsr	r0
    2db8:	57 95       	ror	r21
    2dba:	47 95       	ror	r20
    2dbc:	37 95       	ror	r19
    2dbe:	27 95       	ror	r18
    2dc0:	ba 95       	dec	r27
    2dc2:	c9 f7       	brne	.-14     	; 0x2db6 <__ultoa_invert+0xa2>
    2dc4:	62 0f       	add	r22, r18
    2dc6:	73 1f       	adc	r23, r19
    2dc8:	84 1f       	adc	r24, r20
    2dca:	95 1f       	adc	r25, r21
    2dcc:	a0 1d       	adc	r26, r0
    2dce:	08 95       	ret

00002dd0 <__prologue_saves__>:
    2dd0:	2f 92       	push	r2
    2dd2:	3f 92       	push	r3
    2dd4:	4f 92       	push	r4
    2dd6:	5f 92       	push	r5
    2dd8:	6f 92       	push	r6
    2dda:	7f 92       	push	r7
    2ddc:	8f 92       	push	r8
    2dde:	9f 92       	push	r9
    2de0:	af 92       	push	r10
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	ca 1b       	sub	r28, r26
    2dfa:	db 0b       	sbc	r29, r27
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	09 94       	ijmp

00002e08 <__epilogue_restores__>:
    2e08:	2a 88       	ldd	r2, Y+18	; 0x12
    2e0a:	39 88       	ldd	r3, Y+17	; 0x11
    2e0c:	48 88       	ldd	r4, Y+16	; 0x10
    2e0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e10:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e12:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e14:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e16:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e18:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e1a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e1c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e1e:	df 80       	ldd	r13, Y+7	; 0x07
    2e20:	ee 80       	ldd	r14, Y+6	; 0x06
    2e22:	fd 80       	ldd	r15, Y+5	; 0x05
    2e24:	0c 81       	ldd	r16, Y+4	; 0x04
    2e26:	1b 81       	ldd	r17, Y+3	; 0x03
    2e28:	aa 81       	ldd	r26, Y+2	; 0x02
    2e2a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e2c:	ce 0f       	add	r28, r30
    2e2e:	d1 1d       	adc	r29, r1
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	ed 01       	movw	r28, r26
    2e3c:	08 95       	ret

00002e3e <_exit>:
    2e3e:	f8 94       	cli

00002e40 <__stop_program>:
    2e40:	ff cf       	rjmp	.-2      	; 0x2e40 <__stop_program>
