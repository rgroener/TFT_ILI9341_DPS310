
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00004dda  00004e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800164  00800164  00004ed2  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00004ed2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00004f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000586e  00000000  00000000  00004ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b7  00000000  00000000  0000a862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001892  00000000  00000000  0000bb19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad8  00000000  00000000  0000d3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d2  00000000  00000000  0000de84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000056f1  00000000  00000000  0000e856  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00013f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__ctors_end>
       4:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
       8:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
       c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      10:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      14:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      18:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      1c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      20:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      24:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      28:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      2c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      30:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      34:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      38:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      3c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      40:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      44:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      48:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      4c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      50:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      54:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      58:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      5c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      60:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>
      64:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__bad_interrupt>

00000068 <bitmap>:
      68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     108:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     118:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     128:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     138:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     148:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     158:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     168:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     178:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     188:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     198:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     208:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     218:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     228:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     238:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     248:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     258:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     268:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     278:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     288:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     298:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     308:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     318:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     328:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     338:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     348:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     358:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     368:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     378:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     388:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     398:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     408:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     418:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     428:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     438:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     448:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     458:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     468:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     478:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     488:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     498:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     508:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     528:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     538:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     548:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     568:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     578:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     588:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     598:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff cf     ................
     5c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5e8:	ff ff ff ff ff ff ff 0f ff ff ff ff ff ff ff ff     ................
     5f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     608:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 1f     ................
     618:	f6 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     638:	ff ff ff ff ff ff ff 2f f8 ff ff ff ff ff ff ff     ......./........
     648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 1f     ................
     668:	f0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     688:	ff ff ff ff ff ff ff 3f f9 ff ff ff ff ff ff ff     .......?........
     698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
     6b8:	f8 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6d8:	ff ff ff ff ff ff ff ff f9 ff ff ff ff ff ff ff     ................
     6e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     728:	ff ff ff ff ff ff ff ff 7f fe ff ff ff ff ff ff     ................
     738:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     748:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     758:	67 fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff     g...............
     768:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     778:	ff ff ff ff ff ff ff ff 3f f8 ff ff ff ff ff ff     ........?.......
     788:	ff d7 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     798:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7a8:	0f f0 ff ff ff ff ff ff ff fa ff ff ff ff ff ff     ................
     7b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7c8:	ff ff ff ff ff ff ff ff 0f e0 ff ff ff ff ff ff     ................
     7d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7f8:	3f c0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
     808:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     818:	ff ff ff ff ff ff ff ff ff 80 ff ff 3f fe ff ff     ............?...
     828:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     838:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     848:	ff 01 ff ff 11 f8 ff ff bf ff ff ff ff ff ff ff     ................
     858:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     868:	ff ff ff ff ff ff ff ff ff 03 fe ff 00 e0 ff ff     ................
     878:	ef ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     888:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     898:	ff 07 fc ff 00 c0 ff ff e3 ff ff ff ff ff ff ff     ................
     8a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b8:	ff ff ff ff ff ff ff ff ff 07 f8 ff 00 c0 ff ff     ................
     8c8:	e1 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8e8:	ff 0f f0 ff 00 c0 ff ff c0 ff ff ff ff ff ff ff     ................
     8f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     908:	ff ff ff ff ff ff ff ff ff 1f c0 ff 11 c0 ff 7f     ................
     918:	80 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     928:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     938:	ff 3f 00 f7 63 e0 ff 3f f8 ff ff ff ff ff ff ff     .?..c..?........
     948:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     958:	ff ff ff ff ff ff ff ff ff 7f 00 80 c3 c0 ff 1f     ................
     968:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     978:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     988:	ff ff 00 00 87 c3 ff 0f fe ff ff ff ff ff ff ff     ................
     998:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9a8:	ff ff ff ff ff ff ff ff ff ff 03 00 0e 8e ff 81     ................
     9b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9d8:	ff ff 07 00 1e 88 3f 80 ff ff ff ff ff ff ff ff     ......?.........
     9e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9f8:	ff ff ff ff ff ff ff ff ff ff 0f 00 3c 80 2f c0     ............<./.
     a08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a28:	ff ff 1f 00 ff 00 38 e0 ff ff ff ff ff ff ff ff     ......8.........
     a38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a48:	ff ff ff ff ff ff ff ff ff ff 7f 80 ff 01 78 e4     ..............x.
     a58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a78:	ff ff 7f 00 fb 3f f0 ff ff ff ff ff ff ff ff ff     .....?..........
     a88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a98:	ff ff ff ff ff ff ff ff ff ff 7f 00 fe 3f f4 ff     .............?..
     aa8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ab8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ac8:	ff ff ff 00 f2 bf ff ff ff ff ff ff ff ff ff ff     ................
     ad8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ae8:	ff ff ff ff ff ff ff ff ff ff 7f 00 f2 3f ff ff     .............?..
     af8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b18:	ff ff 7f 00 f6 3d ff ff ff ff ff ff ff ff ff ff     .....=..........
     b28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b38:	ff ff ff ff ff ff ff ff ff ff 3f 00 e3 01 ff ff     ..........?.....
     b48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b68:	ff ff 3f 00 e3 03 fe ff ff ff ff ff ff ff ff ff     ..?.............
     b78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b88:	ff ff ff ff ff ff ff ff ff ff 3f 80 c7 07 fe ff     ..........?.....
     b98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ba8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bb8:	ff ff 1f 80 c7 07 fe ff ff ff ff ff ff ff ff ff     ................
     bc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bd8:	ff ff ff ff ff ff ff ff ff ff 1f c0 c7 0f fc ff     ................
     be8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bf8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c08:	ff ff 0f c0 c7 1f fc ff ff ff ff ff ff ff ff ff     ................
     c18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c28:	ff ff ff ff ff ff ff ff ff ff 0f e0 c7 3f fc ff     .............?..
     c38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c58:	ff ff 07 f0 8f 3f fc ff ff ff ff ff ff ff ff ff     .....?..........
     c68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c78:	ff ff ff ff ff ff ff ff ff ff 07 f0 8f 7f f8 ff     ................
     c88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ca8:	ff ff 03 f8 8f c1 f8 ff ff ff ff ff ff ff ff ff     ................
     cb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cc8:	ff ff ff ff ff ff ff ff ff ff 03 fc 8f 01 f8 ff     ................
     cd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ce8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cf8:	ff ff 01 fe 0f 00 f8 ff ff ff ff ff ff ff ff ff     ................
     d08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d18:	ff ff ff ff ff ff ff ff ff ff 81 ff 1f 00 f0 ff     ................
     d28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d48:	ff ff 80 ff 1f 00 f0 ff ff ff ff ff ff ff ff ff     ................
     d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d68:	ff ff ff ff ff ff ff ff ff ff 80 fd 1f 01 f0 ff     ................
     d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d98:	ff 7f 00 f7 07 00 e0 ff ff ff ff ff ff ff ff ff     ................
     da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     db8:	ff ff ff ff ff ff ff ff ff 3f 00 ff 03 00 e0 ff     .........?......
     dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     de8:	ff 3f 00 ff 03 00 c0 ff ff ff ff ff ff ff ff ff     .?..............
     df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e08:	ff ff ff ff ff ff ff ff ff 1f 00 3f 00 00 c0 ff     ...........?....
     e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e38:	ff 1f 00 3f 40 00 80 ff ff ff ff ff ff ff ff ff     ...?@...........
     e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff ff ff ff ff ff ff ff 0f 80 7f c0 00 80 ff     ................
     e68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e88:	ff 1f 80 7f 80 01 80 ff ff ff ff ff ff ff ff ff     ................
     e98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff 3f 83 7f 00 03 c0 ff     .........?......
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff cf ff 00 01 c0 ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0 ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff 00 00 e0 ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 f0 ff     ................
     f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff 00 00 fc ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff 00 fe ff ff     ................
     fa8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fc8:	ff ff ff ff 04 fe ff ff ff ff ff ff ff ff ff ff     ................
     fd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fe8:	ff ff ff ff ff ff ff ff ff ff ff ff 02 fe ff ff     ................
     ff8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1008:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1018:	ff ff ff ff 23 fe ff ff ff ff ff ff ff ff ff ff     ....#...........
    1028:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1038:	ff ff ff ff ff ff ff ff ff ff ff ff 37 fe ff ff     ............7...
    1048:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1058:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1068:	ff ff ff ff 1f fe ff ff ff ff ff ff ff ff ff ff     ................
    1078:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1088:	ff ff ff ff ff ff ff ff ff ff ff ff 0f fe ff ff     ................
    1098:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10b8:	ff ff ff ff 0f fe ff ff ff ff ff ff ff ff ff ff     ................
    10c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10d8:	ff ff ff ff ff ff ff ff ff ff ff ff 07 fe ff ff     ................
    10e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1108:	ff ff ff ff 03 fe ff ff ff ff ff ff ff ff ff ff     ................
    1118:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1128:	ff ff ff ff ff ff ff ff ff ff ff ff 01 fe ff ff     ................
    1138:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1148:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1158:	ff ff ff f7 01 fe ff ff ff ff ff ff ff ff ff ff     ................
    1168:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1178:	ff ff ff ff ff ff ff ff ff ff ff cf 13 fe ff ff     ................
    1188:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1198:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11a8:	ff ff ff cf 93 ff ff ff ff ff ff ff ff ff ff ff     ................
    11b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11c8:	ff ff ff ff ff ff ff ff ff ff ff cf d3 fe ff ff     ................
    11d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11f8:	ff ff ff 9f fb ff ff ff ff ff ff ff ff ff ff ff     ................
    1208:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1218:	ff ff ff ff ff ff ff ff ff ff ff 9f fb ff ff ff     ................
    1228:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1238:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1248:	ff ff ff 9f fb ff ff ff ff ff ff ff ff ff ff ff     ................
    1258:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1268:	ff ff ff ff ff ff ff ff ff ff ff 3f f3 ff ff ff     ...........?....
    1278:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1288:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1298:	ff ff ff 3f f3 ff ff ff ff ff ff ff ff ff ff ff     ...?............
    12a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12b8:	ff ff ff ff ff ff ff ff ff ff ff 7f f2 ff ff ff     ................
    12c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12e8:	ff ff ff 7f 92 ff ff ff ff ff ff ff ff ff ff ff     ................
    12f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1308:	ff ff ff ff ff ff ff ff ff ff ff ff c0 ff ff ff     ................
    1318:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1328:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1338:	ff ff ff ff e0 ff ff ff ff ff ff ff ff ff ff ff     ................
    1348:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1358:	ff ff ff ff ff ff ff ff ff ff ff ff 31 ff ff ff     ............1...
    1368:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1378:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1388:	ff ff ff ff 11 ff ff ff ff ff ff ff ff ff ff ff     ................
    1398:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13a8:	ff ff ff ff ff ff ff ff ff ff ff ff 01 fc ff ff     ................
    13b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13d8:	ff ff ff ff 81 fc ff ff ff ff ff ff ff ff ff ff     ................
    13e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13f8:	ff ff ff ff ff ff ff ff ff ff ff ff 80 f9 ff ff     ................
    1408:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1418:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1428:	ff ff ff ff 80 f9 ff ff ff ff ff ff ff ff ff ff     ................
    1438:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1448:	ff ff ff ff ff ff ff ff ff ff ff ff 80 f9 ff ff     ................
    1458:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1468:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1478:	ff ff ff ff 80 f3 ff ff ff ff ff ff ff ff ff ff     ................
    1488:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1498:	ff ff ff ff ff ff ff ff ff ff ff ff 80 f3 ff ff     ................
    14a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    14b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    14c8:	ff ff ff ff c0 f1 ff ff ff ff ff ff ff ff ff ff     ................
    14d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    14e8:	ff ff ff ff ff ff ff ff ff ff ff ff c0 fc ff ff     ................
    14f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1508:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1518:	ff ff ff ff c0 fe ff ff ff ff ff ff ff ff ff ff     ................
    1528:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1538:	ff ff ff ff ff ff ff ff ff ff ff ff c0 ff ff ff     ................
    1548:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1568:	ff ff ff ff c1 ff ff ff ff ff ff ff ff ff ff ff     ................
    1578:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1588:	ff ff ff ff ff ff ff ff ff ff ff 7f ce fb ff ff     ................
    1598:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    15a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    15b8:	ff ff ff 7f fc f7 ff ff ff ff ff ff ff ff ff ff     ................
    15c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    15d8:	ff ff ff ff ff ff ff ff ff ff ff 7f f8 e3 ff ff     ................
    15e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    15f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1608:	ff ff ff 7f f0 c7 ff ff ff ff ff ff ff ff ff ff     ................
    1618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1628:	ff ff ff ff ff ff ff ff ff ff ff 7f e0 ff ff ff     ................
    1638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1658:	ff ff ff ff c1 ff ff ff ff ff ff ff ff ff ff ff     ................
    1668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1738:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1748:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1758:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1768:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1778:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1788:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1798:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    17a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    17b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    17c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    17d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    17e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    17f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1808:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1818:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1828:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1838:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1848:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1858:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1868:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1878:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1888:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1898:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1908:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1918:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1928:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1938:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1948:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1958:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1968:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1978:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1988:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1998:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1aa8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ab8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ac8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ad8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ae8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1af8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ba8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1bb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1bc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1bd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1be8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1bf8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ca8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1cb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1cc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1cd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ce8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1cf8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ee8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00001fa8 <font>:
    1fa8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    1fb8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    1fc8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    1fd8:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    1fe8:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    1ff8:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    2008:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    2018:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    2028:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    2038:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    2048:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    2058:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    2068:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    2078:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    2088:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    2098:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    20a8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    20b8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    20c8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    20d8:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    20e8:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    20f8:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    2108:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    2118:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    2128:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    2138:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    2148:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    2158:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    2168:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    2178:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    2188:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    2198:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    21a8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    21b8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    21c8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    21d8:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    21e8:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    21f8:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    2208:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    2218:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    2228:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    2238:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
    2248:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    2258:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    2268:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
    2278:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    2288:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
    2298:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
    22a8:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
    22b8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    22c8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    22d8:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    22e8:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    22f8:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    2308:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    2318:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    2328:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    2338:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    2348:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    2358:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    2368:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    2378:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    2388:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    2398:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    23a8:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    23b8:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    23c8:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    23d8:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    23e8:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    23f8:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    2408:	fc 4a 4a 4a 34 7e 02 02 06 06 02 7e 02 7e 02 63     .JJJ4~.....~.~.c
    2418:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    2428:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    2438:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    2448:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    2458:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    2468:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    2478:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    2488:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    2498:	12 00 3c 3c 3c 3c 00 00 00 00 00 00                 ..<<<<......

000024a4 <__ctors_end>:
    24a4:	11 24       	eor	r1, r1
    24a6:	1f be       	out	0x3f, r1	; 63
    24a8:	cf ef       	ldi	r28, 0xFF	; 255
    24aa:	d8 e0       	ldi	r29, 0x08	; 8
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	cd bf       	out	0x3d, r28	; 61

000024b0 <__do_copy_data>:
    24b0:	11 e0       	ldi	r17, 0x01	; 1
    24b2:	a0 e0       	ldi	r26, 0x00	; 0
    24b4:	b1 e0       	ldi	r27, 0x01	; 1
    24b6:	ea ed       	ldi	r30, 0xDA	; 218
    24b8:	fd e4       	ldi	r31, 0x4D	; 77
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <__do_copy_data+0x10>
    24bc:	05 90       	lpm	r0, Z+
    24be:	0d 92       	st	X+, r0
    24c0:	a4 36       	cpi	r26, 0x64	; 100
    24c2:	b1 07       	cpc	r27, r17
    24c4:	d9 f7       	brne	.-10     	; 0x24bc <__do_copy_data+0xc>

000024c6 <__do_clear_bss>:
    24c6:	21 e0       	ldi	r18, 0x01	; 1
    24c8:	a4 e6       	ldi	r26, 0x64	; 100
    24ca:	b1 e0       	ldi	r27, 0x01	; 1
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <.do_clear_bss_start>

000024ce <.do_clear_bss_loop>:
    24ce:	1d 92       	st	X+, r1

000024d0 <.do_clear_bss_start>:
    24d0:	a1 39       	cpi	r26, 0x91	; 145
    24d2:	b2 07       	cpc	r27, r18
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <.do_clear_bss_loop>
    24d6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <main>
    24da:	0c 94 eb 26 	jmp	0x4dd6	; 0x4dd6 <_exit>

000024de <__bad_interrupt>:
    24de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000024e2 <ili9341_hard_init>:
uint16_t _height = 240;


void ili9341_hard_init(void)//init hardware
{
rstddr=0xFF;//output for reset
    24e2:	8f ef       	ldi	r24, 0xFF	; 255
    24e4:	8a b9       	out	0x0a, r24	; 10
rstport |=(1<<rst);//pull high for normal operation
    24e6:	5f 9a       	sbi	0x0b, 7	; 11
controlddr|=(1<<dc);//D/C as output
    24e8:	20 9a       	sbi	0x04, 0	; 4
}
    24ea:	08 95       	ret

000024ec <ili9341_spi_init>:


void ili9341_spi_init(void)//set spi speed and settings 
{
DDRB |=(1<<1)|(1<<2)|(1<<3)|(1<<5);//CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
    24ec:	84 b1       	in	r24, 0x04	; 4
    24ee:	8e 62       	ori	r24, 0x2E	; 46
    24f0:	84 b9       	out	0x04, r24	; 4
SPCR=(1<<SPE)|(1<<MSTR);//mode 0,fosc/4
    24f2:	80 e5       	ldi	r24, 0x50	; 80
    24f4:	8c bd       	out	0x2c, r24	; 44
SPSR |=(1<<SPI2X);//doubling spi speed.i.e final spi speed-fosc/2
    24f6:	8d b5       	in	r24, 0x2d	; 45
    24f8:	81 60       	ori	r24, 0x01	; 1
    24fa:	8d bd       	out	0x2d, r24	; 45
PORTB |=(1<<1);//cs off during startup
    24fc:	29 9a       	sbi	0x05, 1	; 5

}
    24fe:	08 95       	ret

00002500 <ili9341_spi_send>:


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
SPDR=spi_data;//move data into spdr
    2500:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
    2502:	0d b4       	in	r0, 0x2d	; 45
    2504:	07 fe       	sbrs	r0, 7
    2506:	fd cf       	rjmp	.-6      	; 0x2502 <ili9341_spi_send+0x2>
}
    2508:	08 95       	ret

0000250a <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
controlport &=~((1<<dc)|(1<<cs));//dc and cs both low to send command
    250a:	95 b1       	in	r25, 0x05	; 5
    250c:	9c 7f       	andi	r25, 0xFC	; 252
    250e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2510:	9a e1       	ldi	r25, 0x1A	; 26
    2512:	9a 95       	dec	r25
    2514:	f1 f7       	brne	.-4      	; 0x2512 <ili9341_writecommand8+0x8>
    2516:	00 c0       	rjmp	.+0      	; 0x2518 <ili9341_writecommand8+0xe>
_delay_us(5);//little delay
ili9341_spi_send(com);
    2518:	0e 94 80 12 	call	0x2500	; 0x2500 <ili9341_spi_send>
controlport |=(1<<cs);//pull high cs
    251c:	29 9a       	sbi	0x05, 1	; 5
}
    251e:	08 95       	ret

00002520 <ili9341_writedata8>:


void ili9341_writedata8(uint8_t data)//data write
{
controlport |=(1<<dc);//st dc high for data
    2520:	28 9a       	sbi	0x05, 0	; 5
    2522:	95 e0       	ldi	r25, 0x05	; 5
    2524:	9a 95       	dec	r25
    2526:	f1 f7       	brne	.-4      	; 0x2524 <ili9341_writedata8+0x4>
    2528:	00 00       	nop
_delay_us(1);//delay
controlport &=~(1<<cs);//set cs low for operation
    252a:	29 98       	cbi	0x05, 1	; 5
ili9341_spi_send(data);
    252c:	0e 94 80 12 	call	0x2500	; 0x2500 <ili9341_spi_send>
controlport |=(1<<cs);
    2530:	29 9a       	sbi	0x05, 1	; 5
}
    2532:	08 95       	ret

00002534 <ili9341_setaddress>:


void ili9341_setaddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
    2534:	df 92       	push	r13
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	e8 2e       	mov	r14, r24
    2544:	d9 2e       	mov	r13, r25
    2546:	d6 2f       	mov	r29, r22
    2548:	17 2f       	mov	r17, r23
    254a:	04 2f       	mov	r16, r20
    254c:	f5 2e       	mov	r15, r21
    254e:	c2 2f       	mov	r28, r18
ili9341_writecommand8(0x2A);
    2550:	8a e2       	ldi	r24, 0x2A	; 42
    2552:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(x1>>8);
    2556:	8d 2d       	mov	r24, r13
    2558:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(x1);
    255c:	8e 2d       	mov	r24, r14
    255e:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(x2>>8);
    2562:	8f 2d       	mov	r24, r15
    2564:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(x2);
    2568:	80 2f       	mov	r24, r16
    256a:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

ili9341_writecommand8(0x2B);
    256e:	8b e2       	ldi	r24, 0x2B	; 43
    2570:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(y1>>8);
    2574:	81 2f       	mov	r24, r17
    2576:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(y1);
    257a:	8d 2f       	mov	r24, r29
    257c:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(y2);
    2580:	8c 2f       	mov	r24, r28
    2582:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(y2);
    2586:	8c 2f       	mov	r24, r28
    2588:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

ili9341_writecommand8(0x2C);//meory write
    258c:	8c e2       	ldi	r24, 0x2C	; 44
}
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	df 90       	pop	r13
ili9341_writecommand8(0x2C);//meory write
    259c:	0c 94 85 12 	jmp	0x250a	; 0x250a <ili9341_writecommand8>

000025a0 <ili9341_hard_reset>:


void ili9341_hard_reset(void)//hard reset display
{
rstport |=(1<<rst);//pull high if low previously
    25a0:	5f 9a       	sbi	0x0b, 7	; 11
	__builtin_avr_delay_cycles(__ticks_dc);
    25a2:	2f ef       	ldi	r18, 0xFF	; 255
    25a4:	83 ec       	ldi	r24, 0xC3	; 195
    25a6:	99 e0       	ldi	r25, 0x09	; 9
    25a8:	21 50       	subi	r18, 0x01	; 1
    25aa:	80 40       	sbci	r24, 0x00	; 0
    25ac:	90 40       	sbci	r25, 0x00	; 0
    25ae:	e1 f7       	brne	.-8      	; 0x25a8 <ili9341_hard_reset+0x8>
    25b0:	00 c0       	rjmp	.+0      	; 0x25b2 <ili9341_hard_reset+0x12>
    25b2:	00 00       	nop
_delay_ms(200);
rstport &=~(1<<rst);//low for reset
    25b4:	5f 98       	cbi	0x0b, 7	; 11
    25b6:	2f ef       	ldi	r18, 0xFF	; 255
    25b8:	83 ec       	ldi	r24, 0xC3	; 195
    25ba:	99 e0       	ldi	r25, 0x09	; 9
    25bc:	21 50       	subi	r18, 0x01	; 1
    25be:	80 40       	sbci	r24, 0x00	; 0
    25c0:	90 40       	sbci	r25, 0x00	; 0
    25c2:	e1 f7       	brne	.-8      	; 0x25bc <ili9341_hard_reset+0x1c>
    25c4:	00 c0       	rjmp	.+0      	; 0x25c6 <ili9341_hard_reset+0x26>
    25c6:	00 00       	nop
_delay_ms(200);
rstport |=(1<<rst);//again pull high for normal operation
    25c8:	5f 9a       	sbi	0x0b, 7	; 11
    25ca:	2f ef       	ldi	r18, 0xFF	; 255
    25cc:	83 ec       	ldi	r24, 0xC3	; 195
    25ce:	99 e0       	ldi	r25, 0x09	; 9
    25d0:	21 50       	subi	r18, 0x01	; 1
    25d2:	80 40       	sbci	r24, 0x00	; 0
    25d4:	90 40       	sbci	r25, 0x00	; 0
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <ili9341_hard_reset+0x30>
    25d8:	00 c0       	rjmp	.+0      	; 0x25da <ili9341_hard_reset+0x3a>
    25da:	00 00       	nop
_delay_ms(200);
}
    25dc:	08 95       	ret

000025de <ili9341_init>:


void ili9341_init(void)//set up display using predefined command sequence
{
ili9341_hard_init();
    25de:	0e 94 71 12 	call	0x24e2	; 0x24e2 <ili9341_hard_init>
ili9341_spi_init();
    25e2:	0e 94 76 12 	call	0x24ec	; 0x24ec <ili9341_spi_init>
ili9341_hard_reset();
    25e6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <ili9341_hard_reset>
ili9341_writecommand8(0x01);//soft reset
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
    25f0:	2f ef       	ldi	r18, 0xFF	; 255
    25f2:	83 ed       	ldi	r24, 0xD3	; 211
    25f4:	90 e3       	ldi	r25, 0x30	; 48
    25f6:	21 50       	subi	r18, 0x01	; 1
    25f8:	80 40       	sbci	r24, 0x00	; 0
    25fa:	90 40       	sbci	r25, 0x00	; 0
    25fc:	e1 f7       	brne	.-8      	; 0x25f6 <ili9341_init+0x18>
    25fe:	00 c0       	rjmp	.+0      	; 0x2600 <ili9341_init+0x22>
    2600:	00 00       	nop
_delay_ms(1000);
//power control A
ili9341_writecommand8(0xCB);
    2602:	8b ec       	ldi	r24, 0xCB	; 203
    2604:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x39);
    2608:	89 e3       	ldi	r24, 0x39	; 57
    260a:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x2C);
    260e:	8c e2       	ldi	r24, 0x2C	; 44
    2610:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x00);
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x34);
    261a:	84 e3       	ldi	r24, 0x34	; 52
    261c:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x02);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//power control B
ili9341_writecommand8(0xCF);
    2626:	8f ec       	ldi	r24, 0xCF	; 207
    2628:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x00);
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0xC1);
    2632:	81 ec       	ldi	r24, 0xC1	; 193
    2634:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x30);
    2638:	80 e3       	ldi	r24, 0x30	; 48
    263a:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//driver timing control A
ili9341_writecommand8(0xE8);
    263e:	88 ee       	ldi	r24, 0xE8	; 232
    2640:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x85);
    2644:	85 e8       	ldi	r24, 0x85	; 133
    2646:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x00);
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x78);
    2650:	88 e7       	ldi	r24, 0x78	; 120
    2652:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//driver timing control B
ili9341_writecommand8(0xEA);
    2656:	8a ee       	ldi	r24, 0xEA	; 234
    2658:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x00);
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x00);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//power on sequence control
ili9341_writecommand8(0xED);
    2668:	8d ee       	ldi	r24, 0xED	; 237
    266a:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x64);
    266e:	84 e6       	ldi	r24, 0x64	; 100
    2670:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x03);
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x12);
    267a:	82 e1       	ldi	r24, 0x12	; 18
    267c:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x81);
    2680:	81 e8       	ldi	r24, 0x81	; 129
    2682:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//pump ratio control
ili9341_writecommand8(0xF7);
    2686:	87 ef       	ldi	r24, 0xF7	; 247
    2688:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x20);
    268c:	80 e2       	ldi	r24, 0x20	; 32
    268e:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//power control,VRH[5:0]
ili9341_writecommand8(0xC0);
    2692:	80 ec       	ldi	r24, 0xC0	; 192
    2694:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x23);
    2698:	83 e2       	ldi	r24, 0x23	; 35
    269a:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//Power control,SAP[2:0];BT[3:0]
ili9341_writecommand8(0xC1);
    269e:	81 ec       	ldi	r24, 0xC1	; 193
    26a0:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x10);
    26a4:	80 e1       	ldi	r24, 0x10	; 16
    26a6:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//vcm control
ili9341_writecommand8(0xC5);
    26aa:	85 ec       	ldi	r24, 0xC5	; 197
    26ac:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x3E);
    26b0:	8e e3       	ldi	r24, 0x3E	; 62
    26b2:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x28);
    26b6:	88 e2       	ldi	r24, 0x28	; 40
    26b8:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//vcm control 2
ili9341_writecommand8(0xC7);
    26bc:	87 ec       	ldi	r24, 0xC7	; 199
    26be:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x86);
    26c2:	86 e8       	ldi	r24, 0x86	; 134
    26c4:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//memory access control
ili9341_writecommand8(0x36);
    26c8:	86 e3       	ldi	r24, 0x36	; 54
    26ca:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x48);
    26ce:	88 e4       	ldi	r24, 0x48	; 72
    26d0:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//pixel format
ili9341_writecommand8(0x3A);
    26d4:	8a e3       	ldi	r24, 0x3A	; 58
    26d6:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x55);
    26da:	85 e5       	ldi	r24, 0x55	; 85
    26dc:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//frameration control,normal mode full colours
ili9341_writecommand8(0xB1);
    26e0:	81 eb       	ldi	r24, 0xB1	; 177
    26e2:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x00);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x18);
    26ec:	88 e1       	ldi	r24, 0x18	; 24
    26ee:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//display function control
ili9341_writecommand8(0xB6);
    26f2:	86 eb       	ldi	r24, 0xB6	; 182
    26f4:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x08);
    26f8:	88 e0       	ldi	r24, 0x08	; 8
    26fa:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x82);
    26fe:	82 e8       	ldi	r24, 0x82	; 130
    2700:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x27);
    2704:	87 e2       	ldi	r24, 0x27	; 39
    2706:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//3gamma function disable
ili9341_writecommand8(0xF2);
    270a:	82 ef       	ldi	r24, 0xF2	; 242
    270c:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x00);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//gamma curve selected
ili9341_writecommand8(0x26);
    2716:	86 e2       	ldi	r24, 0x26	; 38
    2718:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x01);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//set positive gamma correction
ili9341_writecommand8(0xE0);
    2722:	80 ee       	ldi	r24, 0xE0	; 224
    2724:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x0F);
    2728:	8f e0       	ldi	r24, 0x0F	; 15
    272a:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x31);
    272e:	81 e3       	ldi	r24, 0x31	; 49
    2730:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x2B);
    2734:	8b e2       	ldi	r24, 0x2B	; 43
    2736:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x0C);
    273a:	8c e0       	ldi	r24, 0x0C	; 12
    273c:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x0E);
    2740:	8e e0       	ldi	r24, 0x0E	; 14
    2742:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x08);
    2746:	88 e0       	ldi	r24, 0x08	; 8
    2748:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x4E);
    274c:	8e e4       	ldi	r24, 0x4E	; 78
    274e:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0xF1);
    2752:	81 ef       	ldi	r24, 0xF1	; 241
    2754:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x37);
    2758:	87 e3       	ldi	r24, 0x37	; 55
    275a:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x07);
    275e:	87 e0       	ldi	r24, 0x07	; 7
    2760:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x10);
    2764:	80 e1       	ldi	r24, 0x10	; 16
    2766:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x03);
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x0E);
    2770:	8e e0       	ldi	r24, 0x0E	; 14
    2772:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x09);
    2776:	89 e0       	ldi	r24, 0x09	; 9
    2778:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x00);
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//set negative gamma correction
ili9341_writecommand8(0xE1);
    2782:	81 ee       	ldi	r24, 0xE1	; 225
    2784:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
ili9341_writedata8(0x00);
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x0E);
    278e:	8e e0       	ldi	r24, 0x0E	; 14
    2790:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x14);
    2794:	84 e1       	ldi	r24, 0x14	; 20
    2796:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x03);
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x11);
    27a0:	81 e1       	ldi	r24, 0x11	; 17
    27a2:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x07);
    27a6:	87 e0       	ldi	r24, 0x07	; 7
    27a8:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x31);
    27ac:	81 e3       	ldi	r24, 0x31	; 49
    27ae:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0xC1);
    27b2:	81 ec       	ldi	r24, 0xC1	; 193
    27b4:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x48);
    27b8:	88 e4       	ldi	r24, 0x48	; 72
    27ba:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x08);
    27be:	88 e0       	ldi	r24, 0x08	; 8
    27c0:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x0F);
    27c4:	8f e0       	ldi	r24, 0x0F	; 15
    27c6:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x0C);
    27ca:	8c e0       	ldi	r24, 0x0C	; 12
    27cc:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x31);
    27d0:	81 e3       	ldi	r24, 0x31	; 49
    27d2:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x36);
    27d6:	86 e3       	ldi	r24, 0x36	; 54
    27d8:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(0x0F);
    27dc:	8f e0       	ldi	r24, 0x0F	; 15
    27de:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>

//exit sleep
ili9341_writecommand8(0x11);
    27e2:	81 e1       	ldi	r24, 0x11	; 17
    27e4:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
    27e8:	2f ef       	ldi	r18, 0xFF	; 255
    27ea:	8b ed       	ldi	r24, 0xDB	; 219
    27ec:	95 e0       	ldi	r25, 0x05	; 5
    27ee:	21 50       	subi	r18, 0x01	; 1
    27f0:	80 40       	sbci	r24, 0x00	; 0
    27f2:	90 40       	sbci	r25, 0x00	; 0
    27f4:	e1 f7       	brne	.-8      	; 0x27ee <ili9341_init+0x210>
    27f6:	00 c0       	rjmp	.+0      	; 0x27f8 <ili9341_init+0x21a>
    27f8:	00 00       	nop
_delay_ms(120);
//display on
ili9341_writecommand8(0x29);
    27fa:	89 e2       	ldi	r24, 0x29	; 41
    27fc:	0c 94 85 12 	jmp	0x250a	; 0x250a <ili9341_writecommand8>

00002800 <ili9341_pushcolour>:

}

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
    2800:	cf 93       	push	r28
    2802:	c8 2f       	mov	r28, r24
ili9341_writedata8(colour>>8);
    2804:	89 2f       	mov	r24, r25
    2806:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
ili9341_writedata8(colour);
    280a:	8c 2f       	mov	r24, r28
}
    280c:	cf 91       	pop	r28
ili9341_writedata8(colour);
    280e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <ili9341_writedata8>

00002812 <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	7c 01       	movw	r14, r24
uint16_t i,j;
ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);
    2820:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
    2824:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
    2828:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <LCD_W>
    282c:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <LCD_W+0x1>
    2830:	21 50       	subi	r18, 0x01	; 1
    2832:	31 09       	sbc	r19, r1
    2834:	41 50       	subi	r20, 0x01	; 1
    2836:	51 09       	sbc	r21, r1
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	0e 94 9a 12 	call	0x2534	; 0x2534 <ili9341_setaddress>

for(i=0;i<LCD_W;i++)
    2844:	d0 e0       	ldi	r29, 0x00	; 0
    2846:	c0 e0       	ldi	r28, 0x00	; 0
    2848:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <LCD_W>
    284c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <LCD_W+0x1>
    2850:	c8 17       	cp	r28, r24
    2852:	d9 07       	cpc	r29, r25
    2854:	a8 f0       	brcs	.+42     	; 0x2880 <ili9341_clear+0x6e>
{
ili9341_pushcolour(colour);
}
}

}
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	08 95       	ret
ili9341_pushcolour(colour);
    2864:	c7 01       	movw	r24, r14
    2866:	0e 94 00 14 	call	0x2800	; 0x2800 <ili9341_pushcolour>
for(j=0;j<LCD_H;j++)
    286a:	0f 5f       	subi	r16, 0xFF	; 255
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LCD_H>
    2872:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <LCD_H+0x1>
    2876:	08 17       	cp	r16, r24
    2878:	19 07       	cpc	r17, r25
    287a:	a0 f3       	brcs	.-24     	; 0x2864 <ili9341_clear+0x52>
for(i=0;i<LCD_W;i++)
    287c:	21 96       	adiw	r28, 0x01	; 1
    287e:	e4 cf       	rjmp	.-56     	; 0x2848 <ili9341_clear+0x36>
for(j=0;j<LCD_H;j++)
    2880:	10 e0       	ldi	r17, 0x00	; 0
    2882:	00 e0       	ldi	r16, 0x00	; 0
    2884:	f4 cf       	rjmp	.-24     	; 0x286e <ili9341_clear+0x5c>

00002886 <ili9341_drawpixel>:



//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	ea 01       	movw	r28, r20
if((x3 < 0) ||(x3 >=LCD_W) || (y3 < 0) || (y3 >=LCD_H)) return;
    288c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
    2890:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
    2894:	82 17       	cp	r24, r18
    2896:	93 07       	cpc	r25, r19
    2898:	a0 f4       	brcc	.+40     	; 0x28c2 <ili9341_drawpixel+0x3c>
    289a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
    289e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
    28a2:	62 17       	cp	r22, r18
    28a4:	73 07       	cpc	r23, r19
    28a6:	68 f4       	brcc	.+26     	; 0x28c2 <ili9341_drawpixel+0x3c>

ili9341_setaddress(x3,y3,x3+1,y3+1);
    28a8:	9b 01       	movw	r18, r22
    28aa:	2f 5f       	subi	r18, 0xFF	; 255
    28ac:	3f 4f       	sbci	r19, 0xFF	; 255
    28ae:	ac 01       	movw	r20, r24
    28b0:	4f 5f       	subi	r20, 0xFF	; 255
    28b2:	5f 4f       	sbci	r21, 0xFF	; 255
    28b4:	0e 94 9a 12 	call	0x2534	; 0x2534 <ili9341_setaddress>

ili9341_pushcolour(colour1);
    28b8:	ce 01       	movw	r24, r28
}
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
ili9341_pushcolour(colour1);
    28be:	0c 94 00 14 	jmp	0x2800	; 0x2800 <ili9341_pushcolour>
}
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	08 95       	ret

000028c8 <ili9341_drawvline>:


//draw vertical line
void ili9341_drawvline(uint16_t x,uint16_t y,uint16_t h,uint16_t colour)//basically we will see this line horizental if we see the display 320*240
{
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	ea 01       	movw	r28, r20
    28d2:	89 01       	movw	r16, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
    28d4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
    28d8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
    28dc:	82 17       	cp	r24, r18
    28de:	93 07       	cpc	r25, r19
    28e0:	18 f5       	brcc	.+70     	; 0x2928 <ili9341_drawvline+0x60>
    28e2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
    28e6:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
    28ea:	62 17       	cp	r22, r18
    28ec:	73 07       	cpc	r23, r19
    28ee:	e0 f4       	brcc	.+56     	; 0x2928 <ili9341_drawvline+0x60>
if((y+h-1)>=LCD_H)
    28f0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <LCD_H>
    28f4:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <LCD_H+0x1>
    28f8:	9e 01       	movw	r18, r28
    28fa:	21 50       	subi	r18, 0x01	; 1
    28fc:	31 09       	sbc	r19, r1
    28fe:	26 0f       	add	r18, r22
    2900:	37 1f       	adc	r19, r23
    2902:	24 17       	cp	r18, r20
    2904:	35 07       	cpc	r19, r21
    2906:	30 f0       	brcs	.+12     	; 0x2914 <ili9341_drawvline+0x4c>
h=LCD_H-y;
    2908:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <LCD_H>
    290c:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <LCD_H+0x1>
    2910:	c6 1b       	sub	r28, r22
    2912:	d7 0b       	sbc	r29, r23
ili9341_setaddress(x,y,x,y+h-1);
    2914:	9b 01       	movw	r18, r22
    2916:	21 50       	subi	r18, 0x01	; 1
    2918:	31 09       	sbc	r19, r1
    291a:	2c 0f       	add	r18, r28
    291c:	3d 1f       	adc	r19, r29
    291e:	ac 01       	movw	r20, r24
    2920:	0e 94 9a 12 	call	0x2534	; 0x2534 <ili9341_setaddress>
while(h--)
    2924:	21 97       	sbiw	r28, 0x01	; 1
    2926:	28 f4       	brcc	.+10     	; 0x2932 <ili9341_drawvline+0x6a>
{
ili9341_pushcolour(colour);
}
}
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret
ili9341_pushcolour(colour);
    2932:	c8 01       	movw	r24, r16
    2934:	0e 94 00 14 	call	0x2800	; 0x2800 <ili9341_pushcolour>
    2938:	f5 cf       	rjmp	.-22     	; 0x2924 <ili9341_drawvline+0x5c>

0000293a <ili9341_drawhline>:


//draw horizental line

void ili9341_drawhline(uint16_t x,uint16_t y,uint16_t w,uint16_t colour)
{
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	ea 01       	movw	r28, r20
    2944:	89 01       	movw	r16, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
    2946:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
    294a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
    294e:	82 17       	cp	r24, r18
    2950:	93 07       	cpc	r25, r19
    2952:	18 f5       	brcc	.+70     	; 0x299a <ili9341_drawhline+0x60>
    2954:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
    2958:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
    295c:	62 17       	cp	r22, r18
    295e:	73 07       	cpc	r23, r19
    2960:	e0 f4       	brcc	.+56     	; 0x299a <ili9341_drawhline+0x60>
if((x+w-1)>=LCD_W)
    2962:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <LCD_W>
    2966:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <LCD_W+0x1>
    296a:	9e 01       	movw	r18, r28
    296c:	21 50       	subi	r18, 0x01	; 1
    296e:	31 09       	sbc	r19, r1
    2970:	28 0f       	add	r18, r24
    2972:	39 1f       	adc	r19, r25
    2974:	24 17       	cp	r18, r20
    2976:	35 07       	cpc	r19, r21
    2978:	30 f0       	brcs	.+12     	; 0x2986 <ili9341_drawhline+0x4c>
w=LCD_W-x;
    297a:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <LCD_W>
    297e:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <LCD_W+0x1>
    2982:	c8 1b       	sub	r28, r24
    2984:	d9 0b       	sbc	r29, r25
ili9341_setaddress(x,y,x+w-1,y);
    2986:	ac 01       	movw	r20, r24
    2988:	41 50       	subi	r20, 0x01	; 1
    298a:	51 09       	sbc	r21, r1
    298c:	4c 0f       	add	r20, r28
    298e:	5d 1f       	adc	r21, r29
    2990:	9b 01       	movw	r18, r22
    2992:	0e 94 9a 12 	call	0x2534	; 0x2534 <ili9341_setaddress>
while(w--)
    2996:	21 97       	sbiw	r28, 0x01	; 1
    2998:	28 f4       	brcc	.+10     	; 0x29a4 <ili9341_drawhline+0x6a>
{
ili9341_pushcolour(colour);
}
}
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	08 95       	ret
ili9341_pushcolour(colour);
    29a4:	c8 01       	movw	r24, r16
    29a6:	0e 94 00 14 	call	0x2800	; 0x2800 <ili9341_pushcolour>
    29aa:	f5 cf       	rjmp	.-22     	; 0x2996 <ili9341_drawhline+0x5c>

000029ac <ili9341_fillrect>:

//draw colour filled rectangle
void ili9341_fillrect(uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t colour)
{
    29ac:	cf 92       	push	r12
    29ae:	df 92       	push	r13
    29b0:	ef 92       	push	r14
    29b2:	ff 92       	push	r15
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	7a 01       	movw	r14, r20
    29be:	e9 01       	movw	r28, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
    29c0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
    29c4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
    29c8:	82 17       	cp	r24, r18
    29ca:	93 07       	cpc	r25, r19
    29cc:	c8 f5       	brcc	.+114    	; 0x2a40 <ili9341_fillrect+0x94>
    29ce:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
    29d2:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
    29d6:	62 17       	cp	r22, r18
    29d8:	73 07       	cpc	r23, r19
    29da:	90 f5       	brcc	.+100    	; 0x2a40 <ili9341_fillrect+0x94>
if((x+w-1)>=LCD_W)
    29dc:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <LCD_W>
    29e0:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <LCD_W+0x1>
    29e4:	97 01       	movw	r18, r14
    29e6:	21 50       	subi	r18, 0x01	; 1
    29e8:	31 09       	sbc	r19, r1
    29ea:	28 0f       	add	r18, r24
    29ec:	39 1f       	adc	r19, r25
    29ee:	24 17       	cp	r18, r20
    29f0:	35 07       	cpc	r19, r21
    29f2:	30 f0       	brcs	.+12     	; 0x2a00 <ili9341_fillrect+0x54>
w=LCD_W-x;
    29f4:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <LCD_W>
    29f8:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <LCD_W+0x1>
    29fc:	e8 1a       	sub	r14, r24
    29fe:	f9 0a       	sbc	r15, r25
if((y+h-1)>=LCD_H)
    2a00:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <LCD_H>
    2a04:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <LCD_H+0x1>
    2a08:	9e 01       	movw	r18, r28
    2a0a:	21 50       	subi	r18, 0x01	; 1
    2a0c:	31 09       	sbc	r19, r1
    2a0e:	26 0f       	add	r18, r22
    2a10:	37 1f       	adc	r19, r23
    2a12:	24 17       	cp	r18, r20
    2a14:	35 07       	cpc	r19, r21
    2a16:	30 f0       	brcs	.+12     	; 0x2a24 <ili9341_fillrect+0x78>
h=LCD_H-y;
    2a18:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <LCD_H>
    2a1c:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <LCD_H+0x1>
    2a20:	c6 1b       	sub	r28, r22
    2a22:	d7 0b       	sbc	r29, r23

ili9341_setaddress(x, y, x+w-1, y+h-1);
    2a24:	9b 01       	movw	r18, r22
    2a26:	21 50       	subi	r18, 0x01	; 1
    2a28:	31 09       	sbc	r19, r1
    2a2a:	2c 0f       	add	r18, r28
    2a2c:	3d 1f       	adc	r19, r29
    2a2e:	ac 01       	movw	r20, r24
    2a30:	41 50       	subi	r20, 0x01	; 1
    2a32:	51 09       	sbc	r21, r1
    2a34:	4e 0d       	add	r20, r14
    2a36:	5f 1d       	adc	r21, r15
    2a38:	0e 94 9a 12 	call	0x2534	; 0x2534 <ili9341_setaddress>

for(y=h; y>0; y--) 
    2a3c:	20 97       	sbiw	r28, 0x00	; 0
    2a3e:	a1 f4       	brne	.+40     	; 0x2a68 <ili9341_fillrect+0xbc>
for(x=w; x>0; x--)
{
ili9341_pushcolour(colour);
}
}
}
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	ff 90       	pop	r15
    2a4a:	ef 90       	pop	r14
    2a4c:	df 90       	pop	r13
    2a4e:	cf 90       	pop	r12
    2a50:	08 95       	ret
ili9341_pushcolour(colour);
    2a52:	c8 01       	movw	r24, r16
    2a54:	0e 94 00 14 	call	0x2800	; 0x2800 <ili9341_pushcolour>
for(x=w; x>0; x--)
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	c8 1a       	sub	r12, r24
    2a5c:	d1 08       	sbc	r13, r1
    2a5e:	c1 14       	cp	r12, r1
    2a60:	d1 04       	cpc	r13, r1
    2a62:	b9 f7       	brne	.-18     	; 0x2a52 <ili9341_fillrect+0xa6>
for(y=h; y>0; y--) 
    2a64:	21 97       	sbiw	r28, 0x01	; 1
    2a66:	ea cf       	rjmp	.-44     	; 0x2a3c <ili9341_fillrect+0x90>
for(x=w; x>0; x--)
    2a68:	67 01       	movw	r12, r14
    2a6a:	f9 cf       	rjmp	.-14     	; 0x2a5e <ili9341_fillrect+0xb2>

00002a6c <ili9341_setRotation>:
//rotate screen at desired orientation
void ili9341_setRotation(uint8_t m) 
{
    2a6c:	cf 93       	push	r28
    2a6e:	c8 2f       	mov	r28, r24
uint8_t rotation;
ili9341_writecommand8(0x36);
    2a70:	86 e3       	ldi	r24, 0x36	; 54
    2a72:	0e 94 85 12 	call	0x250a	; 0x250a <ili9341_writecommand8>
rotation=m%4;
    2a76:	c3 70       	andi	r28, 0x03	; 3
switch (rotation) 
    2a78:	c2 30       	cpi	r28, 0x02	; 2
    2a7a:	89 f0       	breq	.+34     	; 0x2a9e <ili9341_setRotation+0x32>
    2a7c:	c3 30       	cpi	r28, 0x03	; 3
    2a7e:	01 f1       	breq	.+64     	; 0x2ac0 <ili9341_setRotation+0x54>
{
case 0:
ili9341_writedata8(0x40|0x08);
    2a80:	88 e4       	ldi	r24, 0x48	; 72
switch (rotation) 
    2a82:	c1 30       	cpi	r28, 0x01	; 1
    2a84:	69 f4       	brne	.+26     	; 0x2aa0 <ili9341_setRotation+0x34>
LCD_W = 240;
LCD_H = 320;
break;
case 1:
ili9341_writedata8(0x20|0x08);
    2a86:	88 e2       	ldi	r24, 0x28	; 40
ili9341_writedata8(0x80|0x08);
LCD_W  = 240;
LCD_H = 320;
break;
case 3:
ili9341_writedata8(0x40|0x80|0x20|0x08);
    2a88:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
LCD_W  = 320;
    2a8c:	80 e4       	ldi	r24, 0x40	; 64
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <LCD_W+0x1>
    2a94:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <LCD_W>
LCD_H = 240;
    2a98:	80 ef       	ldi	r24, 0xF0	; 240
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0b c0       	rjmp	.+22     	; 0x2ab4 <ili9341_setRotation+0x48>
ili9341_writedata8(0x80|0x08);
    2a9e:	88 e8       	ldi	r24, 0x88	; 136
    2aa0:	0e 94 90 12 	call	0x2520	; 0x2520 <ili9341_writedata8>
LCD_W  = 240;
    2aa4:	80 ef       	ldi	r24, 0xF0	; 240
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <LCD_W+0x1>
    2aac:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <LCD_W>
LCD_H = 320;
    2ab0:	80 e4       	ldi	r24, 0x40	; 64
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
LCD_H = 240;
    2ab4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <LCD_H+0x1>
    2ab8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <LCD_H>
break;
}
}
    2abc:	cf 91       	pop	r28
    2abe:	08 95       	ret
ili9341_writedata8(0x40|0x80|0x20|0x08);
    2ac0:	88 ee       	ldi	r24, 0xE8	; 232
    2ac2:	e2 cf       	rjmp	.-60     	; 0x2a88 <ili9341_setRotation+0x1c>

00002ac4 <ili9341_drawCircle>:

// Draw a circle outline
void ili9341_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) 
{
    2ac4:	2f 92       	push	r2
    2ac6:	3f 92       	push	r3
    2ac8:	4f 92       	push	r4
    2aca:	5f 92       	push	r5
    2acc:	6f 92       	push	r6
    2ace:	7f 92       	push	r7
    2ad0:	8f 92       	push	r8
    2ad2:	9f 92       	push	r9
    2ad4:	af 92       	push	r10
    2ad6:	bf 92       	push	r11
    2ad8:	cf 92       	push	r12
    2ada:	df 92       	push	r13
    2adc:	ef 92       	push	r14
    2ade:	ff 92       	push	r15
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <ili9341_drawCircle+0x26>
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <ili9341_drawCircle+0x28>
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <ili9341_drawCircle+0x2a>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	7c 01       	movw	r14, r24
    2af4:	6b 01       	movw	r12, r22
    2af6:	5e 83       	std	Y+6, r21	; 0x06
    2af8:	4d 83       	std	Y+5, r20	; 0x05
    2afa:	89 01       	movw	r16, r18
  int16_t f = 1 - r;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	3c 01       	movw	r6, r24
    2b02:	64 1a       	sub	r6, r20
    2b04:	75 0a       	sbc	r7, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    2b06:	ca 01       	movw	r24, r20
    2b08:	91 95       	neg	r25
    2b0a:	81 95       	neg	r24
    2b0c:	91 09       	sbc	r25, r1
    2b0e:	9c 01       	movw	r18, r24
    2b10:	22 0f       	add	r18, r18
    2b12:	33 1f       	adc	r19, r19
    2b14:	3c 83       	std	Y+4, r19	; 0x04
    2b16:	2b 83       	std	Y+3, r18	; 0x03
  int16_t x = 0;
  int16_t y = r;

  ili9341_drawpixel(x0  , y0+r, color);
    2b18:	ba 01       	movw	r22, r20
    2b1a:	6c 0d       	add	r22, r12
    2b1c:	7d 1d       	adc	r23, r13
    2b1e:	a8 01       	movw	r20, r16
    2b20:	c7 01       	movw	r24, r14
    2b22:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
  ili9341_drawpixel(x0  , y0-r, color);
    2b26:	b6 01       	movw	r22, r12
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	68 1b       	sub	r22, r24
    2b2e:	79 0b       	sbc	r23, r25
    2b30:	a8 01       	movw	r20, r16
    2b32:	c7 01       	movw	r24, r14
    2b34:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
  ili9341_drawpixel(x0+r, y0  , color);
    2b38:	a8 01       	movw	r20, r16
    2b3a:	b6 01       	movw	r22, r12
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b40:	8e 0d       	add	r24, r14
    2b42:	9f 1d       	adc	r25, r15
    2b44:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
  ili9341_drawpixel(x0-r, y0  , color);
    2b48:	a8 01       	movw	r20, r16
    2b4a:	b6 01       	movw	r22, r12
    2b4c:	c7 01       	movw	r24, r14
    2b4e:	2d 81       	ldd	r18, Y+5	; 0x05
    2b50:	3e 81       	ldd	r19, Y+6	; 0x06
    2b52:	82 1b       	sub	r24, r18
    2b54:	93 0b       	sbc	r25, r19
    2b56:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
  int16_t x = 0;
    2b5a:	b1 2c       	mov	r11, r1
    2b5c:	a1 2c       	mov	r10, r1
  int16_t ddF_x = 1;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01

  while (x<y) {
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	a8 16       	cp	r10, r24
    2b6c:	b9 06       	cpc	r11, r25
    2b6e:	cc f0       	brlt	.+50     	; 0x2ba2 <ili9341_drawCircle+0xde>
    ili9341_drawpixel(x0 + y, y0 + x, color);
    ili9341_drawpixel(x0 - y, y0 + x, color);
    ili9341_drawpixel(x0 + y, y0 - x, color);
    ili9341_drawpixel(x0 - y, y0 - x, color);
  }
}
    2b70:	26 96       	adiw	r28, 0x06	; 6
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	ff 90       	pop	r15
    2b86:	ef 90       	pop	r14
    2b88:	df 90       	pop	r13
    2b8a:	cf 90       	pop	r12
    2b8c:	bf 90       	pop	r11
    2b8e:	af 90       	pop	r10
    2b90:	9f 90       	pop	r9
    2b92:	8f 90       	pop	r8
    2b94:	7f 90       	pop	r7
    2b96:	6f 90       	pop	r6
    2b98:	5f 90       	pop	r5
    2b9a:	4f 90       	pop	r4
    2b9c:	3f 90       	pop	r3
    2b9e:	2f 90       	pop	r2
    2ba0:	08 95       	ret
    if (f >= 0) {
    2ba2:	77 fc       	sbrc	r7, 7
    2ba4:	0d c0       	rjmp	.+26     	; 0x2bc0 <ili9341_drawCircle+0xfc>
      y--;
    2ba6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ba8:	3e 81       	ldd	r19, Y+6	; 0x06
    2baa:	21 50       	subi	r18, 0x01	; 1
    2bac:	31 09       	sbc	r19, r1
    2bae:	3e 83       	std	Y+6, r19	; 0x06
    2bb0:	2d 83       	std	Y+5, r18	; 0x05
      ddF_y += 2;
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb6:	02 96       	adiw	r24, 0x02	; 2
    2bb8:	9c 83       	std	Y+4, r25	; 0x04
    2bba:	8b 83       	std	Y+3, r24	; 0x03
      f += ddF_y;
    2bbc:	68 0e       	add	r6, r24
    2bbe:	79 1e       	adc	r7, r25
    x++;
    2bc0:	9f ef       	ldi	r25, 0xFF	; 255
    2bc2:	a9 1a       	sub	r10, r25
    2bc4:	b9 0a       	sbc	r11, r25
    ddF_x += 2;
    2bc6:	29 81       	ldd	r18, Y+1	; 0x01
    2bc8:	3a 81       	ldd	r19, Y+2	; 0x02
    2bca:	2e 5f       	subi	r18, 0xFE	; 254
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	3a 83       	std	Y+2, r19	; 0x02
    2bd0:	29 83       	std	Y+1, r18	; 0x01
    f += ddF_x;
    2bd2:	62 0e       	add	r6, r18
    2bd4:	73 1e       	adc	r7, r19
    2bd6:	27 01       	movw	r4, r14
    2bd8:	4a 0c       	add	r4, r10
    2bda:	5b 1c       	adc	r5, r11
    ili9341_drawpixel(x0 + x, y0 + y, color);
    2bdc:	a8 01       	movw	r20, r16
    2bde:	8d 80       	ldd	r8, Y+5	; 0x05
    2be0:	9e 80       	ldd	r9, Y+6	; 0x06
    2be2:	8c 0c       	add	r8, r12
    2be4:	9d 1c       	adc	r9, r13
    2be6:	b4 01       	movw	r22, r8
    2be8:	c2 01       	movw	r24, r4
    2bea:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    2bee:	17 01       	movw	r2, r14
    2bf0:	2a 18       	sub	r2, r10
    2bf2:	3b 08       	sbc	r3, r11
    ili9341_drawpixel(x0 - x, y0 + y, color);
    2bf4:	a8 01       	movw	r20, r16
    2bf6:	b4 01       	movw	r22, r8
    2bf8:	c1 01       	movw	r24, r2
    2bfa:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + x, y0 - y, color);
    2bfe:	a8 01       	movw	r20, r16
    2c00:	46 01       	movw	r8, r12
    2c02:	8d 81       	ldd	r24, Y+5	; 0x05
    2c04:	9e 81       	ldd	r25, Y+6	; 0x06
    2c06:	88 1a       	sub	r8, r24
    2c08:	99 0a       	sbc	r9, r25
    2c0a:	b4 01       	movw	r22, r8
    2c0c:	c2 01       	movw	r24, r4
    2c0e:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - x, y0 - y, color);
    2c12:	a8 01       	movw	r20, r16
    2c14:	b4 01       	movw	r22, r8
    2c16:	c1 01       	movw	r24, r2
    2c18:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    2c1c:	46 01       	movw	r8, r12
    2c1e:	8a 0c       	add	r8, r10
    2c20:	9b 1c       	adc	r9, r11
    ili9341_drawpixel(x0 + y, y0 + x, color);
    2c22:	a8 01       	movw	r20, r16
    2c24:	b4 01       	movw	r22, r8
    2c26:	4d 80       	ldd	r4, Y+5	; 0x05
    2c28:	5e 80       	ldd	r5, Y+6	; 0x06
    2c2a:	4e 0c       	add	r4, r14
    2c2c:	5f 1c       	adc	r5, r15
    2c2e:	c2 01       	movw	r24, r4
    2c30:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 + x, color);
    2c34:	a8 01       	movw	r20, r16
    2c36:	b4 01       	movw	r22, r8
    2c38:	17 01       	movw	r2, r14
    2c3a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c3c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c3e:	22 1a       	sub	r2, r18
    2c40:	33 0a       	sbc	r3, r19
    2c42:	c1 01       	movw	r24, r2
    2c44:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    2c48:	46 01       	movw	r8, r12
    2c4a:	8a 18       	sub	r8, r10
    2c4c:	9b 08       	sbc	r9, r11
    ili9341_drawpixel(x0 + y, y0 - x, color);
    2c4e:	a8 01       	movw	r20, r16
    2c50:	b4 01       	movw	r22, r8
    2c52:	c2 01       	movw	r24, r4
    2c54:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 - x, color);
    2c58:	a8 01       	movw	r20, r16
    2c5a:	b4 01       	movw	r22, r8
    2c5c:	c1 01       	movw	r24, r2
    2c5e:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    2c62:	81 cf       	rjmp	.-254    	; 0x2b66 <ili9341_drawCircle+0xa2>

00002c64 <ili9341_drawCircleHelper>:

//DRaw Circle Helper
void ili9341_drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) 
{
    2c64:	2f 92       	push	r2
    2c66:	3f 92       	push	r3
    2c68:	4f 92       	push	r4
    2c6a:	5f 92       	push	r5
    2c6c:	6f 92       	push	r6
    2c6e:	7f 92       	push	r7
    2c70:	8f 92       	push	r8
    2c72:	9f 92       	push	r9
    2c74:	af 92       	push	r10
    2c76:	bf 92       	push	r11
    2c78:	cf 92       	push	r12
    2c7a:	df 92       	push	r13
    2c7c:	ef 92       	push	r14
    2c7e:	ff 92       	push	r15
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <ili9341_drawCircleHelper+0x26>
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <ili9341_drawCircleHelper+0x28>
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	6c 01       	movw	r12, r24
    2c92:	5b 01       	movw	r10, r22
    2c94:	5c 83       	std	Y+4, r21	; 0x04
    2c96:	4b 83       	std	Y+3, r20	; 0x03
  int16_t f     = 1 - r;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	4c 01       	movw	r8, r24
    2c9e:	84 1a       	sub	r8, r20
    2ca0:	95 0a       	sbc	r9, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    2ca2:	3a 01       	movw	r6, r20
    2ca4:	71 94       	neg	r7
    2ca6:	61 94       	neg	r6
    2ca8:	71 08       	sbc	r7, r1
    2caa:	66 0c       	add	r6, r6
    2cac:	77 1c       	adc	r7, r7
  int16_t x     = 0;
    2cae:	f1 2c       	mov	r15, r1
    2cb0:	e1 2c       	mov	r14, r1
  int16_t ddF_x = 1;
    2cb2:	44 24       	eor	r4, r4
    2cb4:	43 94       	inc	r4
    2cb6:	51 2c       	mov	r5, r1
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
    2cb8:	32 2f       	mov	r19, r18
    2cba:	34 70       	andi	r19, 0x04	; 4
    2cbc:	39 83       	std	Y+1, r19	; 0x01
      ili9341_drawpixel(x0 + x, y0 + y, color);
      ili9341_drawpixel(x0 + y, y0 + x, color);
    }
    if (cornername & 0x2) {
    2cbe:	42 2f       	mov	r20, r18
    2cc0:	42 70       	andi	r20, 0x02	; 2
    2cc2:	4a 83       	std	Y+2, r20	; 0x02
      ili9341_drawpixel(x0 + x, y0 - y, color);
      ili9341_drawpixel(x0 + y, y0 - x, color);
    }
    if (cornername & 0x8) {
    2cc4:	52 2f       	mov	r21, r18
    2cc6:	58 70       	andi	r21, 0x08	; 8
    2cc8:	25 2e       	mov	r2, r21
      ili9341_drawpixel(x0 - y, y0 + x, color);
      ili9341_drawpixel(x0 - x, y0 + y, color);
    }
    if (cornername & 0x1) {
    2cca:	21 70       	andi	r18, 0x01	; 1
    2ccc:	32 2e       	mov	r3, r18
  while (x<y) {
    2cce:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd2:	e2 16       	cp	r14, r18
    2cd4:	f3 06       	cpc	r15, r19
    2cd6:	bc f0       	brlt	.+46     	; 0x2d06 <ili9341_drawCircleHelper+0xa2>
      ili9341_drawpixel(x0 - y, y0 - x, color);
      ili9341_drawpixel(x0 - x, y0 - y, color);
    }
  }
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	df 90       	pop	r13
    2cee:	cf 90       	pop	r12
    2cf0:	bf 90       	pop	r11
    2cf2:	af 90       	pop	r10
    2cf4:	9f 90       	pop	r9
    2cf6:	8f 90       	pop	r8
    2cf8:	7f 90       	pop	r7
    2cfa:	6f 90       	pop	r6
    2cfc:	5f 90       	pop	r5
    2cfe:	4f 90       	pop	r4
    2d00:	3f 90       	pop	r3
    2d02:	2f 90       	pop	r2
    2d04:	08 95       	ret
    if (f >= 0) {
    2d06:	97 fc       	sbrc	r9, 7
    2d08:	0a c0       	rjmp	.+20     	; 0x2d1e <ili9341_drawCircleHelper+0xba>
      y--;
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	69 0e       	add	r6, r25
    2d18:	71 1c       	adc	r7, r1
      f     += ddF_y;
    2d1a:	86 0c       	add	r8, r6
    2d1c:	97 1c       	adc	r9, r7
    x++;
    2d1e:	2f ef       	ldi	r18, 0xFF	; 255
    2d20:	e2 1a       	sub	r14, r18
    2d22:	f2 0a       	sbc	r15, r18
    ddF_x += 2;
    2d24:	32 e0       	ldi	r19, 0x02	; 2
    2d26:	43 0e       	add	r4, r19
    2d28:	51 1c       	adc	r5, r1
    f     += ddF_x;
    2d2a:	84 0c       	add	r8, r4
    2d2c:	95 1c       	adc	r9, r5
    if (cornername & 0x4) {
    2d2e:	49 81       	ldd	r20, Y+1	; 0x01
    2d30:	44 23       	and	r20, r20
    2d32:	a1 f0       	breq	.+40     	; 0x2d5c <ili9341_drawCircleHelper+0xf8>
      ili9341_drawpixel(x0 + x, y0 + y, color);
    2d34:	a8 01       	movw	r20, r16
    2d36:	6b 81       	ldd	r22, Y+3	; 0x03
    2d38:	7c 81       	ldd	r23, Y+4	; 0x04
    2d3a:	6a 0d       	add	r22, r10
    2d3c:	7b 1d       	adc	r23, r11
    2d3e:	c6 01       	movw	r24, r12
    2d40:	8e 0d       	add	r24, r14
    2d42:	9f 1d       	adc	r25, r15
    2d44:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 + x, color);
    2d48:	a8 01       	movw	r20, r16
    2d4a:	b5 01       	movw	r22, r10
    2d4c:	6e 0d       	add	r22, r14
    2d4e:	7f 1d       	adc	r23, r15
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	8c 0d       	add	r24, r12
    2d56:	9d 1d       	adc	r25, r13
    2d58:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    if (cornername & 0x2) {
    2d5c:	5a 81       	ldd	r21, Y+2	; 0x02
    2d5e:	55 23       	and	r21, r21
    2d60:	a9 f0       	breq	.+42     	; 0x2d8c <ili9341_drawCircleHelper+0x128>
      ili9341_drawpixel(x0 + x, y0 - y, color);
    2d62:	a8 01       	movw	r20, r16
    2d64:	b5 01       	movw	r22, r10
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6a:	68 1b       	sub	r22, r24
    2d6c:	79 0b       	sbc	r23, r25
    2d6e:	c6 01       	movw	r24, r12
    2d70:	8e 0d       	add	r24, r14
    2d72:	9f 1d       	adc	r25, r15
    2d74:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 - x, color);
    2d78:	a8 01       	movw	r20, r16
    2d7a:	b5 01       	movw	r22, r10
    2d7c:	6e 19       	sub	r22, r14
    2d7e:	7f 09       	sbc	r23, r15
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	8c 0d       	add	r24, r12
    2d86:	9d 1d       	adc	r25, r13
    2d88:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    if (cornername & 0x8) {
    2d8c:	22 20       	and	r2, r2
    2d8e:	a9 f0       	breq	.+42     	; 0x2dba <ili9341_drawCircleHelper+0x156>
      ili9341_drawpixel(x0 - y, y0 + x, color);
    2d90:	a8 01       	movw	r20, r16
    2d92:	b5 01       	movw	r22, r10
    2d94:	6e 0d       	add	r22, r14
    2d96:	7f 1d       	adc	r23, r15
    2d98:	c6 01       	movw	r24, r12
    2d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9e:	82 1b       	sub	r24, r18
    2da0:	93 0b       	sbc	r25, r19
    2da2:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 + y, color);
    2da6:	a8 01       	movw	r20, r16
    2da8:	6b 81       	ldd	r22, Y+3	; 0x03
    2daa:	7c 81       	ldd	r23, Y+4	; 0x04
    2dac:	6a 0d       	add	r22, r10
    2dae:	7b 1d       	adc	r23, r11
    2db0:	c6 01       	movw	r24, r12
    2db2:	8e 19       	sub	r24, r14
    2db4:	9f 09       	sbc	r25, r15
    2db6:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    if (cornername & 0x1) {
    2dba:	33 20       	and	r3, r3
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <ili9341_drawCircleHelper+0x15c>
    2dbe:	87 cf       	rjmp	.-242    	; 0x2cce <ili9341_drawCircleHelper+0x6a>
      ili9341_drawpixel(x0 - y, y0 - x, color);
    2dc0:	a8 01       	movw	r20, r16
    2dc2:	b5 01       	movw	r22, r10
    2dc4:	6e 19       	sub	r22, r14
    2dc6:	7f 09       	sbc	r23, r15
    2dc8:	c6 01       	movw	r24, r12
    2dca:	2b 81       	ldd	r18, Y+3	; 0x03
    2dcc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dce:	82 1b       	sub	r24, r18
    2dd0:	93 0b       	sbc	r25, r19
    2dd2:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 - y, color);
    2dd6:	a8 01       	movw	r20, r16
    2dd8:	b5 01       	movw	r22, r10
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	68 1b       	sub	r22, r24
    2de0:	79 0b       	sbc	r23, r25
    2de2:	c6 01       	movw	r24, r12
    2de4:	8e 19       	sub	r24, r14
    2de6:	9f 09       	sbc	r25, r15
    2de8:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    2dec:	70 cf       	rjmp	.-288    	; 0x2cce <ili9341_drawCircleHelper+0x6a>

00002dee <ili9341_drawLine>:
}


// Bresenham's algorithm - thx wikpedia
void ili9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
    2dee:	2f 92       	push	r2
    2df0:	3f 92       	push	r3
    2df2:	4f 92       	push	r4
    2df4:	5f 92       	push	r5
    2df6:	6f 92       	push	r6
    2df8:	7f 92       	push	r7
    2dfa:	8f 92       	push	r8
    2dfc:	9f 92       	push	r9
    2dfe:	af 92       	push	r10
    2e00:	bf 92       	push	r11
    2e02:	cf 92       	push	r12
    2e04:	df 92       	push	r13
    2e06:	ef 92       	push	r14
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <ili9341_drawLine+0x26>
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <ili9341_drawLine+0x28>
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	6b 01       	movw	r12, r22
    2e1c:	7a 01       	movw	r14, r20
    2e1e:	3c 83       	std	Y+4, r19	; 0x04
    2e20:	2b 83       	std	Y+3, r18	; 0x03
    2e22:	58 01       	movw	r10, r16
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    2e24:	89 01       	movw	r16, r18
    2e26:	06 1b       	sub	r16, r22
    2e28:	17 0b       	sbc	r17, r23
    2e2a:	17 ff       	sbrs	r17, 7
    2e2c:	03 c0       	rjmp	.+6      	; 0x2e34 <ili9341_drawLine+0x46>
    2e2e:	11 95       	neg	r17
    2e30:	01 95       	neg	r16
    2e32:	11 09       	sbc	r17, r1
    2e34:	47 01       	movw	r8, r14
    2e36:	88 1a       	sub	r8, r24
    2e38:	99 0a       	sbc	r9, r25
    2e3a:	97 fe       	sbrs	r9, 7
    2e3c:	03 c0       	rjmp	.+6      	; 0x2e44 <ili9341_drawLine+0x56>
    2e3e:	91 94       	neg	r9
    2e40:	81 94       	neg	r8
    2e42:	91 08       	sbc	r9, r1
  if (steep) {
    2e44:	80 16       	cp	r8, r16
    2e46:	91 06       	cpc	r9, r17
    2e48:	5c f0       	brlt	.+22     	; 0x2e60 <ili9341_drawLine+0x72>
    2e4a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e4e:	fc 82       	std	Y+4, r15	; 0x04
    2e50:	eb 82       	std	Y+3, r14	; 0x03
    2e52:	e3 2e       	mov	r14, r19
    2e54:	f2 2e       	mov	r15, r18
    2e56:	3c 2d       	mov	r19, r12
    2e58:	2d 2d       	mov	r18, r13
    2e5a:	6c 01       	movw	r12, r24
    2e5c:	83 2f       	mov	r24, r19
    2e5e:	92 2f       	mov	r25, r18
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
    2e60:	2b 81       	ldd	r18, Y+3	; 0x03
    2e62:	3c 81       	ldd	r19, Y+4	; 0x04
    2e64:	2c 15       	cp	r18, r12
    2e66:	3d 05       	cpc	r19, r13
    2e68:	5c f0       	brlt	.+22     	; 0x2e80 <ili9341_drawLine+0x92>
    2e6a:	3e 2d       	mov	r19, r14
    2e6c:	2f 2d       	mov	r18, r15
    2e6e:	7c 01       	movw	r14, r24
    2e70:	83 2f       	mov	r24, r19
    2e72:	92 2f       	mov	r25, r18
    2e74:	3b 81       	ldd	r19, Y+3	; 0x03
    2e76:	2c 81       	ldd	r18, Y+4	; 0x04
    2e78:	dc 82       	std	Y+4, r13	; 0x04
    2e7a:	cb 82       	std	Y+3, r12	; 0x03
    2e7c:	c3 2e       	mov	r12, r19
    2e7e:	d2 2e       	mov	r13, r18
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
    2e80:	16 01       	movw	r2, r12
    2e82:	2b 81       	ldd	r18, Y+3	; 0x03
    2e84:	3c 81       	ldd	r19, Y+4	; 0x04
    2e86:	22 1a       	sub	r2, r18
    2e88:	33 0a       	sbc	r3, r19
  dy = abs(y1 - y0);
    2e8a:	2c 01       	movw	r4, r24
    2e8c:	4e 18       	sub	r4, r14
    2e8e:	5f 08       	sbc	r5, r15
    2e90:	57 fe       	sbrs	r5, 7
    2e92:	03 c0       	rjmp	.+6      	; 0x2e9a <ili9341_drawLine+0xac>
    2e94:	51 94       	neg	r5
    2e96:	41 94       	neg	r4
    2e98:	51 08       	sbc	r5, r1

  int16_t err = dx / 2;
    2e9a:	31 01       	movw	r6, r2
    2e9c:	37 fe       	sbrs	r3, 7
    2e9e:	03 c0       	rjmp	.+6      	; 0x2ea6 <ili9341_drawLine+0xb8>
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	63 1a       	sub	r6, r19
    2ea4:	73 0a       	sbc	r7, r19
    2ea6:	75 94       	asr	r7
    2ea8:	67 94       	ror	r6
  int16_t ystep;

  if (y0 < y1) {
    2eaa:	e8 16       	cp	r14, r24
    2eac:	f9 06       	cpc	r15, r25
    2eae:	e4 f1       	brlt	.+120    	; 0x2f28 <ili9341_drawLine+0x13a>
    ystep = 1;
  } else {
    ystep = -1;
    2eb0:	8f ef       	ldi	r24, 0xFF	; 255
    2eb2:	9f ef       	ldi	r25, 0xFF	; 255
    2eb4:	9a 83       	std	Y+2, r25	; 0x02
    2eb6:	89 83       	std	Y+1, r24	; 0x01
  }

  for (; x0<=x1; x0++) {
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	c8 16       	cp	r12, r24
    2ebe:	d9 06       	cpc	r13, r25
    2ec0:	bc f4       	brge	.+46     	; 0x2ef0 <ili9341_drawLine+0x102>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	ff 90       	pop	r15
    2ed4:	ef 90       	pop	r14
    2ed6:	df 90       	pop	r13
    2ed8:	cf 90       	pop	r12
    2eda:	bf 90       	pop	r11
    2edc:	af 90       	pop	r10
    2ede:	9f 90       	pop	r9
    2ee0:	8f 90       	pop	r8
    2ee2:	7f 90       	pop	r7
    2ee4:	6f 90       	pop	r6
    2ee6:	5f 90       	pop	r5
    2ee8:	4f 90       	pop	r4
    2eea:	3f 90       	pop	r3
    2eec:	2f 90       	pop	r2
    2eee:	08 95       	ret
      ili9341_drawpixel(y0, x0, color);
    2ef0:	a5 01       	movw	r20, r10
    2ef2:	6b 81       	ldd	r22, Y+3	; 0x03
    2ef4:	7c 81       	ldd	r23, Y+4	; 0x04
    2ef6:	c7 01       	movw	r24, r14
    if (steep) {
    2ef8:	80 16       	cp	r8, r16
    2efa:	91 06       	cpc	r9, r17
    2efc:	1c f0       	brlt	.+6      	; 0x2f04 <ili9341_drawLine+0x116>
      ili9341_drawpixel(x0, y0, color);
    2efe:	b7 01       	movw	r22, r14
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	9c 81       	ldd	r25, Y+4	; 0x04
    2f04:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    err -= dy;
    2f08:	64 18       	sub	r6, r4
    2f0a:	75 08       	sbc	r7, r5
    if (err < 0) {
    2f0c:	77 fe       	sbrs	r7, 7
    2f0e:	06 c0       	rjmp	.+12     	; 0x2f1c <ili9341_drawLine+0x12e>
      y0 += ystep;
    2f10:	29 81       	ldd	r18, Y+1	; 0x01
    2f12:	3a 81       	ldd	r19, Y+2	; 0x02
    2f14:	e2 0e       	add	r14, r18
    2f16:	f3 1e       	adc	r15, r19
      err += dx;
    2f18:	62 0c       	add	r6, r2
    2f1a:	73 1c       	adc	r7, r3
  for (; x0<=x1; x0++) {
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	c8 cf       	rjmp	.-112    	; 0x2eb8 <ili9341_drawLine+0xca>
    ystep = 1;
    2f28:	21 e0       	ldi	r18, 0x01	; 1
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	3a 83       	std	Y+2, r19	; 0x02
    2f2e:	29 83       	std	Y+1, r18	; 0x01
    2f30:	c3 cf       	rjmp	.-122    	; 0x2eb8 <ili9341_drawLine+0xca>

00002f32 <ili9341_drawFastVLine>:
{
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
  ili9341_drawLine(x, y, x, y+h-1, color);
    2f36:	46 0f       	add	r20, r22
    2f38:	57 1f       	adc	r21, r23
    2f3a:	41 50       	subi	r20, 0x01	; 1
    2f3c:	51 09       	sbc	r21, r1
    2f3e:	89 01       	movw	r16, r18
    2f40:	9a 01       	movw	r18, r20
    2f42:	ac 01       	movw	r20, r24
    2f44:	0e 94 f7 16 	call	0x2dee	; 0x2dee <ili9341_drawLine>
}
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	08 95       	ret

00002f4e <ili9341_fillCircleHelper>:
{
    2f4e:	2f 92       	push	r2
    2f50:	3f 92       	push	r3
    2f52:	4f 92       	push	r4
    2f54:	5f 92       	push	r5
    2f56:	6f 92       	push	r6
    2f58:	7f 92       	push	r7
    2f5a:	8f 92       	push	r8
    2f5c:	9f 92       	push	r9
    2f5e:	af 92       	push	r10
    2f60:	bf 92       	push	r11
    2f62:	cf 92       	push	r12
    2f64:	df 92       	push	r13
    2f66:	ef 92       	push	r14
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <ili9341_fillCircleHelper+0x26>
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <ili9341_fillCircleHelper+0x28>
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	5c 01       	movw	r10, r24
    2f7c:	4b 01       	movw	r8, r22
    2f7e:	5c 83       	std	Y+4, r21	; 0x04
    2f80:	4b 83       	std	Y+3, r20	; 0x03
  int16_t f     = 1 - r;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	2c 01       	movw	r4, r24
    2f88:	44 1a       	sub	r4, r20
    2f8a:	55 0a       	sbc	r5, r21
  int16_t ddF_y = -2 * r;
    2f8c:	1a 01       	movw	r2, r20
    2f8e:	31 94       	neg	r3
    2f90:	21 94       	neg	r2
    2f92:	31 08       	sbc	r3, r1
    2f94:	22 0c       	add	r2, r2
    2f96:	33 1c       	adc	r3, r3
  int16_t x     = 0;
    2f98:	d1 2c       	mov	r13, r1
    2f9a:	c1 2c       	mov	r12, r1
  int16_t ddF_x = 1;
    2f9c:	66 24       	eor	r6, r6
    2f9e:	63 94       	inc	r6
    2fa0:	71 2c       	mov	r7, r1
    if (cornername & 0x1) {
    2fa2:	42 2f       	mov	r20, r18
    2fa4:	41 70       	andi	r20, 0x01	; 1
    2fa6:	49 83       	std	Y+1, r20	; 0x01
    if (cornername & 0x2) {
    2fa8:	22 70       	andi	r18, 0x02	; 2
    2faa:	2a 83       	std	Y+2, r18	; 0x02
  while (x<y) {
    2fac:	4b 81       	ldd	r20, Y+3	; 0x03
    2fae:	5c 81       	ldd	r21, Y+4	; 0x04
    2fb0:	c4 16       	cp	r12, r20
    2fb2:	d5 06       	cpc	r13, r21
    2fb4:	bc f0       	brlt	.+46     	; 0x2fe4 <ili9341_fillCircleHelper+0x96>
}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	ff 90       	pop	r15
    2fc8:	ef 90       	pop	r14
    2fca:	df 90       	pop	r13
    2fcc:	cf 90       	pop	r12
    2fce:	bf 90       	pop	r11
    2fd0:	af 90       	pop	r10
    2fd2:	9f 90       	pop	r9
    2fd4:	8f 90       	pop	r8
    2fd6:	7f 90       	pop	r7
    2fd8:	6f 90       	pop	r6
    2fda:	5f 90       	pop	r5
    2fdc:	4f 90       	pop	r4
    2fde:	3f 90       	pop	r3
    2fe0:	2f 90       	pop	r2
    2fe2:	08 95       	ret
    if (f >= 0) {
    2fe4:	57 fc       	sbrc	r5, 7
    2fe6:	0a c0       	rjmp	.+20     	; 0x2ffc <ili9341_fillCircleHelper+0xae>
      y--;
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
    2ff2:	92 e0       	ldi	r25, 0x02	; 2
    2ff4:	29 0e       	add	r2, r25
    2ff6:	31 1c       	adc	r3, r1
      f     += ddF_y;
    2ff8:	42 0c       	add	r4, r2
    2ffa:	53 1c       	adc	r5, r3
    x++;
    2ffc:	ef ef       	ldi	r30, 0xFF	; 255
    2ffe:	ce 1a       	sub	r12, r30
    3000:	de 0a       	sbc	r13, r30
    ddF_x += 2;
    3002:	f2 e0       	ldi	r31, 0x02	; 2
    3004:	6f 0e       	add	r6, r31
    3006:	71 1c       	adc	r7, r1
    f     += ddF_x;
    3008:	46 0c       	add	r4, r6
    300a:	57 1c       	adc	r5, r7
    if (cornername & 0x1) {
    300c:	49 81       	ldd	r20, Y+1	; 0x01
    300e:	44 23       	and	r20, r20
    3010:	01 f1       	breq	.+64     	; 0x3052 <ili9341_fillCircleHelper+0x104>
      ili9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
    3012:	4b 81       	ldd	r20, Y+3	; 0x03
    3014:	5c 81       	ldd	r21, Y+4	; 0x04
    3016:	44 0f       	add	r20, r20
    3018:	55 1f       	adc	r21, r21
    301a:	4f 5f       	subi	r20, 0xFF	; 255
    301c:	5f 4f       	sbci	r21, 0xFF	; 255
    301e:	40 0f       	add	r20, r16
    3020:	51 1f       	adc	r21, r17
    3022:	97 01       	movw	r18, r14
    3024:	b4 01       	movw	r22, r8
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	68 1b       	sub	r22, r24
    302c:	79 0b       	sbc	r23, r25
    302e:	c5 01       	movw	r24, r10
    3030:	8c 0d       	add	r24, r12
    3032:	9d 1d       	adc	r25, r13
    3034:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    3038:	97 01       	movw	r18, r14
    303a:	a3 01       	movw	r20, r6
    303c:	40 0f       	add	r20, r16
    303e:	51 1f       	adc	r21, r17
    3040:	b4 01       	movw	r22, r8
    3042:	6c 19       	sub	r22, r12
    3044:	7d 09       	sbc	r23, r13
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	9c 81       	ldd	r25, Y+4	; 0x04
    304a:	8a 0d       	add	r24, r10
    304c:	9b 1d       	adc	r25, r11
    304e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
    if (cornername & 0x2) {
    3052:	9a 81       	ldd	r25, Y+2	; 0x02
    3054:	99 23       	and	r25, r25
    3056:	09 f4       	brne	.+2      	; 0x305a <ili9341_fillCircleHelper+0x10c>
    3058:	a9 cf       	rjmp	.-174    	; 0x2fac <ili9341_fillCircleHelper+0x5e>
      ili9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
    305a:	4b 81       	ldd	r20, Y+3	; 0x03
    305c:	5c 81       	ldd	r21, Y+4	; 0x04
    305e:	44 0f       	add	r20, r20
    3060:	55 1f       	adc	r21, r21
    3062:	4f 5f       	subi	r20, 0xFF	; 255
    3064:	5f 4f       	sbci	r21, 0xFF	; 255
    3066:	40 0f       	add	r20, r16
    3068:	51 1f       	adc	r21, r17
    306a:	97 01       	movw	r18, r14
    306c:	b4 01       	movw	r22, r8
    306e:	eb 81       	ldd	r30, Y+3	; 0x03
    3070:	fc 81       	ldd	r31, Y+4	; 0x04
    3072:	6e 1b       	sub	r22, r30
    3074:	7f 0b       	sbc	r23, r31
    3076:	c5 01       	movw	r24, r10
    3078:	8c 19       	sub	r24, r12
    307a:	9d 09       	sbc	r25, r13
    307c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    3080:	97 01       	movw	r18, r14
    3082:	a3 01       	movw	r20, r6
    3084:	40 0f       	add	r20, r16
    3086:	51 1f       	adc	r21, r17
    3088:	b4 01       	movw	r22, r8
    308a:	6c 19       	sub	r22, r12
    308c:	7d 09       	sbc	r23, r13
    308e:	c5 01       	movw	r24, r10
    3090:	eb 81       	ldd	r30, Y+3	; 0x03
    3092:	fc 81       	ldd	r31, Y+4	; 0x04
    3094:	8e 1b       	sub	r24, r30
    3096:	9f 0b       	sbc	r25, r31
    3098:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
    309c:	87 cf       	rjmp	.-242    	; 0x2fac <ili9341_fillCircleHelper+0x5e>

0000309e <ili9341_fillCircle>:
{
    309e:	af 92       	push	r10
    30a0:	bf 92       	push	r11
    30a2:	cf 92       	push	r12
    30a4:	df 92       	push	r13
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	6c 01       	movw	r12, r24
    30b4:	5b 01       	movw	r10, r22
    30b6:	ea 01       	movw	r28, r20
    30b8:	79 01       	movw	r14, r18
  ili9341_drawvline(x0, y0-r, 2*r+1, color);
    30ba:	44 0f       	add	r20, r20
    30bc:	55 1f       	adc	r21, r21
    30be:	4f 5f       	subi	r20, 0xFF	; 255
    30c0:	5f 4f       	sbci	r21, 0xFF	; 255
    30c2:	6c 1b       	sub	r22, r28
    30c4:	7d 0b       	sbc	r23, r29
    30c6:	c6 01       	movw	r24, r12
    30c8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <ili9341_drawvline>
  ili9341_fillCircleHelper(x0, y0, r, 3, 0, color);
    30cc:	10 e0       	ldi	r17, 0x00	; 0
    30ce:	00 e0       	ldi	r16, 0x00	; 0
    30d0:	23 e0       	ldi	r18, 0x03	; 3
    30d2:	ae 01       	movw	r20, r28
    30d4:	b5 01       	movw	r22, r10
    30d6:	c6 01       	movw	r24, r12
    30d8:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <ili9341_fillCircleHelper>
}
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
    30ec:	bf 90       	pop	r11
    30ee:	af 90       	pop	r10
    30f0:	08 95       	ret

000030f2 <ili9341_drawFastHLine>:
{
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
  ili9341_drawLine(x, y, x+w-1, y, color);
    30f6:	48 0f       	add	r20, r24
    30f8:	59 1f       	adc	r21, r25
    30fa:	41 50       	subi	r20, 0x01	; 1
    30fc:	51 09       	sbc	r21, r1
    30fe:	89 01       	movw	r16, r18
    3100:	9b 01       	movw	r18, r22
    3102:	0e 94 f7 16 	call	0x2dee	; 0x2dee <ili9341_drawLine>
}
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	08 95       	ret

0000310c <ili9341_drawRect>:

// Draw a rectangle
void ili9341_drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    310c:	af 92       	push	r10
    310e:	bf 92       	push	r11
    3110:	cf 92       	push	r12
    3112:	df 92       	push	r13
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	ec 01       	movw	r28, r24
    3122:	7b 01       	movw	r14, r22
    3124:	5a 01       	movw	r10, r20
    3126:	69 01       	movw	r12, r18
  ili9341_drawFastHLine(x, y, w, color);
    3128:	98 01       	movw	r18, r16
    312a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x, y+h-1, w, color);
    312e:	b7 01       	movw	r22, r14
    3130:	6c 0d       	add	r22, r12
    3132:	7d 1d       	adc	r23, r13
    3134:	61 50       	subi	r22, 0x01	; 1
    3136:	71 09       	sbc	r23, r1
    3138:	98 01       	movw	r18, r16
    313a:	a5 01       	movw	r20, r10
    313c:	ce 01       	movw	r24, r28
    313e:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x, y, h, color);
    3142:	98 01       	movw	r18, r16
    3144:	a6 01       	movw	r20, r12
    3146:	b7 01       	movw	r22, r14
    3148:	ce 01       	movw	r24, r28
    314a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y, h, color);
    314e:	ce 01       	movw	r24, r28
    3150:	8a 0d       	add	r24, r10
    3152:	9b 1d       	adc	r25, r11
    3154:	98 01       	movw	r18, r16
    3156:	a6 01       	movw	r20, r12
    3158:	b7 01       	movw	r22, r14
    315a:	01 97       	sbiw	r24, 0x01	; 1
}
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	ff 90       	pop	r15
    3166:	ef 90       	pop	r14
    3168:	df 90       	pop	r13
    316a:	cf 90       	pop	r12
    316c:	bf 90       	pop	r11
    316e:	af 90       	pop	r10
  ili9341_drawFastVLine(x+w-1, y, h, color);
    3170:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <ili9341_drawFastVLine>

00003174 <ili9341_fillRect>:


void ili9341_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    3174:	af 92       	push	r10
    3176:	bf 92       	push	r11
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	6b 01       	movw	r12, r22
    318a:	59 01       	movw	r10, r18
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
    318c:	ec 01       	movw	r28, r24
    318e:	7c 01       	movw	r14, r24
    3190:	e4 0e       	add	r14, r20
    3192:	f5 1e       	adc	r15, r21
    3194:	ce 15       	cp	r28, r14
    3196:	df 05       	cpc	r29, r15
    3198:	5c f0       	brlt	.+22     	; 0x31b0 <ili9341_fillRect+0x3c>
    ili9341_drawFastVLine(i, y, h, color);
  }
}
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	ff 90       	pop	r15
    31a4:	ef 90       	pop	r14
    31a6:	df 90       	pop	r13
    31a8:	cf 90       	pop	r12
    31aa:	bf 90       	pop	r11
    31ac:	af 90       	pop	r10
    31ae:	08 95       	ret
    ili9341_drawFastVLine(i, y, h, color);
    31b0:	98 01       	movw	r18, r16
    31b2:	a5 01       	movw	r20, r10
    31b4:	b6 01       	movw	r22, r12
    31b6:	ce 01       	movw	r24, r28
    31b8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
  for (int16_t i=x; i<x+w; i++) {
    31bc:	21 96       	adiw	r28, 0x01	; 1
    31be:	ea cf       	rjmp	.-44     	; 0x3194 <ili9341_fillRect+0x20>

000031c0 <ili9341_drawRoundRect>:
// Draw a rounded rectangle
void ili9341_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    31c0:	2f 92       	push	r2
    31c2:	3f 92       	push	r3
    31c4:	4f 92       	push	r4
    31c6:	5f 92       	push	r5
    31c8:	6f 92       	push	r6
    31ca:	7f 92       	push	r7
    31cc:	8f 92       	push	r8
    31ce:	9f 92       	push	r9
    31d0:	af 92       	push	r10
    31d2:	bf 92       	push	r11
    31d4:	cf 92       	push	r12
    31d6:	df 92       	push	r13
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <ili9341_drawRoundRect+0x26>
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <ili9341_drawRoundRect+0x28>
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	2c 01       	movw	r4, r24
    31ee:	3b 01       	movw	r6, r22
    31f0:	1a 01       	movw	r2, r20
    31f2:	69 01       	movw	r12, r18
    31f4:	1c 83       	std	Y+4, r17	; 0x04
    31f6:	0b 83       	std	Y+3, r16	; 0x03
  // smarter version
  ili9341_drawFastHLine(x+r  , y    , w-2*r, color); // Top
    31f8:	00 0f       	add	r16, r16
    31fa:	11 1f       	adc	r17, r17
    31fc:	4a 01       	movw	r8, r20
    31fe:	80 1a       	sub	r8, r16
    3200:	91 0a       	sbc	r9, r17
    3202:	ab 80       	ldd	r10, Y+3	; 0x03
    3204:	bc 80       	ldd	r11, Y+4	; 0x04
    3206:	a4 0c       	add	r10, r4
    3208:	b5 1c       	adc	r11, r5
    320a:	97 01       	movw	r18, r14
    320c:	a4 01       	movw	r20, r8
    320e:	c5 01       	movw	r24, r10
    3210:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    3214:	c3 01       	movw	r24, r6
    3216:	8c 0d       	add	r24, r12
    3218:	9d 1d       	adc	r25, r13
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	bc 01       	movw	r22, r24
    3220:	61 50       	subi	r22, 0x01	; 1
    3222:	71 09       	sbc	r23, r1
    3224:	97 01       	movw	r18, r14
    3226:	a4 01       	movw	r20, r8
    3228:	c5 01       	movw	r24, r10
    322a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x    , y+r  , h-2*r, color); // Left
    322e:	c0 1a       	sub	r12, r16
    3230:	d1 0a       	sbc	r13, r17
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	9c 81       	ldd	r25, Y+4	; 0x04
    3236:	68 0e       	add	r6, r24
    3238:	79 1e       	adc	r7, r25
    323a:	97 01       	movw	r18, r14
    323c:	a6 01       	movw	r20, r12
    323e:	b3 01       	movw	r22, r6
    3240:	c2 01       	movw	r24, r4
    3242:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    3246:	42 0c       	add	r4, r2
    3248:	53 1c       	adc	r5, r3
    324a:	97 01       	movw	r18, r14
    324c:	a6 01       	movw	r20, r12
    324e:	b3 01       	movw	r22, r6
    3250:	c2 01       	movw	r24, r4
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ili9341_drawFastVLine>
  // draw four corners
  ili9341_drawCircleHelper(x+r    , y+r    , r, 1, color);
    3258:	87 01       	movw	r16, r14
    325a:	21 e0       	ldi	r18, 0x01	; 1
    325c:	4b 81       	ldd	r20, Y+3	; 0x03
    325e:	5c 81       	ldd	r21, Y+4	; 0x04
    3260:	b3 01       	movw	r22, r6
    3262:	c5 01       	movw	r24, r10
    3264:	0e 94 32 16 	call	0x2c64	; 0x2c64 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	48 1a       	sub	r4, r24
    326e:	59 0a       	sbc	r5, r25
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	49 1a       	sub	r4, r25
    3274:	51 08       	sbc	r5, r1
    3276:	22 e0       	ldi	r18, 0x02	; 2
    3278:	4b 81       	ldd	r20, Y+3	; 0x03
    327a:	5c 81       	ldd	r21, Y+4	; 0x04
    327c:	b3 01       	movw	r22, r6
    327e:	c2 01       	movw	r24, r4
    3280:	0e 94 32 16 	call	0x2c64	; 0x2c64 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    3284:	c9 80       	ldd	r12, Y+1	; 0x01
    3286:	da 80       	ldd	r13, Y+2	; 0x02
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	9c 81       	ldd	r25, Y+4	; 0x04
    328c:	c8 1a       	sub	r12, r24
    328e:	d9 0a       	sbc	r13, r25
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	c9 1a       	sub	r12, r25
    3294:	d1 08       	sbc	r13, r1
    3296:	24 e0       	ldi	r18, 0x04	; 4
    3298:	4b 81       	ldd	r20, Y+3	; 0x03
    329a:	5c 81       	ldd	r21, Y+4	; 0x04
    329c:	b6 01       	movw	r22, r12
    329e:	c2 01       	movw	r24, r4
    32a0:	0e 94 32 16 	call	0x2c64	; 0x2c64 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    32a4:	28 e0       	ldi	r18, 0x08	; 8
    32a6:	4b 81       	ldd	r20, Y+3	; 0x03
    32a8:	5c 81       	ldd	r21, Y+4	; 0x04
    32aa:	b6 01       	movw	r22, r12
    32ac:	c5 01       	movw	r24, r10
    32ae:	0e 94 32 16 	call	0x2c64	; 0x2c64 <ili9341_drawCircleHelper>
}
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	1f 91       	pop	r17
    32c0:	0f 91       	pop	r16
    32c2:	ff 90       	pop	r15
    32c4:	ef 90       	pop	r14
    32c6:	df 90       	pop	r13
    32c8:	cf 90       	pop	r12
    32ca:	bf 90       	pop	r11
    32cc:	af 90       	pop	r10
    32ce:	9f 90       	pop	r9
    32d0:	8f 90       	pop	r8
    32d2:	7f 90       	pop	r7
    32d4:	6f 90       	pop	r6
    32d6:	5f 90       	pop	r5
    32d8:	4f 90       	pop	r4
    32da:	3f 90       	pop	r3
    32dc:	2f 90       	pop	r2
    32de:	08 95       	ret

000032e0 <ili9341_fillRoundRect>:

// Fill a rounded rectangle
void ili9341_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    32e0:	2f 92       	push	r2
    32e2:	3f 92       	push	r3
    32e4:	4f 92       	push	r4
    32e6:	5f 92       	push	r5
    32e8:	6f 92       	push	r6
    32ea:	7f 92       	push	r7
    32ec:	8f 92       	push	r8
    32ee:	9f 92       	push	r9
    32f0:	af 92       	push	r10
    32f2:	bf 92       	push	r11
    32f4:	cf 92       	push	r12
    32f6:	df 92       	push	r13
    32f8:	ef 92       	push	r14
    32fa:	ff 92       	push	r15
    32fc:	0f 93       	push	r16
    32fe:	1f 93       	push	r17
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	1c 01       	movw	r2, r24
    3306:	5b 01       	movw	r10, r22
    3308:	2a 01       	movw	r4, r20
    330a:	e9 01       	movw	r28, r18
    330c:	68 01       	movw	r12, r16
    330e:	47 01       	movw	r8, r14
  // smarter version
  ili9341_fillRect(x+r, y, w-2*r, h, color);
    3310:	78 01       	movw	r14, r16
    3312:	ee 0c       	add	r14, r14
    3314:	ff 1c       	adc	r15, r15
    3316:	38 01       	movw	r6, r16
    3318:	62 0c       	add	r6, r2
    331a:	73 1c       	adc	r7, r3
    331c:	4e 19       	sub	r20, r14
    331e:	5f 09       	sbc	r21, r15
    3320:	84 01       	movw	r16, r8
    3322:	c3 01       	movw	r24, r6
    3324:	0e 94 ba 18 	call	0x3174	; 0x3174 <ili9341_fillRect>

  // draw four corners
  ili9341_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    3328:	ce 19       	sub	r28, r14
    332a:	df 09       	sbc	r29, r15
    332c:	21 97       	sbiw	r28, 0x01	; 1
    332e:	ac 0c       	add	r10, r12
    3330:	bd 1c       	adc	r11, r13
    3332:	42 0c       	add	r4, r2
    3334:	53 1c       	adc	r5, r3
    3336:	c2 01       	movw	r24, r4
    3338:	8c 19       	sub	r24, r12
    333a:	9d 09       	sbc	r25, r13
    333c:	74 01       	movw	r14, r8
    333e:	8e 01       	movw	r16, r28
    3340:	21 e0       	ldi	r18, 0x01	; 1
    3342:	a6 01       	movw	r20, r12
    3344:	b5 01       	movw	r22, r10
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <ili9341_fillCircleHelper>
  ili9341_fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
    334c:	22 e0       	ldi	r18, 0x02	; 2
    334e:	a6 01       	movw	r20, r12
    3350:	b5 01       	movw	r22, r10
    3352:	c3 01       	movw	r24, r6
    3354:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <ili9341_fillCircleHelper>
}
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	ff 90       	pop	r15
    3362:	ef 90       	pop	r14
    3364:	df 90       	pop	r13
    3366:	cf 90       	pop	r12
    3368:	bf 90       	pop	r11
    336a:	af 90       	pop	r10
    336c:	9f 90       	pop	r9
    336e:	8f 90       	pop	r8
    3370:	7f 90       	pop	r7
    3372:	6f 90       	pop	r6
    3374:	5f 90       	pop	r5
    3376:	4f 90       	pop	r4
    3378:	3f 90       	pop	r3
    337a:	2f 90       	pop	r2
    337c:	08 95       	ret

0000337e <ili9341_drawBitmap>:

// Draw a 1-bit image (bitmap) at the specified (x,y) position from the
// provided bitmap buffer (must be PROGMEM memory) using the specified
// foreground color (unset bits are transparent).
void ili9341_drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    337e:	2f 92       	push	r2
    3380:	3f 92       	push	r3
    3382:	4f 92       	push	r4
    3384:	5f 92       	push	r5
    3386:	6f 92       	push	r6
    3388:	7f 92       	push	r7
    338a:	8f 92       	push	r8
    338c:	9f 92       	push	r9
    338e:	af 92       	push	r10
    3390:	bf 92       	push	r11
    3392:	cf 92       	push	r12
    3394:	df 92       	push	r13
    3396:	ef 92       	push	r14
    3398:	ff 92       	push	r15
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <ili9341_drawBitmap+0x26>
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <ili9341_drawBitmap+0x28>
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <ili9341_drawBitmap+0x2a>
    33a8:	1f 92       	push	r1
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	2c 01       	movw	r4, r24
    33b0:	3b 01       	movw	r6, r22
    33b2:	4a 01       	movw	r8, r20
    33b4:	59 01       	movw	r10, r18
    33b6:	18 01       	movw	r2, r16

  int16_t i, j, byteWidth = (w + 7) / 8;
    33b8:	c9 01       	movw	r24, r18
    33ba:	07 96       	adiw	r24, 0x07	; 7
    33bc:	97 fd       	sbrc	r25, 7
    33be:	07 96       	adiw	r24, 0x07	; 7
    33c0:	9c 01       	movw	r18, r24
    33c2:	93 e0       	ldi	r25, 0x03	; 3
    33c4:	35 95       	asr	r19
    33c6:	27 95       	ror	r18
    33c8:	9a 95       	dec	r25
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <ili9341_drawBitmap+0x46>
    33cc:	3b 83       	std	Y+3, r19	; 0x03
    33ce:	2a 83       	std	Y+2, r18	; 0x02
  uint8_t byte;

  for(j=0; j<h; j++) {
    33d0:	d1 2c       	mov	r13, r1
    33d2:	c1 2c       	mov	r12, r1
    33d4:	10 e0       	ldi	r17, 0x00	; 0
    33d6:	00 e0       	ldi	r16, 0x00	; 0
    33d8:	02 15       	cp	r16, r2
    33da:	13 05       	cpc	r17, r3
    33dc:	0c f4       	brge	.+2      	; 0x33e0 <ili9341_drawBitmap+0x62>
    33de:	4e c0       	rjmp	.+156    	; 0x347c <ili9341_drawBitmap+0xfe>
      if(i & 7) byte <<= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    33e0:	27 96       	adiw	r28, 0x07	; 7
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	df 91       	pop	r29
    33ee:	cf 91       	pop	r28
    33f0:	1f 91       	pop	r17
    33f2:	0f 91       	pop	r16
    33f4:	ff 90       	pop	r15
    33f6:	ef 90       	pop	r14
    33f8:	df 90       	pop	r13
    33fa:	cf 90       	pop	r12
    33fc:	bf 90       	pop	r11
    33fe:	af 90       	pop	r10
    3400:	9f 90       	pop	r9
    3402:	8f 90       	pop	r8
    3404:	7f 90       	pop	r7
    3406:	6f 90       	pop	r6
    3408:	5f 90       	pop	r5
    340a:	4f 90       	pop	r4
    340c:	3f 90       	pop	r3
    340e:	2f 90       	pop	r2
    3410:	08 95       	ret
      if(i & 7) byte <<= 1;
    3412:	8e 81       	ldd	r24, Y+6	; 0x06
    3414:	9f 81       	ldd	r25, Y+7	; 0x07
    3416:	87 70       	andi	r24, 0x07	; 7
    3418:	99 27       	eor	r25, r25
    341a:	89 2b       	or	r24, r25
    341c:	09 f1       	breq	.+66     	; 0x3460 <ili9341_drawBitmap+0xe2>
    341e:	39 81       	ldd	r19, Y+1	; 0x01
    3420:	33 0f       	add	r19, r19
    3422:	39 83       	std	Y+1, r19	; 0x01
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    3424:	99 81       	ldd	r25, Y+1	; 0x01
    3426:	97 ff       	sbrs	r25, 7
    3428:	09 c0       	rjmp	.+18     	; 0x343c <ili9341_drawBitmap+0xbe>
    342a:	a7 01       	movw	r20, r14
    342c:	6c 81       	ldd	r22, Y+4	; 0x04
    342e:	7d 81       	ldd	r23, Y+5	; 0x05
    3430:	8e 81       	ldd	r24, Y+6	; 0x06
    3432:	9f 81       	ldd	r25, Y+7	; 0x07
    3434:	84 0d       	add	r24, r4
    3436:	95 1d       	adc	r25, r5
    3438:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    for(i=0; i<w; i++) {
    343c:	2e 81       	ldd	r18, Y+6	; 0x06
    343e:	3f 81       	ldd	r19, Y+7	; 0x07
    3440:	2f 5f       	subi	r18, 0xFF	; 255
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	3f 83       	std	Y+7, r19	; 0x07
    3446:	2e 83       	std	Y+6, r18	; 0x06
    3448:	2e 81       	ldd	r18, Y+6	; 0x06
    344a:	3f 81       	ldd	r19, Y+7	; 0x07
    344c:	2a 15       	cp	r18, r10
    344e:	3b 05       	cpc	r19, r11
    3450:	04 f3       	brlt	.-64     	; 0x3412 <ili9341_drawBitmap+0x94>
  for(j=0; j<h; j++) {
    3452:	0f 5f       	subi	r16, 0xFF	; 255
    3454:	1f 4f       	sbci	r17, 0xFF	; 255
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	9b 81       	ldd	r25, Y+3	; 0x03
    345a:	c8 0e       	add	r12, r24
    345c:	d9 1e       	adc	r13, r25
    345e:	bc cf       	rjmp	.-136    	; 0x33d8 <ili9341_drawBitmap+0x5a>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    3460:	ee 81       	ldd	r30, Y+6	; 0x06
    3462:	ff 81       	ldd	r31, Y+7	; 0x07
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	f5 95       	asr	r31
    3468:	e7 95       	ror	r30
    346a:	8a 95       	dec	r24
    346c:	e1 f7       	brne	.-8      	; 0x3466 <ili9341_drawBitmap+0xe8>
    346e:	ec 0d       	add	r30, r12
    3470:	fd 1d       	adc	r31, r13
    3472:	e8 0d       	add	r30, r8
    3474:	f9 1d       	adc	r31, r9
    3476:	84 91       	lpm	r24, Z
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	d4 cf       	rjmp	.-88     	; 0x3424 <ili9341_drawBitmap+0xa6>
    for(i=0; i<w; i++) {
    347c:	1f 82       	std	Y+7, r1	; 0x07
    347e:	1e 82       	std	Y+6, r1	; 0x06
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    3480:	c8 01       	movw	r24, r16
    3482:	86 0d       	add	r24, r6
    3484:	97 1d       	adc	r25, r7
    3486:	9d 83       	std	Y+5, r25	; 0x05
    3488:	8c 83       	std	Y+4, r24	; 0x04
    348a:	de cf       	rjmp	.-68     	; 0x3448 <ili9341_drawBitmap+0xca>

0000348c <ili9341_drawXBitmap>:

//Draw XBitMap Files (*.xbm), exported from GIMP,
//Usage: Export from GIMP to *.xbm, rename *.xbm to *.c and open in editor.
//C Array can be directly used with this function
void ili9341_drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    348c:	2f 92       	push	r2
    348e:	3f 92       	push	r3
    3490:	4f 92       	push	r4
    3492:	5f 92       	push	r5
    3494:	6f 92       	push	r6
    3496:	7f 92       	push	r7
    3498:	8f 92       	push	r8
    349a:	9f 92       	push	r9
    349c:	af 92       	push	r10
    349e:	bf 92       	push	r11
    34a0:	cf 92       	push	r12
    34a2:	df 92       	push	r13
    34a4:	ef 92       	push	r14
    34a6:	ff 92       	push	r15
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <ili9341_drawXBitmap+0x26>
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <ili9341_drawXBitmap+0x28>
    34b4:	1f 92       	push	r1
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	2c 01       	movw	r4, r24
    34bc:	4b 01       	movw	r8, r22
    34be:	3a 01       	movw	r6, r20
    34c0:	59 01       	movw	r10, r18
    34c2:	18 01       	movw	r2, r16

  int16_t i, j, byteWidth = (w + 7) / 8;
    34c4:	c9 01       	movw	r24, r18
    34c6:	07 96       	adiw	r24, 0x07	; 7
    34c8:	97 fd       	sbrc	r25, 7
    34ca:	07 96       	adiw	r24, 0x07	; 7
    34cc:	9c 01       	movw	r18, r24
    34ce:	93 e0       	ldi	r25, 0x03	; 3
    34d0:	35 95       	asr	r19
    34d2:	27 95       	ror	r18
    34d4:	9a 95       	dec	r25
    34d6:	e1 f7       	brne	.-8      	; 0x34d0 <ili9341_drawXBitmap+0x44>
    34d8:	3b 83       	std	Y+3, r19	; 0x03
    34da:	2a 83       	std	Y+2, r18	; 0x02
  uint8_t byte;

  for(j=0; j<h; j++) {
    34dc:	84 01       	movw	r16, r8
    34de:	d1 2c       	mov	r13, r1
    34e0:	c1 2c       	mov	r12, r1
    34e2:	c8 01       	movw	r24, r16
    34e4:	88 19       	sub	r24, r8
    34e6:	99 09       	sbc	r25, r9
    34e8:	82 15       	cp	r24, r2
    34ea:	93 05       	cpc	r25, r3
    34ec:	0c f4       	brge	.+2      	; 0x34f0 <ili9341_drawXBitmap+0x64>
    34ee:	4c c0       	rjmp	.+152    	; 0x3588 <ili9341_drawXBitmap+0xfc>
      if(i & 7) byte >>= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	df 91       	pop	r29
    34fc:	cf 91       	pop	r28
    34fe:	1f 91       	pop	r17
    3500:	0f 91       	pop	r16
    3502:	ff 90       	pop	r15
    3504:	ef 90       	pop	r14
    3506:	df 90       	pop	r13
    3508:	cf 90       	pop	r12
    350a:	bf 90       	pop	r11
    350c:	af 90       	pop	r10
    350e:	9f 90       	pop	r9
    3510:	8f 90       	pop	r8
    3512:	7f 90       	pop	r7
    3514:	6f 90       	pop	r6
    3516:	5f 90       	pop	r5
    3518:	4f 90       	pop	r4
    351a:	3f 90       	pop	r3
    351c:	2f 90       	pop	r2
    351e:	08 95       	ret
      if(i & 7) byte >>= 1;
    3520:	8c 81       	ldd	r24, Y+4	; 0x04
    3522:	9d 81       	ldd	r25, Y+5	; 0x05
    3524:	87 70       	andi	r24, 0x07	; 7
    3526:	99 27       	eor	r25, r25
    3528:	89 2b       	or	r24, r25
    352a:	01 f1       	breq	.+64     	; 0x356c <ili9341_drawXBitmap+0xe0>
    352c:	39 81       	ldd	r19, Y+1	; 0x01
    352e:	36 95       	lsr	r19
    3530:	39 83       	std	Y+1, r19	; 0x01
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    3532:	99 81       	ldd	r25, Y+1	; 0x01
    3534:	90 ff       	sbrs	r25, 0
    3536:	08 c0       	rjmp	.+16     	; 0x3548 <ili9341_drawXBitmap+0xbc>
    3538:	a7 01       	movw	r20, r14
    353a:	b8 01       	movw	r22, r16
    353c:	8c 81       	ldd	r24, Y+4	; 0x04
    353e:	9d 81       	ldd	r25, Y+5	; 0x05
    3540:	84 0d       	add	r24, r4
    3542:	95 1d       	adc	r25, r5
    3544:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
    for(i=0; i<w; i++ ) {
    3548:	2c 81       	ldd	r18, Y+4	; 0x04
    354a:	3d 81       	ldd	r19, Y+5	; 0x05
    354c:	2f 5f       	subi	r18, 0xFF	; 255
    354e:	3f 4f       	sbci	r19, 0xFF	; 255
    3550:	3d 83       	std	Y+5, r19	; 0x05
    3552:	2c 83       	std	Y+4, r18	; 0x04
    3554:	8c 81       	ldd	r24, Y+4	; 0x04
    3556:	9d 81       	ldd	r25, Y+5	; 0x05
    3558:	8a 15       	cp	r24, r10
    355a:	9b 05       	cpc	r25, r11
    355c:	0c f3       	brlt	.-62     	; 0x3520 <ili9341_drawXBitmap+0x94>
    355e:	0f 5f       	subi	r16, 0xFF	; 255
    3560:	1f 4f       	sbci	r17, 0xFF	; 255
    3562:	2a 81       	ldd	r18, Y+2	; 0x02
    3564:	3b 81       	ldd	r19, Y+3	; 0x03
    3566:	c2 0e       	add	r12, r18
    3568:	d3 1e       	adc	r13, r19
    356a:	bb cf       	rjmp	.-138    	; 0x34e2 <ili9341_drawXBitmap+0x56>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    356c:	ec 81       	ldd	r30, Y+4	; 0x04
    356e:	fd 81       	ldd	r31, Y+5	; 0x05
    3570:	83 e0       	ldi	r24, 0x03	; 3
    3572:	f5 95       	asr	r31
    3574:	e7 95       	ror	r30
    3576:	8a 95       	dec	r24
    3578:	e1 f7       	brne	.-8      	; 0x3572 <ili9341_drawXBitmap+0xe6>
    357a:	ec 0d       	add	r30, r12
    357c:	fd 1d       	adc	r31, r13
    357e:	e6 0d       	add	r30, r6
    3580:	f7 1d       	adc	r31, r7
    3582:	84 91       	lpm	r24, Z
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	d5 cf       	rjmp	.-86     	; 0x3532 <ili9341_drawXBitmap+0xa6>
    for(i=0; i<w; i++ ) {
    3588:	1d 82       	std	Y+5, r1	; 0x05
    358a:	1c 82       	std	Y+4, r1	; 0x04
    358c:	e3 cf       	rjmp	.-58     	; 0x3554 <ili9341_drawXBitmap+0xc8>

0000358e <backuplocationvset>:



void backuplocationvset(void)//backing up vset data start location to print next vset data in exact location
{
vsetx=cursor_x;
    358e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <cursor_x>
    3592:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <cursor_x+0x1>
    3596:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <vsetx+0x1>
    359a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <vsetx>
vsety=cursor_y;
    359e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    35a2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    35a6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <vsety+0x1>
    35aa:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <vsety>
}
    35ae:	08 95       	ret

000035b0 <backuplocationvactual>:


void backuplocationvactual(void)//backing up vactual data start location to print next vactual data in exact location
{
vactualx=cursor_x;
    35b0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <cursor_x>
    35b4:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <cursor_x+0x1>
    35b8:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <vactualx+0x1>
    35bc:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <vactualx>
vactualy=cursor_y;
    35c0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    35c4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    35c8:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <vactualy+0x1>
    35cc:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <vactualy>
}
    35d0:	08 95       	ret

000035d2 <backuplocationiset>:

void backuplocationiset(void)//backing up iset data start location to print next iset data in exact location
{
isetx=cursor_x;
    35d2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <cursor_x>
    35d6:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <cursor_x+0x1>
    35da:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <isetx+0x1>
    35de:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <isetx>
isety=cursor_y;
    35e2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    35e6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    35ea:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <isety+0x1>
    35ee:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <isety>
}
    35f2:	08 95       	ret

000035f4 <backuplocationiactual>:


void backuplocationiactual(void)//backing up iactual data start location to print next iactual data in exact location
{
iactualx=cursor_x;
    35f4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <cursor_x>
    35f8:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <cursor_x+0x1>
    35fc:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <iactualx+0x1>
    3600:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <iactualx>
iactualy=cursor_y;
    3604:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    3608:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    360c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <iactualy+0x1>
    3610:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <iactualy>
}
    3614:	08 95       	ret

00003616 <ili9341_drawchar>:
};

extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{
    3616:	2f 92       	push	r2
    3618:	3f 92       	push	r3
    361a:	4f 92       	push	r4
    361c:	5f 92       	push	r5
    361e:	6f 92       	push	r6
    3620:	7f 92       	push	r7
    3622:	8f 92       	push	r8
    3624:	9f 92       	push	r9
    3626:	af 92       	push	r10
    3628:	bf 92       	push	r11
    362a:	cf 92       	push	r12
    362c:	df 92       	push	r13
    362e:	ef 92       	push	r14
    3630:	ff 92       	push	r15
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	00 d0       	rcall	.+0      	; 0x363c <ili9341_drawchar+0x26>
    363c:	00 d0       	rcall	.+0      	; 0x363e <ili9341_drawchar+0x28>
    363e:	00 d0       	rcall	.+0      	; 0x3640 <ili9341_drawchar+0x2a>
    3640:	1f 92       	push	r1
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	4b 01       	movw	r8, r22
    3648:	19 01       	movw	r2, r18
    364a:	1b 83       	std	Y+3, r17	; 0x03
    364c:	0a 83       	std	Y+2, r16	; 0x02

if((x >=LCD_W)            || // Clip right
    364e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <LCD_W>
    3652:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <LCD_W+0x1>
    3656:	82 17       	cp	r24, r18
    3658:	93 07       	cpc	r25, r19
    365a:	08 f0       	brcs	.+2      	; 0x365e <ili9341_drawchar+0x48>
    365c:	60 c0       	rjmp	.+192    	; 0x371e <ili9341_drawchar+0x108>
    365e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <LCD_H>
    3662:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <LCD_H+0x1>
    3666:	62 17       	cp	r22, r18
    3668:	73 07       	cpc	r23, r19
    366a:	08 f0       	brcs	.+2      	; 0x366e <ili9341_drawchar+0x58>
    366c:	58 c0       	rjmp	.+176    	; 0x371e <ili9341_drawchar+0x108>
(y >=LCD_H)           || // Clip bottom
((x + 6 * size - 1) < 0) || // Clip left
    366e:	9c 01       	movw	r18, r24
    3670:	56 e0       	ldi	r21, 0x06	; 6
    3672:	e5 9e       	mul	r14, r21
    3674:	20 0d       	add	r18, r0
    3676:	31 1d       	adc	r19, r1
    3678:	11 24       	eor	r1, r1
(y >=LCD_H)           || // Clip bottom
    367a:	12 16       	cp	r1, r18
    367c:	13 06       	cpc	r1, r19
    367e:	0c f0       	brlt	.+2      	; 0x3682 <ili9341_drawchar+0x6c>
    3680:	4e c0       	rjmp	.+156    	; 0x371e <ili9341_drawchar+0x108>
((y + 8 * size - 1) < 0))   // Clip top
    3682:	ce 2c       	mov	r12, r14
    3684:	d1 2c       	mov	r13, r1
    3686:	96 01       	movw	r18, r12
    3688:	53 e0       	ldi	r21, 0x03	; 3
    368a:	22 0f       	add	r18, r18
    368c:	33 1f       	adc	r19, r19
    368e:	5a 95       	dec	r21
    3690:	e1 f7       	brne	.-8      	; 0x368a <ili9341_drawchar+0x74>
    3692:	26 0f       	add	r18, r22
    3694:	37 1f       	adc	r19, r23
((x + 6 * size - 1) < 0) || // Clip left
    3696:	12 16       	cp	r1, r18
    3698:	13 06       	cpc	r1, r19
    369a:	0c f0       	brlt	.+2      	; 0x369e <ili9341_drawchar+0x88>
    369c:	40 c0       	rjmp	.+128    	; 0x371e <ili9341_drawchar+0x108>
for (int8_t i=0; i<6; i++ ) {
uint8_t line;
if (i == 5) 
line = 0x0;
else 
line = pgm_read_byte(font+(c*5)+i);
    369e:	25 e0       	ldi	r18, 0x05	; 5
    36a0:	42 9f       	mul	r20, r18
    36a2:	a0 01       	movw	r20, r0
    36a4:	11 24       	eor	r1, r1
    36a6:	9f 83       	std	Y+7, r25	; 0x07
    36a8:	8e 83       	std	Y+6, r24	; 0x06
    36aa:	5c 01       	movw	r10, r24
for (int8_t i=0; i<6; i++ ) {
    36ac:	19 82       	std	Y+1, r1	; 0x01
line = pgm_read_byte(font+(c*5)+i);
    36ae:	48 55       	subi	r20, 0x58	; 88
    36b0:	50 4e       	sbci	r21, 0xE0	; 224
    36b2:	9a 01       	movw	r18, r20
    36b4:	28 1b       	sub	r18, r24
    36b6:	39 0b       	sbc	r19, r25
    36b8:	3d 83       	std	Y+5, r19	; 0x05
    36ba:	2c 83       	std	Y+4, r18	; 0x04
if (i == 5) 
    36bc:	39 81       	ldd	r19, Y+1	; 0x01
line = 0x0;
    36be:	f1 2c       	mov	r15, r1
if (i == 5) 
    36c0:	35 30       	cpi	r19, 0x05	; 5
    36c2:	29 f0       	breq	.+10     	; 0x36ce <ili9341_drawchar+0xb8>
line = pgm_read_byte(font+(c*5)+i);
    36c4:	ec 81       	ldd	r30, Y+4	; 0x04
    36c6:	fd 81       	ldd	r31, Y+5	; 0x05
    36c8:	ea 0d       	add	r30, r10
    36ca:	fb 1d       	adc	r31, r11
    36cc:	f4 90       	lpm	r15, Z
line = 0x0;
    36ce:	24 01       	movw	r4, r8
    36d0:	71 2c       	mov	r7, r1
    36d2:	61 2c       	mov	r6, r1
for (int8_t j = 0; j<8; j++) {
if (line & 0x1) {
    36d4:	f0 fe       	sbrs	r15, 0
    36d6:	3c c0       	rjmp	.+120    	; 0x3750 <ili9341_drawchar+0x13a>
if (size == 1) // default size
    36d8:	51 e0       	ldi	r21, 0x01	; 1
ili9341_drawpixel(x+i, y+j, color);
else {  // big size
ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
    36da:	81 01       	movw	r16, r2
if (size == 1) // default size
    36dc:	e5 12       	cpse	r14, r21
    36de:	45 c0       	rjmp	.+138    	; 0x376a <ili9341_drawchar+0x154>
ili9341_drawpixel(x+i, y+j, color);
    36e0:	a1 01       	movw	r20, r2
} 
} else if (bg != color) {
if (size == 1) // default size
ili9341_drawpixel(x+i, y+j, bg);
    36e2:	b4 01       	movw	r22, r8
    36e4:	66 0d       	add	r22, r6
    36e6:	77 1d       	adc	r23, r7
    36e8:	c5 01       	movw	r24, r10
    36ea:	0e 94 43 14 	call	0x2886	; 0x2886 <ili9341_drawpixel>
else 
{  // big size
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
}
}
line >>= 1;
    36ee:	f6 94       	lsr	r15
    36f0:	2f ef       	ldi	r18, 0xFF	; 255
    36f2:	62 1a       	sub	r6, r18
    36f4:	72 0a       	sbc	r7, r18
    36f6:	4c 0c       	add	r4, r12
    36f8:	5d 1c       	adc	r5, r13
for (int8_t j = 0; j<8; j++) {
    36fa:	38 e0       	ldi	r19, 0x08	; 8
    36fc:	63 16       	cp	r6, r19
    36fe:	71 04       	cpc	r7, r1
    3700:	49 f7       	brne	.-46     	; 0x36d4 <ili9341_drawchar+0xbe>
    3702:	5f ef       	ldi	r21, 0xFF	; 255
    3704:	a5 1a       	sub	r10, r21
    3706:	b5 0a       	sbc	r11, r21
    3708:	8e 81       	ldd	r24, Y+6	; 0x06
    370a:	9f 81       	ldd	r25, Y+7	; 0x07
    370c:	8c 0d       	add	r24, r12
    370e:	9d 1d       	adc	r25, r13
    3710:	9f 83       	std	Y+7, r25	; 0x07
    3712:	8e 83       	std	Y+6, r24	; 0x06
    3714:	99 81       	ldd	r25, Y+1	; 0x01
    3716:	9f 5f       	subi	r25, 0xFF	; 255
    3718:	99 83       	std	Y+1, r25	; 0x01
for (int8_t i=0; i<6; i++ ) {
    371a:	96 30       	cpi	r25, 0x06	; 6
    371c:	79 f6       	brne	.-98     	; 0x36bc <ili9341_drawchar+0xa6>
}
}
}
    371e:	27 96       	adiw	r28, 0x07	; 7
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	f8 94       	cli
    3724:	de bf       	out	0x3e, r29	; 62
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	cd bf       	out	0x3d, r28	; 61
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	ff 90       	pop	r15
    3734:	ef 90       	pop	r14
    3736:	df 90       	pop	r13
    3738:	cf 90       	pop	r12
    373a:	bf 90       	pop	r11
    373c:	af 90       	pop	r10
    373e:	9f 90       	pop	r9
    3740:	8f 90       	pop	r8
    3742:	7f 90       	pop	r7
    3744:	6f 90       	pop	r6
    3746:	5f 90       	pop	r5
    3748:	4f 90       	pop	r4
    374a:	3f 90       	pop	r3
    374c:	2f 90       	pop	r2
    374e:	08 95       	ret
} else if (bg != color) {
    3750:	8a 81       	ldd	r24, Y+2	; 0x02
    3752:	9b 81       	ldd	r25, Y+3	; 0x03
    3754:	82 15       	cp	r24, r2
    3756:	93 05       	cpc	r25, r3
    3758:	51 f2       	breq	.-108    	; 0x36ee <ili9341_drawchar+0xd8>
if (size == 1) // default size
    375a:	91 e0       	ldi	r25, 0x01	; 1
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    375c:	0a 81       	ldd	r16, Y+2	; 0x02
    375e:	1b 81       	ldd	r17, Y+3	; 0x03
if (size == 1) // default size
    3760:	e9 12       	cpse	r14, r25
    3762:	03 c0       	rjmp	.+6      	; 0x376a <ili9341_drawchar+0x154>
ili9341_drawpixel(x+i, y+j, bg);
    3764:	4a 81       	ldd	r20, Y+2	; 0x02
    3766:	5b 81       	ldd	r21, Y+3	; 0x03
    3768:	bc cf       	rjmp	.-136    	; 0x36e2 <ili9341_drawchar+0xcc>
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    376a:	96 01       	movw	r18, r12
    376c:	a6 01       	movw	r20, r12
    376e:	b2 01       	movw	r22, r4
    3770:	8e 81       	ldd	r24, Y+6	; 0x06
    3772:	9f 81       	ldd	r25, Y+7	; 0x07
    3774:	0e 94 d6 14 	call	0x29ac	; 0x29ac <ili9341_fillrect>
    3778:	ba cf       	rjmp	.-140    	; 0x36ee <ili9341_drawchar+0xd8>

0000377a <ili9341_setcursor>:


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
cursor_x=x;
    377a:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <cursor_x+0x1>
    377e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <cursor_x>
cursor_y=y;
    3782:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <cursor_y+0x1>
    3786:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <cursor_y>
}
    378a:	08 95       	ret

0000378c <ili9341_settextcolour>:

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
textcolour=x;
    378c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <textcolour+0x1>
    3790:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <textcolour>
textbgcolour=y;
    3794:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <textbgcolour+0x1>
    3798:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <textbgcolour>
}
    379c:	08 95       	ret

0000379e <ili9341_settextsize>:

void ili9341_settextsize(uint8_t s)
{
if(s>8) return;
    379e:	89 30       	cpi	r24, 0x09	; 9
    37a0:	28 f4       	brcc	.+10     	; 0x37ac <ili9341_settextsize+0xe>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    37a2:	81 11       	cpse	r24, r1
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <ili9341_settextsize+0xa>
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <textsize>
}
    37ac:	08 95       	ret

000037ae <ili9341_write>:

void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and colour
{
    37ae:	ef 92       	push	r14
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	48 2f       	mov	r20, r24
if (c == '\n') {
    37b6:	8a 30       	cpi	r24, 0x0A	; 10
    37b8:	c1 f4       	brne	.+48     	; 0x37ea <ili9341_write+0x3c>
cursor_y += textsize*8;
    37ba:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <textsize>
    37be:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <cursor_y>
    37c2:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <cursor_y+0x1>
    37c6:	48 e0       	ldi	r20, 0x08	; 8
    37c8:	84 9f       	mul	r24, r20
    37ca:	c0 01       	movw	r24, r0
    37cc:	11 24       	eor	r1, r1
    37ce:	82 0f       	add	r24, r18
    37d0:	93 1f       	adc	r25, r19
    37d2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    37d6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
cursor_x  = 0;
    37da:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <cursor_x+0x1>
    37de:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <cursor_x>
else
{
ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
cursor_x += textsize*6;
}
}
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	ef 90       	pop	r14
    37e8:	08 95       	ret
} else if (c == '\r') {
    37ea:	8d 30       	cpi	r24, 0x0D	; 13
    37ec:	d1 f3       	breq	.-12     	; 0x37e2 <ili9341_write+0x34>
ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
    37ee:	e0 90 88 01 	lds	r14, 0x0188	; 0x800188 <textsize>
    37f2:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <textbgcolour>
    37f6:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <textbgcolour+0x1>
    37fa:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <textcolour>
    37fe:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <textcolour+0x1>
    3802:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <cursor_y>
    3806:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <cursor_y+0x1>
    380a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <cursor_x>
    380e:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <cursor_x+0x1>
    3812:	0e 94 0b 1b 	call	0x3616	; 0x3616 <ili9341_drawchar>
cursor_x += textsize*6;
    3816:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <textsize>
    381a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <cursor_x>
    381e:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <cursor_x+0x1>
    3822:	36 e0       	ldi	r19, 0x06	; 6
    3824:	23 9f       	mul	r18, r19
    3826:	80 0d       	add	r24, r0
    3828:	91 1d       	adc	r25, r1
    382a:	11 24       	eor	r1, r1
    382c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <cursor_x+0x1>
    3830:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <cursor_x>
}
    3834:	d6 cf       	rjmp	.-84     	; 0x37e2 <ili9341_write+0x34>

00003836 <ili9341_putchar_printf>:
	ili9341_write(var);
    3836:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
}
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	08 95       	ret

00003840 <display_init>:


void display_init(void)//display initial data regarding my power supply
{
    3840:	8f 92       	push	r8
    3842:	9f 92       	push	r9
    3844:	af 92       	push	r10
    3846:	bf 92       	push	r11
    3848:	df 92       	push	r13
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
stdout = & mydata;//it is used for printf function and must be declared locally
    3856:	86 e1       	ldi	r24, 0x16	; 22
    3858:	91 e0       	ldi	r25, 0x01	; 1
    385a:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <__iob+0x3>
    385e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <__iob+0x2>
cursor_x=x;
    3862:	04 e0       	ldi	r16, 0x04	; 4
    3864:	10 e0       	ldi	r17, 0x00	; 0
    3866:	10 93 87 01 	sts	0x0187, r17	; 0x800187 <cursor_x+0x1>
    386a:	00 93 86 01 	sts	0x0186, r16	; 0x800186 <cursor_x>
cursor_y=y;
    386e:	10 93 75 01 	sts	0x0175, r17	; 0x800175 <cursor_y+0x1>
    3872:	00 93 74 01 	sts	0x0174, r16	; 0x800174 <cursor_y>
    3876:	8f e3       	ldi	r24, 0x3F	; 63
    3878:	9f e1       	ldi	r25, 0x1F	; 31
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <display_init+0x3a>
    387e:	00 c0       	rjmp	.+0      	; 0x3880 <display_init+0x40>
    3880:	00 00       	nop
textcolour=x;
    3882:	80 ee       	ldi	r24, 0xE0	; 224
    3884:	97 e0       	ldi	r25, 0x07	; 7
    3886:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <textcolour+0x1>
    388a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <textcolour>
textbgcolour=y;
    388e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <textbgcolour+0x1>
    3892:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <textbgcolour>
    3896:	8f e3       	ldi	r24, 0x3F	; 63
    3898:	9f e1       	ldi	r25, 0x1F	; 31
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <display_init+0x5a>
    389e:	00 c0       	rjmp	.+0      	; 0x38a0 <display_init+0x60>
    38a0:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    38a2:	c2 e0       	ldi	r28, 0x02	; 2
    38a4:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <textsize>
    38a8:	8f e3       	ldi	r24, 0x3F	; 63
    38aa:	9f e1       	ldi	r25, 0x1F	; 31
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <display_init+0x6c>
    38b0:	00 c0       	rjmp	.+0      	; 0x38b2 <display_init+0x72>
    38b2:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(GREEN,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("mode - ");
    38b4:	84 e2       	ldi	r24, 0x24	; 36
    38b6:	91 e0       	ldi	r25, 0x01	; 1
    38b8:	9f 93       	push	r25
    38ba:	8f 93       	push	r24
    38bc:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    38c0:	8f e3       	ldi	r24, 0x3F	; 63
    38c2:	9f e1       	ldi	r25, 0x1F	; 31
    38c4:	01 97       	sbiw	r24, 0x01	; 1
    38c6:	f1 f7       	brne	.-4      	; 0x38c4 <display_init+0x84>
    38c8:	00 c0       	rjmp	.+0      	; 0x38ca <display_init+0x8a>
    38ca:	00 00       	nop
textcolour=x;
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	98 ef       	ldi	r25, 0xF8	; 248
    38d0:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <textcolour+0x1>
    38d4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <textcolour>
textbgcolour=y;
    38d8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <textbgcolour+0x1>
    38dc:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <textbgcolour>
    38e0:	8f e3       	ldi	r24, 0x3F	; 63
    38e2:	9f e1       	ldi	r25, 0x1F	; 31
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <display_init+0xa4>
    38e8:	00 c0       	rjmp	.+0      	; 0x38ea <display_init+0xaa>
    38ea:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    38ec:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <textsize>
    38f0:	8f e3       	ldi	r24, 0x3F	; 63
    38f2:	9f e1       	ldi	r25, 0x1F	; 31
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <display_init+0xb4>
    38f8:	00 c0       	rjmp	.+0      	; 0x38fa <display_init+0xba>
    38fa:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(RED,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("constant voltage");
    38fc:	8c e2       	ldi	r24, 0x2C	; 44
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	9f 93       	push	r25
    3902:	8f 93       	push	r24
    3904:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    3908:	8f e3       	ldi	r24, 0x3F	; 63
    390a:	9f e1       	ldi	r25, 0x1F	; 31
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	f1 f7       	brne	.-4      	; 0x390c <display_init+0xcc>
    3910:	00 c0       	rjmp	.+0      	; 0x3912 <display_init+0xd2>
    3912:	00 00       	nop
cursor_x=x;
    3914:	10 93 87 01 	sts	0x0187, r17	; 0x800187 <cursor_x+0x1>
    3918:	00 93 86 01 	sts	0x0186, r16	; 0x800186 <cursor_x>
cursor_y=y;
    391c:	88 e2       	ldi	r24, 0x28	; 40
    391e:	a8 2e       	mov	r10, r24
    3920:	b1 2c       	mov	r11, r1
    3922:	b0 92 75 01 	sts	0x0175, r11	; 0x800175 <cursor_y+0x1>
    3926:	a0 92 74 01 	sts	0x0174, r10	; 0x800174 <cursor_y>
    392a:	8f e3       	ldi	r24, 0x3F	; 63
    392c:	9f e1       	ldi	r25, 0x1F	; 31
    392e:	01 97       	sbiw	r24, 0x01	; 1
    3930:	f1 f7       	brne	.-4      	; 0x392e <display_init+0xee>
    3932:	00 c0       	rjmp	.+0      	; 0x3934 <display_init+0xf4>
    3934:	00 00       	nop
textcolour=x;
    3936:	8f ef       	ldi	r24, 0xFF	; 255
    3938:	97 e0       	ldi	r25, 0x07	; 7
    393a:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <textcolour+0x1>
    393e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <textcolour>
textbgcolour=y;
    3942:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <textbgcolour+0x1>
    3946:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <textbgcolour>
    394a:	8f e3       	ldi	r24, 0x3F	; 63
    394c:	9f e1       	ldi	r25, 0x1F	; 31
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	f1 f7       	brne	.-4      	; 0x394e <display_init+0x10e>
    3952:	00 c0       	rjmp	.+0      	; 0x3954 <display_init+0x114>
    3954:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3956:	d4 e0       	ldi	r29, 0x04	; 4
    3958:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <textsize>
    395c:	8f e3       	ldi	r24, 0x3F	; 63
    395e:	9f e1       	ldi	r25, 0x1F	; 31
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <display_init+0x120>
    3964:	00 c0       	rjmp	.+0      	; 0x3966 <display_init+0x126>
    3966:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(CYAN,BLACK);
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
    3968:	86 e5       	ldi	r24, 0x56	; 86
    396a:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    396e:	8f e3       	ldi	r24, 0x3F	; 63
    3970:	9f e1       	ldi	r25, 0x1F	; 31
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <display_init+0x132>
    3976:	00 c0       	rjmp	.+0      	; 0x3978 <display_init+0x138>
    3978:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
    397a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    397e:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    3982:	06 96       	adiw	r24, 0x06	; 6
    3984:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    3988:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    398c:	c3 e0       	ldi	r28, 0x03	; 3
    398e:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <textsize>
    3992:	8f e3       	ldi	r24, 0x3F	; 63
    3994:	9f e1       	ldi	r25, 0x1F	; 31
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	f1 f7       	brne	.-4      	; 0x3996 <display_init+0x156>
    399a:	00 c0       	rjmp	.+0      	; 0x399c <display_init+0x15c>
    399c:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set\n");
    399e:	8d e3       	ldi	r24, 0x3D	; 61
    39a0:	91 e0       	ldi	r25, 0x01	; 1
    39a2:	0e 94 fd 23 	call	0x47fa	; 0x47fa <puts>
    39a6:	8f e3       	ldi	r24, 0x3F	; 63
    39a8:	9f e1       	ldi	r25, 0x1F	; 31
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <display_init+0x16a>
    39ae:	00 c0       	rjmp	.+0      	; 0x39b0 <display_init+0x170>
    39b0:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+12;
    39b2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    39b6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    39ba:	0c 96       	adiw	r24, 0x0c	; 12
    39bc:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    39c0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
backuplocationvset();
    39c4:	0e 94 c7 1a 	call	0x358e	; 0x358e <backuplocationvset>
printf("00.00v");
    39c8:	81 e4       	ldi	r24, 0x41	; 65
    39ca:	91 e0       	ldi	r25, 0x01	; 1
    39cc:	9f 93       	push	r25
    39ce:	8f 93       	push	r24
    39d0:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    39d4:	8f e3       	ldi	r24, 0x3F	; 63
    39d6:	9f e1       	ldi	r25, 0x1F	; 31
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <display_init+0x198>
    39dc:	00 c0       	rjmp	.+0      	; 0x39de <display_init+0x19e>
    39de:	00 00       	nop
cursor_x=x;
    39e0:	10 93 87 01 	sts	0x0187, r17	; 0x800187 <cursor_x+0x1>
    39e4:	00 93 86 01 	sts	0x0186, r16	; 0x800186 <cursor_x>
cursor_y=y;
    39e8:	98 e7       	ldi	r25, 0x78	; 120
    39ea:	89 2e       	mov	r8, r25
    39ec:	91 2c       	mov	r9, r1
    39ee:	90 92 75 01 	sts	0x0175, r9	; 0x800175 <cursor_y+0x1>
    39f2:	80 92 74 01 	sts	0x0174, r8	; 0x800174 <cursor_y>
    39f6:	8f e3       	ldi	r24, 0x3F	; 63
    39f8:	9f e1       	ldi	r25, 0x1F	; 31
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	f1 f7       	brne	.-4      	; 0x39fa <display_init+0x1ba>
    39fe:	00 c0       	rjmp	.+0      	; 0x3a00 <display_init+0x1c0>
    3a00:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3a02:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <textsize>
    3a06:	8f e3       	ldi	r24, 0x3F	; 63
    3a08:	9f e1       	ldi	r25, 0x1F	; 31
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <display_init+0x1ca>
    3a0e:	00 c0       	rjmp	.+0      	; 0x3a10 <display_init+0x1d0>
    3a10:	00 00       	nop
_delay_ms(2);
ili9341_setcursor(4,120);
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
    3a12:	86 e5       	ldi	r24, 0x56	; 86
    3a14:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    3a18:	8f e3       	ldi	r24, 0x3F	; 63
    3a1a:	9f e1       	ldi	r25, 0x1F	; 31
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <display_init+0x1dc>
    3a20:	00 c0       	rjmp	.+0      	; 0x3a22 <display_init+0x1e2>
    3a22:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
    3a24:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    3a28:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    3a2c:	06 96       	adiw	r24, 0x06	; 6
    3a2e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    3a32:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3a36:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <textsize>
    3a3a:	8f e3       	ldi	r24, 0x3F	; 63
    3a3c:	9f e1       	ldi	r25, 0x1F	; 31
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	f1 f7       	brne	.-4      	; 0x3a3e <display_init+0x1fe>
    3a42:	00 c0       	rjmp	.+0      	; 0x3a44 <display_init+0x204>
    3a44:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual\n\n");
    3a46:	88 e4       	ldi	r24, 0x48	; 72
    3a48:	91 e0       	ldi	r25, 0x01	; 1
    3a4a:	0e 94 fd 23 	call	0x47fa	; 0x47fa <puts>
    3a4e:	8f e3       	ldi	r24, 0x3F	; 63
    3a50:	9f e1       	ldi	r25, 0x1F	; 31
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <display_init+0x212>
    3a56:	00 c0       	rjmp	.+0      	; 0x3a58 <display_init+0x218>
    3a58:	00 00       	nop
_delay_ms(2);
backuplocationvactual();
    3a5a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <backuplocationvactual>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3a5e:	25 e0       	ldi	r18, 0x05	; 5
    3a60:	d2 2e       	mov	r13, r18
    3a62:	d0 92 88 01 	sts	0x0188, r13	; 0x800188 <textsize>
ili9341_settextsize(5);
printf("00.00");
    3a66:	00 e5       	ldi	r16, 0x50	; 80
    3a68:	11 e0       	ldi	r17, 0x01	; 1
    3a6a:	1f 93       	push	r17
    3a6c:	0f 93       	push	r16
    3a6e:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    3a72:	8f e3       	ldi	r24, 0x3F	; 63
    3a74:	9f e1       	ldi	r25, 0x1F	; 31
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	f1 f7       	brne	.-4      	; 0x3a76 <display_init+0x236>
    3a7a:	00 c0       	rjmp	.+0      	; 0x3a7c <display_init+0x23c>
    3a7c:	00 00       	nop
cursor_x=x;
    3a7e:	34 ea       	ldi	r19, 0xA4	; 164
    3a80:	e3 2e       	mov	r14, r19
    3a82:	f1 2c       	mov	r15, r1
    3a84:	f0 92 87 01 	sts	0x0187, r15	; 0x800187 <cursor_x+0x1>
    3a88:	e0 92 86 01 	sts	0x0186, r14	; 0x800186 <cursor_x>
cursor_y=y;
    3a8c:	b0 92 75 01 	sts	0x0175, r11	; 0x800175 <cursor_y+0x1>
    3a90:	a0 92 74 01 	sts	0x0174, r10	; 0x800174 <cursor_y>
    3a94:	8f e3       	ldi	r24, 0x3F	; 63
    3a96:	9f e1       	ldi	r25, 0x1F	; 31
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <display_init+0x258>
    3a9c:	00 c0       	rjmp	.+0      	; 0x3a9e <display_init+0x25e>
    3a9e:	00 00       	nop
textcolour=x;
    3aa0:	80 ee       	ldi	r24, 0xE0	; 224
    3aa2:	9f ef       	ldi	r25, 0xFF	; 255
    3aa4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <textcolour+0x1>
    3aa8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <textcolour>
textbgcolour=y;
    3aac:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <textbgcolour+0x1>
    3ab0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <textbgcolour>
    3ab4:	8f e3       	ldi	r24, 0x3F	; 63
    3ab6:	9f e1       	ldi	r25, 0x1F	; 31
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <display_init+0x278>
    3abc:	00 c0       	rjmp	.+0      	; 0x3abe <display_init+0x27e>
    3abe:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3ac0:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <textsize>
    3ac4:	8f e3       	ldi	r24, 0x3F	; 63
    3ac6:	9f e1       	ldi	r25, 0x1F	; 31
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <display_init+0x288>
    3acc:	00 c0       	rjmp	.+0      	; 0x3ace <display_init+0x28e>
    3ace:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(YELLOW,BLACK);
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
    3ad0:	89 e4       	ldi	r24, 0x49	; 73
    3ad2:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    3ad6:	8f e3       	ldi	r24, 0x3F	; 63
    3ad8:	9f e1       	ldi	r25, 0x1F	; 31
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f1 f7       	brne	.-4      	; 0x3ada <display_init+0x29a>
    3ade:	00 c0       	rjmp	.+0      	; 0x3ae0 <display_init+0x2a0>
    3ae0:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
    3ae2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    3ae6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    3aea:	06 96       	adiw	r24, 0x06	; 6
    3aec:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    3af0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3af4:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <textsize>
    3af8:	8f e3       	ldi	r24, 0x3F	; 63
    3afa:	9f e1       	ldi	r25, 0x1F	; 31
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <display_init+0x2bc>
    3b00:	00 c0       	rjmp	.+0      	; 0x3b02 <display_init+0x2c2>
    3b02:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set");
    3b04:	8d e3       	ldi	r24, 0x3D	; 61
    3b06:	91 e0       	ldi	r25, 0x01	; 1
    3b08:	9f 93       	push	r25
    3b0a:	8f 93       	push	r24
    3b0c:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    3b10:	8f e3       	ldi	r24, 0x3F	; 63
    3b12:	9f e1       	ldi	r25, 0x1F	; 31
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <display_init+0x2d4>
    3b18:	00 c0       	rjmp	.+0      	; 0x3b1a <display_init+0x2da>
    3b1a:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    3b1c:	f0 92 87 01 	sts	0x0187, r15	; 0x800187 <cursor_x+0x1>
    3b20:	e0 92 86 01 	sts	0x0186, r14	; 0x800186 <cursor_x>
cursor_y=(cursor_y+36);
    3b24:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    3b28:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    3b2c:	84 96       	adiw	r24, 0x24	; 36
    3b2e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    3b32:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
backuplocationiset();
    3b36:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <backuplocationiset>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3b3a:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <textsize>
ili9341_settextsize(3);
printf("00.00a");
    3b3e:	86 e5       	ldi	r24, 0x56	; 86
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	9f 93       	push	r25
    3b44:	8f 93       	push	r24
    3b46:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    3b4a:	8f e3       	ldi	r24, 0x3F	; 63
    3b4c:	9f e1       	ldi	r25, 0x1F	; 31
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <display_init+0x30e>
    3b52:	00 c0       	rjmp	.+0      	; 0x3b54 <display_init+0x314>
    3b54:	00 00       	nop
cursor_x=x;
    3b56:	f0 92 87 01 	sts	0x0187, r15	; 0x800187 <cursor_x+0x1>
    3b5a:	e0 92 86 01 	sts	0x0186, r14	; 0x800186 <cursor_x>
cursor_y=y;
    3b5e:	90 92 75 01 	sts	0x0175, r9	; 0x800175 <cursor_y+0x1>
    3b62:	80 92 74 01 	sts	0x0174, r8	; 0x800174 <cursor_y>
    3b66:	8f e3       	ldi	r24, 0x3F	; 63
    3b68:	9f e1       	ldi	r25, 0x1F	; 31
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <display_init+0x32a>
    3b6e:	00 c0       	rjmp	.+0      	; 0x3b70 <display_init+0x330>
    3b70:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3b72:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <textsize>
    3b76:	8f e3       	ldi	r24, 0x3F	; 63
    3b78:	9f e1       	ldi	r25, 0x1F	; 31
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	f1 f7       	brne	.-4      	; 0x3b7a <display_init+0x33a>
    3b7e:	00 c0       	rjmp	.+0      	; 0x3b80 <display_init+0x340>
    3b80:	00 00       	nop
_delay_ms(2);
ili9341_setcursor(164,120);
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
    3b82:	89 e4       	ldi	r24, 0x49	; 73
    3b84:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    3b88:	8f e3       	ldi	r24, 0x3F	; 63
    3b8a:	9f e1       	ldi	r25, 0x1F	; 31
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <display_init+0x34c>
    3b90:	00 c0       	rjmp	.+0      	; 0x3b92 <display_init+0x352>
    3b92:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
    3b94:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    3b98:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    3b9c:	06 96       	adiw	r24, 0x06	; 6
    3b9e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    3ba2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3ba6:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <textsize>
    3baa:	8f e3       	ldi	r24, 0x3F	; 63
    3bac:	9f e1       	ldi	r25, 0x1F	; 31
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <display_init+0x36e>
    3bb2:	00 c0       	rjmp	.+0      	; 0x3bb4 <display_init+0x374>
    3bb4:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual");
    3bb6:	8d e5       	ldi	r24, 0x5D	; 93
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	9f 93       	push	r25
    3bbc:	8f 93       	push	r24
    3bbe:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    3bc2:	8f e3       	ldi	r24, 0x3F	; 63
    3bc4:	9f e1       	ldi	r25, 0x1F	; 31
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <display_init+0x386>
    3bca:	00 c0       	rjmp	.+0      	; 0x3bcc <display_init+0x38c>
    3bcc:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    3bce:	f0 92 87 01 	sts	0x0187, r15	; 0x800187 <cursor_x+0x1>
    3bd2:	e0 92 86 01 	sts	0x0186, r14	; 0x800186 <cursor_x>
backuplocationiactual();
    3bd6:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <backuplocationiactual>
cursor_y=cursor_y+48;
    3bda:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cursor_y>
    3bde:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cursor_y+0x1>
    3be2:	c0 96       	adiw	r24, 0x30	; 48
    3be4:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cursor_y+0x1>
    3be8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3bec:	d0 92 88 01 	sts	0x0188, r13	; 0x800188 <textsize>
ili9341_settextsize(5);
printf("00.00");
    3bf0:	1f 93       	push	r17
    3bf2:	0f 93       	push	r16
    3bf4:	0e 94 e7 23 	call	0x47ce	; 0x47ce <printf>
    3bf8:	9f ef       	ldi	r25, 0xFF	; 255
    3bfa:	27 ea       	ldi	r18, 0xA7	; 167
    3bfc:	81 e6       	ldi	r24, 0x61	; 97
    3bfe:	91 50       	subi	r25, 0x01	; 1
    3c00:	20 40       	sbci	r18, 0x00	; 0
    3c02:	80 40       	sbci	r24, 0x00	; 0
    3c04:	e1 f7       	brne	.-8      	; 0x3bfe <display_init+0x3be>
    3c06:	00 c0       	rjmp	.+0      	; 0x3c08 <display_init+0x3c8>
    3c08:	00 00       	nop
_delay_ms(2000);

}
    3c0a:	8d b7       	in	r24, 0x3d	; 61
    3c0c:	9e b7       	in	r25, 0x3e	; 62
    3c0e:	40 96       	adiw	r24, 0x10	; 16
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	9e bf       	out	0x3e, r25	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	8d bf       	out	0x3d, r24	; 61
    3c1a:	df 91       	pop	r29
    3c1c:	cf 91       	pop	r28
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	ff 90       	pop	r15
    3c24:	ef 90       	pop	r14
    3c26:	df 90       	pop	r13
    3c28:	bf 90       	pop	r11
    3c2a:	af 90       	pop	r10
    3c2c:	9f 90       	pop	r9
    3c2e:	8f 90       	pop	r8
    3c30:	08 95       	ret

00003c32 <uart_send_char>:
#include <stdlib.h>


void uart_send_char(char c)
{
	while((UCSR0A & (1<<UDRE0)) == 0){};
    3c32:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3c36:	95 ff       	sbrs	r25, 5
    3c38:	fc cf       	rjmp	.-8      	; 0x3c32 <uart_send_char>
    UDR0 = c;
    3c3a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    3c3e:	08 95       	ret

00003c40 <uart_send_string>:
void uart_send_string(char *s)
{
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
    3c44:	ec 01       	movw	r28, r24
	while(*s != 0x00)
    3c46:	89 91       	ld	r24, Y+
    3c48:	81 11       	cpse	r24, r1
    3c4a:	03 c0       	rjmp	.+6      	; 0x3c52 <uart_send_string+0x12>
	{
		uart_send_char(*s);
		s++;
	}
}//end of send_string
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	08 95       	ret
		uart_send_char(*s);
    3c52:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <uart_send_char>
    3c56:	f7 cf       	rjmp	.-18     	; 0x3c46 <uart_send_string+0x6>

00003c58 <uart_send_u8data>:

void uart_send_u8data(uint8_t d)
{
    3c58:	cf 93       	push	r28
    3c5a:	df 93       	push	r29
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	2a 97       	sbiw	r28, 0x0a	; 10
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3c6c:	4a e0       	ldi	r20, 0x0A	; 10
    3c6e:	be 01       	movw	r22, r28
    3c70:	6f 5f       	subi	r22, 0xFF	; 255
    3c72:	7f 4f       	sbci	r23, 0xFF	; 255
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 c2 23 	call	0x4784	; 0x4784 <__itoa_ncheck>
	char buffer[10];
	
	itoa(d,buffer,10);
	uart_send_string(buffer);
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	01 96       	adiw	r24, 0x01	; 1
    3c7e:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <uart_send_string>
}
    3c82:	2a 96       	adiw	r28, 0x0a	; 10
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	08 95       	ret

00003c94 <uart_send_u16data>:
void uart_send_u16data(uint16_t d)
{
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	cd b7       	in	r28, 0x3d	; 61
    3c9a:	de b7       	in	r29, 0x3e	; 62
    3c9c:	2a 97       	sbiw	r28, 0x0a	; 10
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    3ca8:	4a e0       	ldi	r20, 0x0A	; 10
    3caa:	be 01       	movw	r22, r28
    3cac:	6f 5f       	subi	r22, 0xFF	; 255
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb0:	0e 94 cd 23 	call	0x479a	; 0x479a <__utoa_ncheck>
	char buffer[10];
	
	utoa(d,buffer,10);
	uart_send_string(buffer);
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <uart_send_string>
}
    3cbc:	2a 96       	adiw	r28, 0x0a	; 10
    3cbe:	0f b6       	in	r0, 0x3f	; 63
    3cc0:	f8 94       	cli
    3cc2:	de bf       	out	0x3e, r29	; 62
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	cd bf       	out	0x3d, r28	; 61
    3cc8:	df 91       	pop	r29
    3cca:	cf 91       	pop	r28
    3ccc:	08 95       	ret

00003cce <TWIInit>:
 */

void TWIInit(void)
{
 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  PRR =0x00;
    3cce:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 // TWSR |= (1<<TWPS0);                          /* no prescaler */
 
  
  //set sck to 400khz
	TWSR = 0x02;
    3cd2:	82 e0       	ldi	r24, 0x02	; 2
    3cd4:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	//TWBR = 0x0C;
	 TWBR = ((16000000/400000)-16)/2;  /* (F_CPU / F_TWI) must be > 10 for stable operation */
    3cd8:	8c e0       	ldi	r24, 0x0C	; 12
    3cda:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//enable TWI
	TWCR = (1<<TWEN);
    3cde:	84 e0       	ldi	r24, 0x04	; 4
    3ce0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    3ce4:	08 95       	ret

00003ce6 <TWIStart>:
 
void TWIStart(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    3ce6:	84 ea       	ldi	r24, 0xA4	; 164
    3ce8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    3cec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3cf0:	87 ff       	sbrs	r24, 7
    3cf2:	fc cf       	rjmp	.-8      	; 0x3cec <TWIStart+0x6>
}
    3cf4:	08 95       	ret

00003cf6 <TWIStop>:

void TWIStop(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
    3cf6:	84 e9       	ldi	r24, 0x94	; 148
    3cf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
} 
    3cfc:	08 95       	ret

00003cfe <TWIWrite>:

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
    3cfe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<<TWINT) | (1<<TWEN));
    3d02:	84 e8       	ldi	r24, 0x84	; 132
    3d04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    3d08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3d0c:	87 ff       	sbrs	r24, 7
    3d0e:	fc cf       	rjmp	.-8      	; 0x3d08 <TWIWrite+0xa>
}
    3d10:	08 95       	ret

00003d12 <TWIReadACK>:

uint8_t TWIReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN) | (1<<TWEA));
    3d12:	84 ec       	ldi	r24, 0xC4	; 196
    3d14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    3d18:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3d1c:	87 ff       	sbrs	r24, 7
    3d1e:	fc cf       	rjmp	.-8      	; 0x3d18 <TWIReadACK+0x6>
	return TWDR;
    3d20:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    3d24:	08 95       	ret

00003d26 <TWIReadNACK>:

uint8_t TWIReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    3d26:	84 e8       	ldi	r24, 0x84	; 132
    3d28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    3d2c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3d30:	87 ff       	sbrs	r24, 7
    3d32:	fc cf       	rjmp	.-8      	; 0x3d2c <TWIReadNACK+0x6>
	return TWDR;
    3d34:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    3d38:	08 95       	ret

00003d3a <TWIGetStatus>:
	 *  0x38   Arbitration in SLA+W lost
	 */
	 
	uint8_t status;
	//mask status
	status = TWSR & 0xF8;
    3d3a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return status;
}
    3d3e:	88 7f       	andi	r24, 0xF8	; 248
    3d40:	08 95       	ret

00003d42 <make_signed_16>:
{
	uint16_t tmpvar=0;// roh zahl unsigned aus 2er Komplement
	int16_t ret=0;//return variable signed
	tmpvar=(((uint16_t)high_byte)<<8 | low_byte); //schiftet 8
	
	if(tmpvar>=32768)//Vorzeichenbit gesetzt?
    3d42:	98 2f       	mov	r25, r24
    3d44:	86 2f       	mov	r24, r22
    3d46:	97 ff       	sbrs	r25, 7
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <make_signed_16+0x10>
	{
		tmpvar -=32768;//Wertigkeit von Vorzeichenbit abzählen
    3d4a:	90 58       	subi	r25, 0x80	; 128
		ret = 0 -((int16_t)tmpvar);
    3d4c:	91 95       	neg	r25
    3d4e:	81 95       	neg	r24
    3d50:	91 09       	sbc	r25, r1
	}else ret = (int16_t)tmpvar;
	return ret;
}
    3d52:	08 95       	ret

00003d54 <DPS310_read_8>:
uint8_t DPS310_read_8(uint8_t reg)
{
    3d54:	cf 93       	push	r28
    3d56:	c8 2f       	mov	r28, r24
		uint8_t result=0;
		
		TWIStart();
    3d58:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <TWIStart>
		if(TWIGetStatus() != 0x08)return 123;
    3d5c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3d60:	88 30       	cpi	r24, 0x08	; 8
    3d62:	31 f5       	brne	.+76     	; 0x3db0 <DPS310_read_8+0x5c>
		TWIWrite(DPS310_W);
    3d64:	8c ee       	ldi	r24, 0xEC	; 236
    3d66:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <TWIWrite>
		if(TWIGetStatus() != 0x18)return 2;
    3d6a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3d6e:	88 31       	cpi	r24, 0x18	; 24
    3d70:	09 f5       	brne	.+66     	; 0x3db4 <DPS310_read_8+0x60>
		TWIWrite(reg);
    3d72:	8c 2f       	mov	r24, r28
    3d74:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <TWIWrite>
		if(TWIGetStatus() != 0x28)return 3;
    3d78:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3d7c:	c3 e0       	ldi	r28, 0x03	; 3
    3d7e:	88 32       	cpi	r24, 0x28	; 40
    3d80:	a1 f4       	brne	.+40     	; 0x3daa <DPS310_read_8+0x56>
		TWIStart();
    3d82:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <TWIStart>
		if(TWIGetStatus() != 0x10)return 4; //repetet Start sent?
    3d86:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3d8a:	c4 e0       	ldi	r28, 0x04	; 4
    3d8c:	80 31       	cpi	r24, 0x10	; 16
    3d8e:	69 f4       	brne	.+26     	; 0x3daa <DPS310_read_8+0x56>
		TWIWrite(DPS310_R);
    3d90:	8d ee       	ldi	r24, 0xED	; 237
    3d92:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <TWIWrite>
		if(TWIGetStatus() != 0x40)return 5;
    3d96:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3d9a:	c5 e0       	ldi	r28, 0x05	; 5
    3d9c:	80 34       	cpi	r24, 0x40	; 64
    3d9e:	29 f4       	brne	.+10     	; 0x3daa <DPS310_read_8+0x56>
		result=TWIReadNACK();
    3da0:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <TWIReadNACK>
    3da4:	c8 2f       	mov	r28, r24
		TWIStop();
    3da6:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <TWIStop>
	return result;	
								//Daten zurueckgeben
}
    3daa:	8c 2f       	mov	r24, r28
    3dac:	cf 91       	pop	r28
    3dae:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 123;
    3db0:	cb e7       	ldi	r28, 0x7B	; 123
    3db2:	fb cf       	rjmp	.-10     	; 0x3daa <DPS310_read_8+0x56>
		if(TWIGetStatus() != 0x18)return 2;
    3db4:	c2 e0       	ldi	r28, 0x02	; 2
    3db6:	f9 cf       	rjmp	.-14     	; 0x3daa <DPS310_read_8+0x56>

00003db8 <DPS310_write>:
uint8_t DPS310_write(uint8_t reg, uint8_t data)
{
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	d8 2f       	mov	r29, r24
    3dbe:	c6 2f       	mov	r28, r22
		TWIStart();
    3dc0:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <TWIStart>
		if(TWIGetStatus() != 0x08)return 11;
    3dc4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3dc8:	88 30       	cpi	r24, 0x08	; 8
    3dca:	d9 f4       	brne	.+54     	; 0x3e02 <DPS310_write+0x4a>
		TWIWrite(DPS310_W);
    3dcc:	8c ee       	ldi	r24, 0xEC	; 236
    3dce:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <TWIWrite>
		if(TWIGetStatus() != 0x18)return 22;
    3dd2:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3dd6:	88 31       	cpi	r24, 0x18	; 24
    3dd8:	b1 f4       	brne	.+44     	; 0x3e06 <DPS310_write+0x4e>
		TWIWrite(reg);
    3dda:	8d 2f       	mov	r24, r29
    3ddc:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <TWIWrite>
		if(TWIGetStatus() != 0x28)return 33;
    3de0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3de4:	88 32       	cpi	r24, 0x28	; 40
    3de6:	89 f4       	brne	.+34     	; 0x3e0a <DPS310_write+0x52>
		TWIWrite(data);
    3de8:	8c 2f       	mov	r24, r28
    3dea:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <TWIWrite>
		if(TWIGetStatus() != 0x28)return 44;
    3dee:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <TWIGetStatus>
    3df2:	88 32       	cpi	r24, 0x28	; 40
    3df4:	61 f4       	brne	.+24     	; 0x3e0e <DPS310_write+0x56>
		TWIStop();
    3df6:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <TWIStop>
	return 0;	
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
	
	//Daten zurueckgeben
}
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 11;
    3e02:	8b e0       	ldi	r24, 0x0B	; 11
    3e04:	fb cf       	rjmp	.-10     	; 0x3dfc <DPS310_write+0x44>
		if(TWIGetStatus() != 0x18)return 22;
    3e06:	86 e1       	ldi	r24, 0x16	; 22
    3e08:	f9 cf       	rjmp	.-14     	; 0x3dfc <DPS310_write+0x44>
		if(TWIGetStatus() != 0x28)return 33;
    3e0a:	81 e2       	ldi	r24, 0x21	; 33
    3e0c:	f7 cf       	rjmp	.-18     	; 0x3dfc <DPS310_write+0x44>
		if(TWIGetStatus() != 0x28)return 44;
    3e0e:	8c e2       	ldi	r24, 0x2C	; 44
    3e10:	f5 cf       	rjmp	.-22     	; 0x3dfc <DPS310_write+0x44>

00003e12 <DPS310_init>:
uint16_t DPS310_init(void)
{
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
	
	DPS310_write(0x07, 0x00);//1 Messung / sec 8 mal oversampling
    3e16:	60 e0       	ldi	r22, 0x00	; 0
    3e18:	87 e0       	ldi	r24, 0x07	; 7
    3e1a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <DPS310_write>
    3e1e:	2f ef       	ldi	r18, 0xFF	; 255
    3e20:	31 ee       	ldi	r19, 0xE1	; 225
    3e22:	84 e0       	ldi	r24, 0x04	; 4
    3e24:	21 50       	subi	r18, 0x01	; 1
    3e26:	30 40       	sbci	r19, 0x00	; 0
    3e28:	80 40       	sbci	r24, 0x00	; 0
    3e2a:	e1 f7       	brne	.-8      	; 0x3e24 <DPS310_init+0x12>
    3e2c:	00 c0       	rjmp	.+0      	; 0x3e2e <DPS310_init+0x1c>
    3e2e:	00 00       	nop
	_delay_ms(100);
	DPS310_write(0x08, 0x07);
    3e30:	67 e0       	ldi	r22, 0x07	; 7
    3e32:	88 e0       	ldi	r24, 0x08	; 8
    3e34:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <DPS310_write>
    3e38:	9f ef       	ldi	r25, 0xFF	; 255
    3e3a:	21 ee       	ldi	r18, 0xE1	; 225
    3e3c:	34 e0       	ldi	r19, 0x04	; 4
    3e3e:	91 50       	subi	r25, 0x01	; 1
    3e40:	20 40       	sbci	r18, 0x00	; 0
    3e42:	30 40       	sbci	r19, 0x00	; 0
    3e44:	e1 f7       	brne	.-8      	; 0x3e3e <DPS310_init+0x2c>
    3e46:	00 c0       	rjmp	.+0      	; 0x3e48 <DPS310_init+0x36>
    3e48:	00 00       	nop
	_delay_ms(100);
	DPS310_write(0x08, 0x07);
    3e4a:	67 e0       	ldi	r22, 0x07	; 7
    3e4c:	88 e0       	ldi	r24, 0x08	; 8
    3e4e:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <DPS310_write>
    3e52:	8f e3       	ldi	r24, 0x3F	; 63
    3e54:	9c e9       	ldi	r25, 0x9C	; 156
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <DPS310_init+0x44>
    3e5a:	00 c0       	rjmp	.+0      	; 0x3e5c <DPS310_init+0x4a>
    3e5c:	00 00       	nop
	 
	 uint8_t ut1=0;
	 uint8_t ut2=0;
	 uint8_t ut3=0;
	 
	 ut1 = DPS310_read_8(0x10);	//Bit 4-11 von C0
    3e5e:	80 e1       	ldi	r24, 0x10	; 16
    3e60:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3e64:	c8 2f       	mov	r28, r24
    3e66:	9f ef       	ldi	r25, 0xFF	; 255
    3e68:	21 ee       	ldi	r18, 0xE1	; 225
    3e6a:	34 e0       	ldi	r19, 0x04	; 4
    3e6c:	91 50       	subi	r25, 0x01	; 1
    3e6e:	20 40       	sbci	r18, 0x00	; 0
    3e70:	30 40       	sbci	r19, 0x00	; 0
    3e72:	e1 f7       	brne	.-8      	; 0x3e6c <DPS310_init+0x5a>
    3e74:	00 c0       	rjmp	.+0      	; 0x3e76 <DPS310_init+0x64>
    3e76:	00 00       	nop
	 _delay_ms(100);
	 ut2 = DPS310_read_8(0x11);//Bit 4-7 im Register sind Bit 0-3 in C0 / Bit 0-3 in Register sind Bit 8-11 in C1
    3e78:	81 e1       	ldi	r24, 0x11	; 17
    3e7a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3e7e:	d8 2f       	mov	r29, r24
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	91 ee       	ldi	r25, 0xE1	; 225
    3e84:	24 e0       	ldi	r18, 0x04	; 4
    3e86:	81 50       	subi	r24, 0x01	; 1
    3e88:	90 40       	sbci	r25, 0x00	; 0
    3e8a:	20 40       	sbci	r18, 0x00	; 0
    3e8c:	e1 f7       	brne	.-8      	; 0x3e86 <DPS310_init+0x74>
    3e8e:	00 c0       	rjmp	.+0      	; 0x3e90 <DPS310_init+0x7e>
    3e90:	00 00       	nop
	 _delay_ms(100);
	 ut3 = DPS310_read_8(0x12);//Bit 0-7 in C1
    3e92:	82 e1       	ldi	r24, 0x12	; 18
    3e94:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3e98:	3f ef       	ldi	r19, 0xFF	; 255
    3e9a:	91 ee       	ldi	r25, 0xE1	; 225
    3e9c:	24 e0       	ldi	r18, 0x04	; 4
    3e9e:	31 50       	subi	r19, 0x01	; 1
    3ea0:	90 40       	sbci	r25, 0x00	; 0
    3ea2:	20 40       	sbci	r18, 0x00	; 0
    3ea4:	e1 f7       	brne	.-8      	; 0x3e9e <DPS310_init+0x8c>
    3ea6:	00 c0       	rjmp	.+0      	; 0x3ea8 <DPS310_init+0x96>
    3ea8:	00 00       	nop
	 _delay_ms(100);
	 
	 uint16_t t_16_1=0;
	 
	 t_16_1 = (ut2>>4);		 //4 mal nach rechts da nur die obersten 4 bits aus diesem Register zu C0 gehören
	 C0 = (ut1<<4) | t_16_1; //Zusammensetzten der 12 Bit Zahl 
    3eaa:	90 e1       	ldi	r25, 0x10	; 16
    3eac:	c9 9f       	mul	r28, r25
    3eae:	90 01       	movw	r18, r0
    3eb0:	11 24       	eor	r1, r1
	 t_16_1 = (ut2>>4);		 //4 mal nach rechts da nur die obersten 4 bits aus diesem Register zu C0 gehören
    3eb2:	9d 2f       	mov	r25, r29
    3eb4:	92 95       	swap	r25
    3eb6:	9f 70       	andi	r25, 0x0F	; 15
	 C0 = (ut1<<4) | t_16_1; //Zusammensetzten der 12 Bit Zahl 
    3eb8:	29 2b       	or	r18, r25
    3eba:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <C0+0x1>
    3ebe:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <C0>
	//C0=(((int)ut1<<8)|ut2)>>4;
      // C0=C0/2;
	 t_16_1 = 0; 			//Hilfsvariable zurücksetzen
	 t_16_1 = ut2 & 0x0F; 	//nur die tiefsten 4 Bits übernehmen
    3ec2:	df 70       	andi	r29, 0x0F	; 15
	 C1 = (t_16_1<< 8) | ut3;	//12 Bits zusammensetzen
    3ec4:	9d 2f       	mov	r25, r29
    3ec6:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <__data_end+0x1>
    3eca:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>
	_delay_ms(verz);
	tmp2=DPS310_read_8(0x21);
	_delay_ms(verz);
	C30 = make_signed_16(tmp1, tmp2);
	* */
}
    3ece:	c9 01       	movw	r24, r18
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	08 95       	ret

00003ed6 <DPS310_get_raw_temp>:
int32_t DPS310_get_raw_temp(void)
{
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
	uint8_t verz=100; //Verzoegerund für Auslesen aus Register


	
		
	tmp2=DPS310_read_8(TMP_B2);	//MSB rohdaten aus Sensor auslesen
    3eda:	83 e0       	ldi	r24, 0x03	; 3
    3edc:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3ee0:	c8 2f       	mov	r28, r24
    3ee2:	2f ef       	ldi	r18, 0xFF	; 255
    3ee4:	31 ee       	ldi	r19, 0xE1	; 225
    3ee6:	84 e0       	ldi	r24, 0x04	; 4
    3ee8:	21 50       	subi	r18, 0x01	; 1
    3eea:	30 40       	sbci	r19, 0x00	; 0
    3eec:	80 40       	sbci	r24, 0x00	; 0
    3eee:	e1 f7       	brne	.-8      	; 0x3ee8 <DPS310_get_raw_temp+0x12>
    3ef0:	00 c0       	rjmp	.+0      	; 0x3ef2 <DPS310_get_raw_temp+0x1c>
    3ef2:	00 00       	nop
	_delay_ms(verz);
	tmp1=DPS310_read_8(TMP_B1);	//mittleres Bit auslesen
    3ef4:	84 e0       	ldi	r24, 0x04	; 4
    3ef6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3efa:	d8 2f       	mov	r29, r24
    3efc:	9f ef       	ldi	r25, 0xFF	; 255
    3efe:	21 ee       	ldi	r18, 0xE1	; 225
    3f00:	34 e0       	ldi	r19, 0x04	; 4
    3f02:	91 50       	subi	r25, 0x01	; 1
    3f04:	20 40       	sbci	r18, 0x00	; 0
    3f06:	30 40       	sbci	r19, 0x00	; 0
    3f08:	e1 f7       	brne	.-8      	; 0x3f02 <DPS310_get_raw_temp+0x2c>
    3f0a:	00 c0       	rjmp	.+0      	; 0x3f0c <DPS310_get_raw_temp+0x36>
    3f0c:	00 00       	nop
	_delay_ms(verz);
	tmp0=DPS310_read_8(TMP_B0);	//LSB auslesen
    3f0e:	85 e0       	ldi	r24, 0x05	; 5
    3f10:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3f14:	28 2f       	mov	r18, r24
    3f16:	8f ef       	ldi	r24, 0xFF	; 255
    3f18:	91 ee       	ldi	r25, 0xE1	; 225
    3f1a:	34 e0       	ldi	r19, 0x04	; 4
    3f1c:	81 50       	subi	r24, 0x01	; 1
    3f1e:	90 40       	sbci	r25, 0x00	; 0
    3f20:	30 40       	sbci	r19, 0x00	; 0
    3f22:	e1 f7       	brne	.-8      	; 0x3f1c <DPS310_get_raw_temp+0x46>
    3f24:	00 c0       	rjmp	.+0      	; 0x3f26 <DPS310_get_raw_temp+0x50>
    3f26:	00 00       	nop
	_delay_ms(verz);
	
	
	tmp16 = ((uint16_t)tmp2<<8) | tmp1;	//schiebe MSB 8 Schritte links
    3f28:	7c 2f       	mov	r23, r28
    3f2a:	6d 2f       	mov	r22, r29
	tmp32 = tmp16;				//16 Bit Variable in 32 Bit Variable kopieren
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
	tmp32 = (tmp32<<8) | tmp0;	//LSB hinzufügen
    3f30:	98 2f       	mov	r25, r24
    3f32:	87 2f       	mov	r24, r23
    3f34:	76 2f       	mov	r23, r22
    3f36:	66 27       	eor	r22, r22
    3f38:	62 2b       	or	r22, r18
	}else ret = (int32_t)tmp32;
	ret = (int32_t)tmp32;
 */
	ret = tmp32;
  return ret;
}
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	08 95       	ret

00003f40 <calculate_temperature_pressure>:
    3f40:	2f ef       	ldi	r18, 0xFF	; 255
    3f42:	81 ee       	ldi	r24, 0xE1	; 225
    3f44:	94 e0       	ldi	r25, 0x04	; 4
    3f46:	21 50       	subi	r18, 0x01	; 1
    3f48:	80 40       	sbci	r24, 0x00	; 0
    3f4a:	90 40       	sbci	r25, 0x00	; 0
    3f4c:	e1 f7       	brne	.-8      	; 0x3f46 <calculate_temperature_pressure+0x6>
    3f4e:	00 c0       	rjmp	.+0      	; 0x3f50 <calculate_temperature_pressure+0x10>
    3f50:	00 00       	nop
	float Temperature=0;
       long temptemp = 0;
       Temperature=0;
      
     _delay_ms(100);
	DPS310_write(PRS_CFG, 0x01);
    3f52:	61 e0       	ldi	r22, 0x01	; 1
    3f54:	86 e0       	ldi	r24, 0x06	; 6
    3f56:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <DPS310_write>
    3f5a:	2f ef       	ldi	r18, 0xFF	; 255
    3f5c:	81 ee       	ldi	r24, 0xE1	; 225
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	21 50       	subi	r18, 0x01	; 1
    3f62:	80 40       	sbci	r24, 0x00	; 0
    3f64:	90 40       	sbci	r25, 0x00	; 0
    3f66:	e1 f7       	brne	.-8      	; 0x3f60 <calculate_temperature_pressure+0x20>
    3f68:	00 c0       	rjmp	.+0      	; 0x3f6a <calculate_temperature_pressure+0x2a>
    3f6a:	00 00       	nop
	_delay_ms(100);
	DPS310_write(TMP_CFG, 0x80);//1 Messung / sec 8 mal oversampling
    3f6c:	60 e8       	ldi	r22, 0x80	; 128
    3f6e:	87 e0       	ldi	r24, 0x07	; 7
    3f70:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <DPS310_write>
    3f74:	2f ef       	ldi	r18, 0xFF	; 255
    3f76:	81 ee       	ldi	r24, 0xE1	; 225
    3f78:	94 e0       	ldi	r25, 0x04	; 4
    3f7a:	21 50       	subi	r18, 0x01	; 1
    3f7c:	80 40       	sbci	r24, 0x00	; 0
    3f7e:	90 40       	sbci	r25, 0x00	; 0
    3f80:	e1 f7       	brne	.-8      	; 0x3f7a <calculate_temperature_pressure+0x3a>
    3f82:	00 c0       	rjmp	.+0      	; 0x3f84 <calculate_temperature_pressure+0x44>
    3f84:	00 00       	nop
	_delay_ms(100);
	DPS310_write(0x08, 0x07);
    3f86:	67 e0       	ldi	r22, 0x07	; 7
    3f88:	88 e0       	ldi	r24, 0x08	; 8
    3f8a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <DPS310_write>
    3f8e:	2f ef       	ldi	r18, 0xFF	; 255
    3f90:	81 ee       	ldi	r24, 0xE1	; 225
    3f92:	94 e0       	ldi	r25, 0x04	; 4
    3f94:	21 50       	subi	r18, 0x01	; 1
    3f96:	80 40       	sbci	r24, 0x00	; 0
    3f98:	90 40       	sbci	r25, 0x00	; 0
    3f9a:	e1 f7       	brne	.-8      	; 0x3f94 <calculate_temperature_pressure+0x54>
    3f9c:	00 c0       	rjmp	.+0      	; 0x3f9e <calculate_temperature_pressure+0x5e>
    3f9e:	00 00       	nop
	_delay_ms(100);
       
       
       
       
       Temperature=(float)DPS310_get_raw_temp();
    3fa0:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <DPS310_get_raw_temp>
    3fa4:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__floatsisf>
       Temperature/=524288;
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e0       	ldi	r20, 0x00	; 0
    3fae:	56 e3       	ldi	r21, 0x36	; 54
    3fb0:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__mulsf3>
       temptemp = Temperature;
    3fb4:	0e 94 36 22 	call	0x446c	; 0x446c <__fixsfsi>
     return temptemp;
}
    3fb8:	08 95       	ret

00003fba <DPS310_get_raw_pres>:
	uint16_t tmp16=0;
	uint32_t tmp32=0;
	int32_t ret=0;
	uint8_t verz=100; //Verzoegerund für Auslesen aus Register
	
	DPS310_write(0x08, 0x02);//eine temp messung auslösen
    3fba:	62 e0       	ldi	r22, 0x02	; 2
    3fbc:	88 e0       	ldi	r24, 0x08	; 8
    3fbe:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <DPS310_write>
    3fc2:	2f ef       	ldi	r18, 0xFF	; 255
    3fc4:	81 ee       	ldi	r24, 0xE1	; 225
    3fc6:	94 e0       	ldi	r25, 0x04	; 4
    3fc8:	21 50       	subi	r18, 0x01	; 1
    3fca:	80 40       	sbci	r24, 0x00	; 0
    3fcc:	90 40       	sbci	r25, 0x00	; 0
    3fce:	e1 f7       	brne	.-8      	; 0x3fc8 <DPS310_get_raw_pres+0xe>
    3fd0:	00 c0       	rjmp	.+0      	; 0x3fd2 <DPS310_get_raw_pres+0x18>
    3fd2:	00 00       	nop
	_delay_ms(100);
		
	tmp2=DPS310_read_8(PSR_B2);	//MSB rohdaten aus Sensor auslesen
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3fda:	2f ef       	ldi	r18, 0xFF	; 255
    3fdc:	81 ee       	ldi	r24, 0xE1	; 225
    3fde:	94 e0       	ldi	r25, 0x04	; 4
    3fe0:	21 50       	subi	r18, 0x01	; 1
    3fe2:	80 40       	sbci	r24, 0x00	; 0
    3fe4:	90 40       	sbci	r25, 0x00	; 0
    3fe6:	e1 f7       	brne	.-8      	; 0x3fe0 <DPS310_get_raw_pres+0x26>
    3fe8:	00 c0       	rjmp	.+0      	; 0x3fea <DPS310_get_raw_pres+0x30>
    3fea:	00 00       	nop
	_delay_ms(verz);
	tmp1=DPS310_read_8(PSR_B1);	//mittleres Bit auslesen
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    3ff2:	2f ef       	ldi	r18, 0xFF	; 255
    3ff4:	81 ee       	ldi	r24, 0xE1	; 225
    3ff6:	94 e0       	ldi	r25, 0x04	; 4
    3ff8:	21 50       	subi	r18, 0x01	; 1
    3ffa:	80 40       	sbci	r24, 0x00	; 0
    3ffc:	90 40       	sbci	r25, 0x00	; 0
    3ffe:	e1 f7       	brne	.-8      	; 0x3ff8 <DPS310_get_raw_pres+0x3e>
    4000:	00 c0       	rjmp	.+0      	; 0x4002 <DPS310_get_raw_pres+0x48>
    4002:	00 00       	nop
	_delay_ms(verz);
	tmp0=DPS310_read_8(PSR_B0);	//LSB auslesen
    4004:	82 e0       	ldi	r24, 0x02	; 2
    4006:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    400a:	2f ef       	ldi	r18, 0xFF	; 255
    400c:	81 ee       	ldi	r24, 0xE1	; 225
    400e:	94 e0       	ldi	r25, 0x04	; 4
    4010:	21 50       	subi	r18, 0x01	; 1
    4012:	80 40       	sbci	r24, 0x00	; 0
    4014:	90 40       	sbci	r25, 0x00	; 0
    4016:	e1 f7       	brne	.-8      	; 0x4010 <DPS310_get_raw_pres+0x56>
    4018:	00 c0       	rjmp	.+0      	; 0x401a <DPS310_get_raw_pres+0x60>
    401a:	00 00       	nop
  //  ret=(ret<<8)>>8;
	
	*/
	return ret;
	
}
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	cb 01       	movw	r24, r22
    4022:	08 95       	ret

00004024 <DPS310_get_komp_temp>:



int32_t DPS310_get_komp_temp(void)
{
    4024:	cf 92       	push	r12
    4026:	df 92       	push	r13
    4028:	ef 92       	push	r14
    402a:	ff 92       	push	r15
    402c:	cf 93       	push	r28
	int32_t ret=0;
	int32_t temp_raw_sc=0;
	int32_t temp_raw=0;
	uint8_t verz=10; //Verzoegerund für Auslesen aus Register
		
	tmp2=DPS310_read_8(TMP_B2);	//MSB rohdaten aus Sensor auslesen
    402e:	83 e0       	ldi	r24, 0x03	; 3
    4030:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    4034:	c8 2f       	mov	r28, r24
    4036:	8f e3       	ldi	r24, 0x3F	; 63
    4038:	9c e9       	ldi	r25, 0x9C	; 156
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	f1 f7       	brne	.-4      	; 0x403a <DPS310_get_komp_temp+0x16>
    403e:	00 c0       	rjmp	.+0      	; 0x4040 <DPS310_get_komp_temp+0x1c>
    4040:	00 00       	nop
	_delay_ms(verz);
	tmp1=DPS310_read_8(TMP_B1);	//mittleres Bit auslesen
    4042:	84 e0       	ldi	r24, 0x04	; 4
    4044:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    4048:	f8 2e       	mov	r15, r24
    404a:	8f e3       	ldi	r24, 0x3F	; 63
    404c:	9c e9       	ldi	r25, 0x9C	; 156
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	f1 f7       	brne	.-4      	; 0x404e <DPS310_get_komp_temp+0x2a>
    4052:	00 c0       	rjmp	.+0      	; 0x4054 <DPS310_get_komp_temp+0x30>
    4054:	00 00       	nop
	_delay_ms(verz);
	tmp0=DPS310_read_8(TMP_B0);	//LSB auslesen
    4056:	85 e0       	ldi	r24, 0x05	; 5
    4058:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <DPS310_read_8>
    405c:	28 2f       	mov	r18, r24
    405e:	8f e3       	ldi	r24, 0x3F	; 63
    4060:	9c e9       	ldi	r25, 0x9C	; 156
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	f1 f7       	brne	.-4      	; 0x4062 <DPS310_get_komp_temp+0x3e>
    4066:	00 c0       	rjmp	.+0      	; 0x4068 <DPS310_get_komp_temp+0x44>
    4068:	00 00       	nop
	_delay_ms(verz);
	
	tmp16 = (tmp2<<8) | tmp1;	//schiebe MSB 8 Schritte links
    406a:	7c 2f       	mov	r23, r28
    406c:	6f 2d       	mov	r22, r15
	tmp32 = tmp16;				//16 Bit Variable in 32 Bit Variable kopieren
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	80 e0       	ldi	r24, 0x00	; 0
	tmp32 = (tmp32<<8) | tmp0;	//LSB hinzufügen
    4072:	98 2f       	mov	r25, r24
    4074:	87 2f       	mov	r24, r23
    4076:	76 2f       	mov	r23, r22
    4078:	66 27       	eor	r22, r22
    407a:	62 2b       	or	r22, r18
	
	if(tmp32 >= 8388608)		//Vorzeichenbit gesetzt
    407c:	61 15       	cp	r22, r1
    407e:	71 05       	cpc	r23, r1
    4080:	20 e8       	ldi	r18, 0x80	; 128
    4082:	82 07       	cpc	r24, r18
    4084:	91 05       	cpc	r25, r1
    4086:	b0 f1       	brcs	.+108    	; 0x40f4 <DPS310_get_komp_temp+0xd0>
	{
		tmp32 -= 8388608;		//Wertigkeit von Vorzeichenbit abzählen
    4088:	80 58       	subi	r24, 0x80	; 128
    408a:	91 09       	sbc	r25, r1
		temp_raw = 0 -((int32_t)tmp32);
    408c:	90 95       	com	r25
    408e:	80 95       	com	r24
    4090:	70 95       	com	r23
    4092:	61 95       	neg	r22
    4094:	7f 4f       	sbci	r23, 0xFF	; 255
    4096:	8f 4f       	sbci	r24, 0xFF	; 255
    4098:	9f 4f       	sbci	r25, 0xFF	; 255
	}else ret = (int32_t)tmp32;
	
	temp_raw_sc=temp_raw / 7864320;
	ret = (C0*0.5)+(C1*temp_raw_sc);
    409a:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <__data_end>
    409e:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <__data_end+0x1>
	temp_raw_sc=temp_raw / 7864320;
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	48 e7       	ldi	r20, 0x78	; 120
    40a8:	50 e0       	ldi	r21, 0x00	; 0
    40aa:	0e 94 67 23 	call	0x46ce	; 0x46ce <__divmodsi4>
	ret = (C0*0.5)+(C1*temp_raw_sc);
    40ae:	d7 01       	movw	r26, r14
    40b0:	0e 94 86 23 	call	0x470c	; 0x470c <__muluhisi3>
    40b4:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__floatsisf>
    40b8:	6b 01       	movw	r12, r22
    40ba:	7c 01       	movw	r14, r24
    40bc:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <C0>
    40c0:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <C0+0x1>
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__floatunsisf>
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	5f e3       	ldi	r21, 0x3F	; 63
    40d4:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__mulsf3>
    40d8:	9b 01       	movw	r18, r22
    40da:	ac 01       	movw	r20, r24
    40dc:	c7 01       	movw	r24, r14
    40de:	b6 01       	movw	r22, r12
    40e0:	0e 94 ca 21 	call	0x4394	; 0x4394 <__addsf3>
    40e4:	0e 94 36 22 	call	0x446c	; 0x446c <__fixsfsi>
    
	return ret;
}
    40e8:	cf 91       	pop	r28
    40ea:	ff 90       	pop	r15
    40ec:	ef 90       	pop	r14
    40ee:	df 90       	pop	r13
    40f0:	cf 90       	pop	r12
    40f2:	08 95       	ret
	int32_t temp_raw=0;
    40f4:	60 e0       	ldi	r22, 0x00	; 0
    40f6:	70 e0       	ldi	r23, 0x00	; 0
    40f8:	cb 01       	movw	r24, r22
    40fa:	cf cf       	rjmp	.-98     	; 0x409a <DPS310_get_komp_temp+0x76>

000040fc <main>:

uint16_t xx, yy, zell, COLOR, color;

int main(void)
{
	stdout = & mydata;
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <__iob+0x3>
    4104:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <__iob+0x2>
	ili9341_init();//initial driver setup to drive ili9341
    4108:	0e 94 ef 12 	call	0x25de	; 0x25de <ili9341_init>
	ili9341_clear(BLACK);//fill screen with black colour
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	0e 94 09 14 	call	0x2812	; 0x2812 <ili9341_clear>
    4114:	2f ef       	ldi	r18, 0xFF	; 255
    4116:	83 ed       	ldi	r24, 0xD3	; 211
    4118:	90 e3       	ldi	r25, 0x30	; 48
    411a:	21 50       	subi	r18, 0x01	; 1
    411c:	80 40       	sbci	r24, 0x00	; 0
    411e:	90 40       	sbci	r25, 0x00	; 0
    4120:	e1 f7       	brne	.-8      	; 0x411a <main+0x1e>
    4122:	00 c0       	rjmp	.+0      	; 0x4124 <main+0x28>
    4124:	00 00       	nop
	_delay_ms(1000);
	ili9341_setRotation(3);//rotate screen
    4126:	83 e0       	ldi	r24, 0x03	; 3
    4128:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <ili9341_setRotation>
    412c:	8f e3       	ldi	r24, 0x3F	; 63
    412e:	9f e1       	ldi	r25, 0x1F	; 31
    4130:	01 97       	sbiw	r24, 0x01	; 1
    4132:	f1 f7       	brne	.-4      	; 0x4130 <main+0x34>
    4134:	00 c0       	rjmp	.+0      	; 0x4136 <main+0x3a>
    4136:	00 00       	nop
	_delay_ms(2);

	//display_init();//display initial data
yy=240;
    4138:	80 ef       	ldi	r24, 0xF0	; 240
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <yy+0x1>
    4140:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <yy>
xx=0;
    4144:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <xx+0x1>
    4148:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <xx>
zell=0;
    414c:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <zell+0x1>
    4150:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <zell>
color=DARKGREEN;
    4154:	80 ee       	ldi	r24, 0xE0	; 224
    4156:	93 e0       	ldi	r25, 0x03	; 3
    4158:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <color+0x1>
    415c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <color>
		//ili9341_drawLine(x, y, x, y, RED);
		
*/
	
		
		ili9341_settextcolour(RED,BLACK);
    4160:	70 e0       	ldi	r23, 0x00	; 0
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	98 ef       	ldi	r25, 0xF8	; 248
    4168:	0e 94 c6 1b 	call	0x378c	; 0x378c <ili9341_settextcolour>

		ili9341_setcursor(vsetx,vsety);
    416c:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <vsety>
    4170:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <vsety+0x1>
    4174:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <vsetx>
    4178:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <vsetx+0x1>
    417c:	0e 94 bd 1b 	call	0x377a	; 0x377a <ili9341_setcursor>
    4180:	8f e3       	ldi	r24, 0x3F	; 63
    4182:	9f e1       	ldi	r25, 0x1F	; 31
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <main+0x88>
    4188:	00 c0       	rjmp	.+0      	; 0x418a <main+0x8e>
    418a:	00 00       	nop
		_delay_ms(2);
		ili9341_settextsize(3);
    418c:	83 e0       	ldi	r24, 0x03	; 3
    418e:	0e 94 cf 1b 	call	0x379e	; 0x379e <ili9341_settextsize>
		ili9341_write('1');
    4192:	81 e3       	ldi	r24, 0x31	; 49
    4194:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    4198:	8f e3       	ldi	r24, 0x3F	; 63
    419a:	9f e1       	ldi	r25, 0x1F	; 31
    419c:	01 97       	sbiw	r24, 0x01	; 1
    419e:	f1 f7       	brne	.-4      	; 0x419c <main+0xa0>
    41a0:	00 c0       	rjmp	.+0      	; 0x41a2 <main+0xa6>
    41a2:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    41a4:	80 e3       	ldi	r24, 0x30	; 48
    41a6:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    41aa:	8f e3       	ldi	r24, 0x3F	; 63
    41ac:	9f e1       	ldi	r25, 0x1F	; 31
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <main+0xb2>
    41b2:	00 c0       	rjmp	.+0      	; 0x41b4 <main+0xb8>
    41b4:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    41b6:	8e e2       	ldi	r24, 0x2E	; 46
    41b8:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    41bc:	8f e3       	ldi	r24, 0x3F	; 63
    41be:	9f e1       	ldi	r25, 0x1F	; 31
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	f1 f7       	brne	.-4      	; 0x41c0 <main+0xc4>
    41c4:	00 c0       	rjmp	.+0      	; 0x41c6 <main+0xca>
    41c6:	00 00       	nop
		_delay_ms(2);
		ili9341_write('2');
    41c8:	82 e3       	ldi	r24, 0x32	; 50
    41ca:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    41ce:	8f e3       	ldi	r24, 0x3F	; 63
    41d0:	9f e1       	ldi	r25, 0x1F	; 31
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	f1 f7       	brne	.-4      	; 0x41d2 <main+0xd6>
    41d6:	00 c0       	rjmp	.+0      	; 0x41d8 <main+0xdc>
    41d8:	00 00       	nop
		_delay_ms(2);
		ili9341_write('3');
    41da:	83 e3       	ldi	r24, 0x33	; 51
    41dc:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    41e0:	8f e3       	ldi	r24, 0x3F	; 63
    41e2:	9f e1       	ldi	r25, 0x1F	; 31
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	f1 f7       	brne	.-4      	; 0x41e4 <main+0xe8>
    41e8:	00 c0       	rjmp	.+0      	; 0x41ea <main+0xee>
    41ea:	00 00       	nop
		_delay_ms(2);



		ili9341_setcursor(vactualx,vactualy);
    41ec:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <vactualy>
    41f0:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <vactualy+0x1>
    41f4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <vactualx>
    41f8:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <vactualx+0x1>
    41fc:	0e 94 bd 1b 	call	0x377a	; 0x377a <ili9341_setcursor>
    4200:	8f e3       	ldi	r24, 0x3F	; 63
    4202:	9f e1       	ldi	r25, 0x1F	; 31
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <main+0x108>
    4208:	00 c0       	rjmp	.+0      	; 0x420a <main+0x10e>
    420a:	00 00       	nop
		_delay_ms(2);
		ili9341_settextsize(5);
    420c:	85 e0       	ldi	r24, 0x05	; 5
    420e:	0e 94 cf 1b 	call	0x379e	; 0x379e <ili9341_settextsize>
		ili9341_write('1');
    4212:	81 e3       	ldi	r24, 0x31	; 49
    4214:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    4218:	8f e3       	ldi	r24, 0x3F	; 63
    421a:	9f e1       	ldi	r25, 0x1F	; 31
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	f1 f7       	brne	.-4      	; 0x421c <main+0x120>
    4220:	00 c0       	rjmp	.+0      	; 0x4222 <main+0x126>
    4222:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    4224:	80 e3       	ldi	r24, 0x30	; 48
    4226:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    422a:	8f e3       	ldi	r24, 0x3F	; 63
    422c:	9f e1       	ldi	r25, 0x1F	; 31
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <main+0x132>
    4232:	00 c0       	rjmp	.+0      	; 0x4234 <main+0x138>
    4234:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    4236:	8e e2       	ldi	r24, 0x2E	; 46
    4238:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    423c:	8f e3       	ldi	r24, 0x3F	; 63
    423e:	9f e1       	ldi	r25, 0x1F	; 31
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <main+0x144>
    4244:	00 c0       	rjmp	.+0      	; 0x4246 <main+0x14a>
    4246:	00 00       	nop
		_delay_ms(2);
		ili9341_write('2');
    4248:	82 e3       	ldi	r24, 0x32	; 50
    424a:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    424e:	8f e3       	ldi	r24, 0x3F	; 63
    4250:	9f e1       	ldi	r25, 0x1F	; 31
    4252:	01 97       	sbiw	r24, 0x01	; 1
    4254:	f1 f7       	brne	.-4      	; 0x4252 <main+0x156>
    4256:	00 c0       	rjmp	.+0      	; 0x4258 <main+0x15c>
    4258:	00 00       	nop
		_delay_ms(2);
		ili9341_write('3');
    425a:	83 e3       	ldi	r24, 0x33	; 51
    425c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    4260:	8f e3       	ldi	r24, 0x3F	; 63
    4262:	9f e1       	ldi	r25, 0x1F	; 31
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	f1 f7       	brne	.-4      	; 0x4264 <main+0x168>
    4268:	00 c0       	rjmp	.+0      	; 0x426a <main+0x16e>
    426a:	00 00       	nop
    426c:	9f ef       	ldi	r25, 0xFF	; 255
    426e:	27 ea       	ldi	r18, 0xA7	; 167
    4270:	81 e6       	ldi	r24, 0x61	; 97
    4272:	91 50       	subi	r25, 0x01	; 1
    4274:	20 40       	sbci	r18, 0x00	; 0
    4276:	80 40       	sbci	r24, 0x00	; 0
    4278:	e1 f7       	brne	.-8      	; 0x4272 <main+0x176>
    427a:	00 c0       	rjmp	.+0      	; 0x427c <main+0x180>
    427c:	00 00       	nop
		_delay_ms(2);

		_delay_ms(2000);

		ili9341_setcursor(vsetx,vsety);
    427e:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <vsety>
    4282:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <vsety+0x1>
    4286:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <vsetx>
    428a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <vsetx+0x1>
    428e:	0e 94 bd 1b 	call	0x377a	; 0x377a <ili9341_setcursor>
    4292:	8f e3       	ldi	r24, 0x3F	; 63
    4294:	9f e1       	ldi	r25, 0x1F	; 31
    4296:	01 97       	sbiw	r24, 0x01	; 1
    4298:	f1 f7       	brne	.-4      	; 0x4296 <main+0x19a>
    429a:	00 c0       	rjmp	.+0      	; 0x429c <main+0x1a0>
    429c:	00 00       	nop
		_delay_ms(2);
		ili9341_settextsize(3);
    429e:	83 e0       	ldi	r24, 0x03	; 3
    42a0:	0e 94 cf 1b 	call	0x379e	; 0x379e <ili9341_settextsize>
		ili9341_write('9');
    42a4:	89 e3       	ldi	r24, 0x39	; 57
    42a6:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    42aa:	8f e3       	ldi	r24, 0x3F	; 63
    42ac:	9f e1       	ldi	r25, 0x1F	; 31
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	f1 f7       	brne	.-4      	; 0x42ae <main+0x1b2>
    42b2:	00 c0       	rjmp	.+0      	; 0x42b4 <main+0x1b8>
    42b4:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    42b6:	80 e3       	ldi	r24, 0x30	; 48
    42b8:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    42bc:	8f e3       	ldi	r24, 0x3F	; 63
    42be:	9f e1       	ldi	r25, 0x1F	; 31
    42c0:	01 97       	sbiw	r24, 0x01	; 1
    42c2:	f1 f7       	brne	.-4      	; 0x42c0 <main+0x1c4>
    42c4:	00 c0       	rjmp	.+0      	; 0x42c6 <main+0x1ca>
    42c6:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    42c8:	8e e2       	ldi	r24, 0x2E	; 46
    42ca:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    42ce:	8f e3       	ldi	r24, 0x3F	; 63
    42d0:	9f e1       	ldi	r25, 0x1F	; 31
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	f1 f7       	brne	.-4      	; 0x42d2 <main+0x1d6>
    42d6:	00 c0       	rjmp	.+0      	; 0x42d8 <main+0x1dc>
    42d8:	00 00       	nop
		_delay_ms(2);
		ili9341_write('4');
    42da:	84 e3       	ldi	r24, 0x34	; 52
    42dc:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    42e0:	8f e3       	ldi	r24, 0x3F	; 63
    42e2:	9f e1       	ldi	r25, 0x1F	; 31
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <main+0x1e8>
    42e8:	00 c0       	rjmp	.+0      	; 0x42ea <main+0x1ee>
    42ea:	00 00       	nop
		_delay_ms(2);
		ili9341_write('5');
    42ec:	85 e3       	ldi	r24, 0x35	; 53
    42ee:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    42f2:	8f e3       	ldi	r24, 0x3F	; 63
    42f4:	9f e1       	ldi	r25, 0x1F	; 31
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <main+0x1fa>
    42fa:	00 c0       	rjmp	.+0      	; 0x42fc <main+0x200>
    42fc:	00 00       	nop
		_delay_ms(2);



		ili9341_setcursor(vactualx,vactualy);
    42fe:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <vactualy>
    4302:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <vactualy+0x1>
    4306:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <vactualx>
    430a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <vactualx+0x1>
    430e:	0e 94 bd 1b 	call	0x377a	; 0x377a <ili9341_setcursor>
    4312:	8f e3       	ldi	r24, 0x3F	; 63
    4314:	9f e1       	ldi	r25, 0x1F	; 31
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <main+0x21a>
    431a:	00 c0       	rjmp	.+0      	; 0x431c <main+0x220>
    431c:	00 00       	nop
		_delay_ms(2);
		ili9341_settextsize(5);
    431e:	85 e0       	ldi	r24, 0x05	; 5
    4320:	0e 94 cf 1b 	call	0x379e	; 0x379e <ili9341_settextsize>
		ili9341_write('9');
    4324:	89 e3       	ldi	r24, 0x39	; 57
    4326:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    432a:	8f e3       	ldi	r24, 0x3F	; 63
    432c:	9f e1       	ldi	r25, 0x1F	; 31
    432e:	01 97       	sbiw	r24, 0x01	; 1
    4330:	f1 f7       	brne	.-4      	; 0x432e <main+0x232>
    4332:	00 c0       	rjmp	.+0      	; 0x4334 <main+0x238>
    4334:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    4336:	80 e3       	ldi	r24, 0x30	; 48
    4338:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    433c:	8f e3       	ldi	r24, 0x3F	; 63
    433e:	9f e1       	ldi	r25, 0x1F	; 31
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	f1 f7       	brne	.-4      	; 0x4340 <main+0x244>
    4344:	00 c0       	rjmp	.+0      	; 0x4346 <main+0x24a>
    4346:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    4348:	8e e2       	ldi	r24, 0x2E	; 46
    434a:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    434e:	8f e3       	ldi	r24, 0x3F	; 63
    4350:	9f e1       	ldi	r25, 0x1F	; 31
    4352:	01 97       	sbiw	r24, 0x01	; 1
    4354:	f1 f7       	brne	.-4      	; 0x4352 <main+0x256>
    4356:	00 c0       	rjmp	.+0      	; 0x4358 <main+0x25c>
    4358:	00 00       	nop
		_delay_ms(2);
		ili9341_write('4');
    435a:	84 e3       	ldi	r24, 0x34	; 52
    435c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    4360:	8f e3       	ldi	r24, 0x3F	; 63
    4362:	9f e1       	ldi	r25, 0x1F	; 31
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <main+0x268>
    4368:	00 c0       	rjmp	.+0      	; 0x436a <main+0x26e>
    436a:	00 00       	nop
		_delay_ms(2);
		ili9341_write('5');
    436c:	85 e3       	ldi	r24, 0x35	; 53
    436e:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ili9341_write>
    4372:	8f e3       	ldi	r24, 0x3F	; 63
    4374:	9f e1       	ldi	r25, 0x1F	; 31
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <main+0x27a>
    437a:	00 c0       	rjmp	.+0      	; 0x437c <main+0x280>
    437c:	00 00       	nop
    437e:	9f ef       	ldi	r25, 0xFF	; 255
    4380:	27 ea       	ldi	r18, 0xA7	; 167
    4382:	81 e6       	ldi	r24, 0x61	; 97
    4384:	91 50       	subi	r25, 0x01	; 1
    4386:	20 40       	sbci	r18, 0x00	; 0
    4388:	80 40       	sbci	r24, 0x00	; 0
    438a:	e1 f7       	brne	.-8      	; 0x4384 <main+0x288>
    438c:	00 c0       	rjmp	.+0      	; 0x438e <main+0x292>
    438e:	00 00       	nop
    4390:	e7 ce       	rjmp	.-562    	; 0x4160 <main+0x64>

00004392 <__subsf3>:
    4392:	50 58       	subi	r21, 0x80	; 128

00004394 <__addsf3>:
    4394:	bb 27       	eor	r27, r27
    4396:	aa 27       	eor	r26, r26
    4398:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__addsf3x>
    439c:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <__fp_round>
    43a0:	0e 94 b2 22 	call	0x4564	; 0x4564 <__fp_pscA>
    43a4:	38 f0       	brcs	.+14     	; 0x43b4 <__addsf3+0x20>
    43a6:	0e 94 b9 22 	call	0x4572	; 0x4572 <__fp_pscB>
    43aa:	20 f0       	brcs	.+8      	; 0x43b4 <__addsf3+0x20>
    43ac:	39 f4       	brne	.+14     	; 0x43bc <__addsf3+0x28>
    43ae:	9f 3f       	cpi	r25, 0xFF	; 255
    43b0:	19 f4       	brne	.+6      	; 0x43b8 <__addsf3+0x24>
    43b2:	26 f4       	brtc	.+8      	; 0x43bc <__addsf3+0x28>
    43b4:	0c 94 af 22 	jmp	0x455e	; 0x455e <__fp_nan>
    43b8:	0e f4       	brtc	.+2      	; 0x43bc <__addsf3+0x28>
    43ba:	e0 95       	com	r30
    43bc:	e7 fb       	bst	r30, 7
    43be:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__fp_inf>

000043c2 <__addsf3x>:
    43c2:	e9 2f       	mov	r30, r25
    43c4:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <__fp_split3>
    43c8:	58 f3       	brcs	.-42     	; 0x43a0 <__addsf3+0xc>
    43ca:	ba 17       	cp	r27, r26
    43cc:	62 07       	cpc	r22, r18
    43ce:	73 07       	cpc	r23, r19
    43d0:	84 07       	cpc	r24, r20
    43d2:	95 07       	cpc	r25, r21
    43d4:	20 f0       	brcs	.+8      	; 0x43de <__addsf3x+0x1c>
    43d6:	79 f4       	brne	.+30     	; 0x43f6 <__addsf3x+0x34>
    43d8:	a6 f5       	brtc	.+104    	; 0x4442 <__addsf3x+0x80>
    43da:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <__fp_zero>
    43de:	0e f4       	brtc	.+2      	; 0x43e2 <__addsf3x+0x20>
    43e0:	e0 95       	com	r30
    43e2:	0b 2e       	mov	r0, r27
    43e4:	ba 2f       	mov	r27, r26
    43e6:	a0 2d       	mov	r26, r0
    43e8:	0b 01       	movw	r0, r22
    43ea:	b9 01       	movw	r22, r18
    43ec:	90 01       	movw	r18, r0
    43ee:	0c 01       	movw	r0, r24
    43f0:	ca 01       	movw	r24, r20
    43f2:	a0 01       	movw	r20, r0
    43f4:	11 24       	eor	r1, r1
    43f6:	ff 27       	eor	r31, r31
    43f8:	59 1b       	sub	r21, r25
    43fa:	99 f0       	breq	.+38     	; 0x4422 <__addsf3x+0x60>
    43fc:	59 3f       	cpi	r21, 0xF9	; 249
    43fe:	50 f4       	brcc	.+20     	; 0x4414 <__addsf3x+0x52>
    4400:	50 3e       	cpi	r21, 0xE0	; 224
    4402:	68 f1       	brcs	.+90     	; 0x445e <__addsf3x+0x9c>
    4404:	1a 16       	cp	r1, r26
    4406:	f0 40       	sbci	r31, 0x00	; 0
    4408:	a2 2f       	mov	r26, r18
    440a:	23 2f       	mov	r18, r19
    440c:	34 2f       	mov	r19, r20
    440e:	44 27       	eor	r20, r20
    4410:	58 5f       	subi	r21, 0xF8	; 248
    4412:	f3 cf       	rjmp	.-26     	; 0x43fa <__addsf3x+0x38>
    4414:	46 95       	lsr	r20
    4416:	37 95       	ror	r19
    4418:	27 95       	ror	r18
    441a:	a7 95       	ror	r26
    441c:	f0 40       	sbci	r31, 0x00	; 0
    441e:	53 95       	inc	r21
    4420:	c9 f7       	brne	.-14     	; 0x4414 <__addsf3x+0x52>
    4422:	7e f4       	brtc	.+30     	; 0x4442 <__addsf3x+0x80>
    4424:	1f 16       	cp	r1, r31
    4426:	ba 0b       	sbc	r27, r26
    4428:	62 0b       	sbc	r22, r18
    442a:	73 0b       	sbc	r23, r19
    442c:	84 0b       	sbc	r24, r20
    442e:	ba f0       	brmi	.+46     	; 0x445e <__addsf3x+0x9c>
    4430:	91 50       	subi	r25, 0x01	; 1
    4432:	a1 f0       	breq	.+40     	; 0x445c <__addsf3x+0x9a>
    4434:	ff 0f       	add	r31, r31
    4436:	bb 1f       	adc	r27, r27
    4438:	66 1f       	adc	r22, r22
    443a:	77 1f       	adc	r23, r23
    443c:	88 1f       	adc	r24, r24
    443e:	c2 f7       	brpl	.-16     	; 0x4430 <__addsf3x+0x6e>
    4440:	0e c0       	rjmp	.+28     	; 0x445e <__addsf3x+0x9c>
    4442:	ba 0f       	add	r27, r26
    4444:	62 1f       	adc	r22, r18
    4446:	73 1f       	adc	r23, r19
    4448:	84 1f       	adc	r24, r20
    444a:	48 f4       	brcc	.+18     	; 0x445e <__addsf3x+0x9c>
    444c:	87 95       	ror	r24
    444e:	77 95       	ror	r23
    4450:	67 95       	ror	r22
    4452:	b7 95       	ror	r27
    4454:	f7 95       	ror	r31
    4456:	9e 3f       	cpi	r25, 0xFE	; 254
    4458:	08 f0       	brcs	.+2      	; 0x445c <__addsf3x+0x9a>
    445a:	b0 cf       	rjmp	.-160    	; 0x43bc <__addsf3+0x28>
    445c:	93 95       	inc	r25
    445e:	88 0f       	add	r24, r24
    4460:	08 f0       	brcs	.+2      	; 0x4464 <__addsf3x+0xa2>
    4462:	99 27       	eor	r25, r25
    4464:	ee 0f       	add	r30, r30
    4466:	97 95       	ror	r25
    4468:	87 95       	ror	r24
    446a:	08 95       	ret

0000446c <__fixsfsi>:
    446c:	0e 94 3d 22 	call	0x447a	; 0x447a <__fixunssfsi>
    4470:	68 94       	set
    4472:	b1 11       	cpse	r27, r1
    4474:	0c 94 f4 22 	jmp	0x45e8	; 0x45e8 <__fp_szero>
    4478:	08 95       	ret

0000447a <__fixunssfsi>:
    447a:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__fp_splitA>
    447e:	88 f0       	brcs	.+34     	; 0x44a2 <__fixunssfsi+0x28>
    4480:	9f 57       	subi	r25, 0x7F	; 127
    4482:	98 f0       	brcs	.+38     	; 0x44aa <__fixunssfsi+0x30>
    4484:	b9 2f       	mov	r27, r25
    4486:	99 27       	eor	r25, r25
    4488:	b7 51       	subi	r27, 0x17	; 23
    448a:	b0 f0       	brcs	.+44     	; 0x44b8 <__fixunssfsi+0x3e>
    448c:	e1 f0       	breq	.+56     	; 0x44c6 <__fixunssfsi+0x4c>
    448e:	66 0f       	add	r22, r22
    4490:	77 1f       	adc	r23, r23
    4492:	88 1f       	adc	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	1a f0       	brmi	.+6      	; 0x449e <__fixunssfsi+0x24>
    4498:	ba 95       	dec	r27
    449a:	c9 f7       	brne	.-14     	; 0x448e <__fixunssfsi+0x14>
    449c:	14 c0       	rjmp	.+40     	; 0x44c6 <__fixunssfsi+0x4c>
    449e:	b1 30       	cpi	r27, 0x01	; 1
    44a0:	91 f0       	breq	.+36     	; 0x44c6 <__fixunssfsi+0x4c>
    44a2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <__fp_zero>
    44a6:	b1 e0       	ldi	r27, 0x01	; 1
    44a8:	08 95       	ret
    44aa:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <__fp_zero>
    44ae:	67 2f       	mov	r22, r23
    44b0:	78 2f       	mov	r23, r24
    44b2:	88 27       	eor	r24, r24
    44b4:	b8 5f       	subi	r27, 0xF8	; 248
    44b6:	39 f0       	breq	.+14     	; 0x44c6 <__fixunssfsi+0x4c>
    44b8:	b9 3f       	cpi	r27, 0xF9	; 249
    44ba:	cc f3       	brlt	.-14     	; 0x44ae <__fixunssfsi+0x34>
    44bc:	86 95       	lsr	r24
    44be:	77 95       	ror	r23
    44c0:	67 95       	ror	r22
    44c2:	b3 95       	inc	r27
    44c4:	d9 f7       	brne	.-10     	; 0x44bc <__fixunssfsi+0x42>
    44c6:	3e f4       	brtc	.+14     	; 0x44d6 <__fixunssfsi+0x5c>
    44c8:	90 95       	com	r25
    44ca:	80 95       	com	r24
    44cc:	70 95       	com	r23
    44ce:	61 95       	neg	r22
    44d0:	7f 4f       	sbci	r23, 0xFF	; 255
    44d2:	8f 4f       	sbci	r24, 0xFF	; 255
    44d4:	9f 4f       	sbci	r25, 0xFF	; 255
    44d6:	08 95       	ret

000044d8 <__floatunsisf>:
    44d8:	e8 94       	clt
    44da:	09 c0       	rjmp	.+18     	; 0x44ee <__floatsisf+0x12>

000044dc <__floatsisf>:
    44dc:	97 fb       	bst	r25, 7
    44de:	3e f4       	brtc	.+14     	; 0x44ee <__floatsisf+0x12>
    44e0:	90 95       	com	r25
    44e2:	80 95       	com	r24
    44e4:	70 95       	com	r23
    44e6:	61 95       	neg	r22
    44e8:	7f 4f       	sbci	r23, 0xFF	; 255
    44ea:	8f 4f       	sbci	r24, 0xFF	; 255
    44ec:	9f 4f       	sbci	r25, 0xFF	; 255
    44ee:	99 23       	and	r25, r25
    44f0:	a9 f0       	breq	.+42     	; 0x451c <__floatsisf+0x40>
    44f2:	f9 2f       	mov	r31, r25
    44f4:	96 e9       	ldi	r25, 0x96	; 150
    44f6:	bb 27       	eor	r27, r27
    44f8:	93 95       	inc	r25
    44fa:	f6 95       	lsr	r31
    44fc:	87 95       	ror	r24
    44fe:	77 95       	ror	r23
    4500:	67 95       	ror	r22
    4502:	b7 95       	ror	r27
    4504:	f1 11       	cpse	r31, r1
    4506:	f8 cf       	rjmp	.-16     	; 0x44f8 <__floatsisf+0x1c>
    4508:	fa f4       	brpl	.+62     	; 0x4548 <__floatsisf+0x6c>
    450a:	bb 0f       	add	r27, r27
    450c:	11 f4       	brne	.+4      	; 0x4512 <__floatsisf+0x36>
    450e:	60 ff       	sbrs	r22, 0
    4510:	1b c0       	rjmp	.+54     	; 0x4548 <__floatsisf+0x6c>
    4512:	6f 5f       	subi	r22, 0xFF	; 255
    4514:	7f 4f       	sbci	r23, 0xFF	; 255
    4516:	8f 4f       	sbci	r24, 0xFF	; 255
    4518:	9f 4f       	sbci	r25, 0xFF	; 255
    451a:	16 c0       	rjmp	.+44     	; 0x4548 <__floatsisf+0x6c>
    451c:	88 23       	and	r24, r24
    451e:	11 f0       	breq	.+4      	; 0x4524 <__floatsisf+0x48>
    4520:	96 e9       	ldi	r25, 0x96	; 150
    4522:	11 c0       	rjmp	.+34     	; 0x4546 <__floatsisf+0x6a>
    4524:	77 23       	and	r23, r23
    4526:	21 f0       	breq	.+8      	; 0x4530 <__floatsisf+0x54>
    4528:	9e e8       	ldi	r25, 0x8E	; 142
    452a:	87 2f       	mov	r24, r23
    452c:	76 2f       	mov	r23, r22
    452e:	05 c0       	rjmp	.+10     	; 0x453a <__floatsisf+0x5e>
    4530:	66 23       	and	r22, r22
    4532:	71 f0       	breq	.+28     	; 0x4550 <__floatsisf+0x74>
    4534:	96 e8       	ldi	r25, 0x86	; 134
    4536:	86 2f       	mov	r24, r22
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	60 e0       	ldi	r22, 0x00	; 0
    453c:	2a f0       	brmi	.+10     	; 0x4548 <__floatsisf+0x6c>
    453e:	9a 95       	dec	r25
    4540:	66 0f       	add	r22, r22
    4542:	77 1f       	adc	r23, r23
    4544:	88 1f       	adc	r24, r24
    4546:	da f7       	brpl	.-10     	; 0x453e <__floatsisf+0x62>
    4548:	88 0f       	add	r24, r24
    454a:	96 95       	lsr	r25
    454c:	87 95       	ror	r24
    454e:	97 f9       	bld	r25, 7
    4550:	08 95       	ret

00004552 <__fp_inf>:
    4552:	97 f9       	bld	r25, 7
    4554:	9f 67       	ori	r25, 0x7F	; 127
    4556:	80 e8       	ldi	r24, 0x80	; 128
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	60 e0       	ldi	r22, 0x00	; 0
    455c:	08 95       	ret

0000455e <__fp_nan>:
    455e:	9f ef       	ldi	r25, 0xFF	; 255
    4560:	80 ec       	ldi	r24, 0xC0	; 192
    4562:	08 95       	ret

00004564 <__fp_pscA>:
    4564:	00 24       	eor	r0, r0
    4566:	0a 94       	dec	r0
    4568:	16 16       	cp	r1, r22
    456a:	17 06       	cpc	r1, r23
    456c:	18 06       	cpc	r1, r24
    456e:	09 06       	cpc	r0, r25
    4570:	08 95       	ret

00004572 <__fp_pscB>:
    4572:	00 24       	eor	r0, r0
    4574:	0a 94       	dec	r0
    4576:	12 16       	cp	r1, r18
    4578:	13 06       	cpc	r1, r19
    457a:	14 06       	cpc	r1, r20
    457c:	05 06       	cpc	r0, r21
    457e:	08 95       	ret

00004580 <__fp_round>:
    4580:	09 2e       	mov	r0, r25
    4582:	03 94       	inc	r0
    4584:	00 0c       	add	r0, r0
    4586:	11 f4       	brne	.+4      	; 0x458c <__fp_round+0xc>
    4588:	88 23       	and	r24, r24
    458a:	52 f0       	brmi	.+20     	; 0x45a0 <__fp_round+0x20>
    458c:	bb 0f       	add	r27, r27
    458e:	40 f4       	brcc	.+16     	; 0x45a0 <__fp_round+0x20>
    4590:	bf 2b       	or	r27, r31
    4592:	11 f4       	brne	.+4      	; 0x4598 <__fp_round+0x18>
    4594:	60 ff       	sbrs	r22, 0
    4596:	04 c0       	rjmp	.+8      	; 0x45a0 <__fp_round+0x20>
    4598:	6f 5f       	subi	r22, 0xFF	; 255
    459a:	7f 4f       	sbci	r23, 0xFF	; 255
    459c:	8f 4f       	sbci	r24, 0xFF	; 255
    459e:	9f 4f       	sbci	r25, 0xFF	; 255
    45a0:	08 95       	ret

000045a2 <__fp_split3>:
    45a2:	57 fd       	sbrc	r21, 7
    45a4:	90 58       	subi	r25, 0x80	; 128
    45a6:	44 0f       	add	r20, r20
    45a8:	55 1f       	adc	r21, r21
    45aa:	59 f0       	breq	.+22     	; 0x45c2 <__fp_splitA+0x10>
    45ac:	5f 3f       	cpi	r21, 0xFF	; 255
    45ae:	71 f0       	breq	.+28     	; 0x45cc <__fp_splitA+0x1a>
    45b0:	47 95       	ror	r20

000045b2 <__fp_splitA>:
    45b2:	88 0f       	add	r24, r24
    45b4:	97 fb       	bst	r25, 7
    45b6:	99 1f       	adc	r25, r25
    45b8:	61 f0       	breq	.+24     	; 0x45d2 <__fp_splitA+0x20>
    45ba:	9f 3f       	cpi	r25, 0xFF	; 255
    45bc:	79 f0       	breq	.+30     	; 0x45dc <__fp_splitA+0x2a>
    45be:	87 95       	ror	r24
    45c0:	08 95       	ret
    45c2:	12 16       	cp	r1, r18
    45c4:	13 06       	cpc	r1, r19
    45c6:	14 06       	cpc	r1, r20
    45c8:	55 1f       	adc	r21, r21
    45ca:	f2 cf       	rjmp	.-28     	; 0x45b0 <__fp_split3+0xe>
    45cc:	46 95       	lsr	r20
    45ce:	f1 df       	rcall	.-30     	; 0x45b2 <__fp_splitA>
    45d0:	08 c0       	rjmp	.+16     	; 0x45e2 <__fp_splitA+0x30>
    45d2:	16 16       	cp	r1, r22
    45d4:	17 06       	cpc	r1, r23
    45d6:	18 06       	cpc	r1, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	f1 cf       	rjmp	.-30     	; 0x45be <__fp_splitA+0xc>
    45dc:	86 95       	lsr	r24
    45de:	71 05       	cpc	r23, r1
    45e0:	61 05       	cpc	r22, r1
    45e2:	08 94       	sec
    45e4:	08 95       	ret

000045e6 <__fp_zero>:
    45e6:	e8 94       	clt

000045e8 <__fp_szero>:
    45e8:	bb 27       	eor	r27, r27
    45ea:	66 27       	eor	r22, r22
    45ec:	77 27       	eor	r23, r23
    45ee:	cb 01       	movw	r24, r22
    45f0:	97 f9       	bld	r25, 7
    45f2:	08 95       	ret

000045f4 <__mulsf3>:
    45f4:	0e 94 0d 23 	call	0x461a	; 0x461a <__mulsf3x>
    45f8:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <__fp_round>
    45fc:	0e 94 b2 22 	call	0x4564	; 0x4564 <__fp_pscA>
    4600:	38 f0       	brcs	.+14     	; 0x4610 <__mulsf3+0x1c>
    4602:	0e 94 b9 22 	call	0x4572	; 0x4572 <__fp_pscB>
    4606:	20 f0       	brcs	.+8      	; 0x4610 <__mulsf3+0x1c>
    4608:	95 23       	and	r25, r21
    460a:	11 f0       	breq	.+4      	; 0x4610 <__mulsf3+0x1c>
    460c:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__fp_inf>
    4610:	0c 94 af 22 	jmp	0x455e	; 0x455e <__fp_nan>
    4614:	11 24       	eor	r1, r1
    4616:	0c 94 f4 22 	jmp	0x45e8	; 0x45e8 <__fp_szero>

0000461a <__mulsf3x>:
    461a:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <__fp_split3>
    461e:	70 f3       	brcs	.-36     	; 0x45fc <__mulsf3+0x8>

00004620 <__mulsf3_pse>:
    4620:	95 9f       	mul	r25, r21
    4622:	c1 f3       	breq	.-16     	; 0x4614 <__mulsf3+0x20>
    4624:	95 0f       	add	r25, r21
    4626:	50 e0       	ldi	r21, 0x00	; 0
    4628:	55 1f       	adc	r21, r21
    462a:	62 9f       	mul	r22, r18
    462c:	f0 01       	movw	r30, r0
    462e:	72 9f       	mul	r23, r18
    4630:	bb 27       	eor	r27, r27
    4632:	f0 0d       	add	r31, r0
    4634:	b1 1d       	adc	r27, r1
    4636:	63 9f       	mul	r22, r19
    4638:	aa 27       	eor	r26, r26
    463a:	f0 0d       	add	r31, r0
    463c:	b1 1d       	adc	r27, r1
    463e:	aa 1f       	adc	r26, r26
    4640:	64 9f       	mul	r22, r20
    4642:	66 27       	eor	r22, r22
    4644:	b0 0d       	add	r27, r0
    4646:	a1 1d       	adc	r26, r1
    4648:	66 1f       	adc	r22, r22
    464a:	82 9f       	mul	r24, r18
    464c:	22 27       	eor	r18, r18
    464e:	b0 0d       	add	r27, r0
    4650:	a1 1d       	adc	r26, r1
    4652:	62 1f       	adc	r22, r18
    4654:	73 9f       	mul	r23, r19
    4656:	b0 0d       	add	r27, r0
    4658:	a1 1d       	adc	r26, r1
    465a:	62 1f       	adc	r22, r18
    465c:	83 9f       	mul	r24, r19
    465e:	a0 0d       	add	r26, r0
    4660:	61 1d       	adc	r22, r1
    4662:	22 1f       	adc	r18, r18
    4664:	74 9f       	mul	r23, r20
    4666:	33 27       	eor	r19, r19
    4668:	a0 0d       	add	r26, r0
    466a:	61 1d       	adc	r22, r1
    466c:	23 1f       	adc	r18, r19
    466e:	84 9f       	mul	r24, r20
    4670:	60 0d       	add	r22, r0
    4672:	21 1d       	adc	r18, r1
    4674:	82 2f       	mov	r24, r18
    4676:	76 2f       	mov	r23, r22
    4678:	6a 2f       	mov	r22, r26
    467a:	11 24       	eor	r1, r1
    467c:	9f 57       	subi	r25, 0x7F	; 127
    467e:	50 40       	sbci	r21, 0x00	; 0
    4680:	9a f0       	brmi	.+38     	; 0x46a8 <__mulsf3_pse+0x88>
    4682:	f1 f0       	breq	.+60     	; 0x46c0 <__mulsf3_pse+0xa0>
    4684:	88 23       	and	r24, r24
    4686:	4a f0       	brmi	.+18     	; 0x469a <__mulsf3_pse+0x7a>
    4688:	ee 0f       	add	r30, r30
    468a:	ff 1f       	adc	r31, r31
    468c:	bb 1f       	adc	r27, r27
    468e:	66 1f       	adc	r22, r22
    4690:	77 1f       	adc	r23, r23
    4692:	88 1f       	adc	r24, r24
    4694:	91 50       	subi	r25, 0x01	; 1
    4696:	50 40       	sbci	r21, 0x00	; 0
    4698:	a9 f7       	brne	.-22     	; 0x4684 <__mulsf3_pse+0x64>
    469a:	9e 3f       	cpi	r25, 0xFE	; 254
    469c:	51 05       	cpc	r21, r1
    469e:	80 f0       	brcs	.+32     	; 0x46c0 <__mulsf3_pse+0xa0>
    46a0:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__fp_inf>
    46a4:	0c 94 f4 22 	jmp	0x45e8	; 0x45e8 <__fp_szero>
    46a8:	5f 3f       	cpi	r21, 0xFF	; 255
    46aa:	e4 f3       	brlt	.-8      	; 0x46a4 <__mulsf3_pse+0x84>
    46ac:	98 3e       	cpi	r25, 0xE8	; 232
    46ae:	d4 f3       	brlt	.-12     	; 0x46a4 <__mulsf3_pse+0x84>
    46b0:	86 95       	lsr	r24
    46b2:	77 95       	ror	r23
    46b4:	67 95       	ror	r22
    46b6:	b7 95       	ror	r27
    46b8:	f7 95       	ror	r31
    46ba:	e7 95       	ror	r30
    46bc:	9f 5f       	subi	r25, 0xFF	; 255
    46be:	c1 f7       	brne	.-16     	; 0x46b0 <__mulsf3_pse+0x90>
    46c0:	fe 2b       	or	r31, r30
    46c2:	88 0f       	add	r24, r24
    46c4:	91 1d       	adc	r25, r1
    46c6:	96 95       	lsr	r25
    46c8:	87 95       	ror	r24
    46ca:	97 f9       	bld	r25, 7
    46cc:	08 95       	ret

000046ce <__divmodsi4>:
    46ce:	05 2e       	mov	r0, r21
    46d0:	97 fb       	bst	r25, 7
    46d2:	1e f4       	brtc	.+6      	; 0x46da <__divmodsi4+0xc>
    46d4:	00 94       	com	r0
    46d6:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__negsi2>
    46da:	57 fd       	sbrc	r21, 7
    46dc:	07 d0       	rcall	.+14     	; 0x46ec <__divmodsi4_neg2>
    46de:	0e 94 91 23 	call	0x4722	; 0x4722 <__udivmodsi4>
    46e2:	07 fc       	sbrc	r0, 7
    46e4:	03 d0       	rcall	.+6      	; 0x46ec <__divmodsi4_neg2>
    46e6:	4e f4       	brtc	.+18     	; 0x46fa <__divmodsi4_exit>
    46e8:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <__negsi2>

000046ec <__divmodsi4_neg2>:
    46ec:	50 95       	com	r21
    46ee:	40 95       	com	r20
    46f0:	30 95       	com	r19
    46f2:	21 95       	neg	r18
    46f4:	3f 4f       	sbci	r19, 0xFF	; 255
    46f6:	4f 4f       	sbci	r20, 0xFF	; 255
    46f8:	5f 4f       	sbci	r21, 0xFF	; 255

000046fa <__divmodsi4_exit>:
    46fa:	08 95       	ret

000046fc <__negsi2>:
    46fc:	90 95       	com	r25
    46fe:	80 95       	com	r24
    4700:	70 95       	com	r23
    4702:	61 95       	neg	r22
    4704:	7f 4f       	sbci	r23, 0xFF	; 255
    4706:	8f 4f       	sbci	r24, 0xFF	; 255
    4708:	9f 4f       	sbci	r25, 0xFF	; 255
    470a:	08 95       	ret

0000470c <__muluhisi3>:
    470c:	0e 94 b3 23 	call	0x4766	; 0x4766 <__umulhisi3>
    4710:	a5 9f       	mul	r26, r21
    4712:	90 0d       	add	r25, r0
    4714:	b4 9f       	mul	r27, r20
    4716:	90 0d       	add	r25, r0
    4718:	a4 9f       	mul	r26, r20
    471a:	80 0d       	add	r24, r0
    471c:	91 1d       	adc	r25, r1
    471e:	11 24       	eor	r1, r1
    4720:	08 95       	ret

00004722 <__udivmodsi4>:
    4722:	a1 e2       	ldi	r26, 0x21	; 33
    4724:	1a 2e       	mov	r1, r26
    4726:	aa 1b       	sub	r26, r26
    4728:	bb 1b       	sub	r27, r27
    472a:	fd 01       	movw	r30, r26
    472c:	0d c0       	rjmp	.+26     	; 0x4748 <__udivmodsi4_ep>

0000472e <__udivmodsi4_loop>:
    472e:	aa 1f       	adc	r26, r26
    4730:	bb 1f       	adc	r27, r27
    4732:	ee 1f       	adc	r30, r30
    4734:	ff 1f       	adc	r31, r31
    4736:	a2 17       	cp	r26, r18
    4738:	b3 07       	cpc	r27, r19
    473a:	e4 07       	cpc	r30, r20
    473c:	f5 07       	cpc	r31, r21
    473e:	20 f0       	brcs	.+8      	; 0x4748 <__udivmodsi4_ep>
    4740:	a2 1b       	sub	r26, r18
    4742:	b3 0b       	sbc	r27, r19
    4744:	e4 0b       	sbc	r30, r20
    4746:	f5 0b       	sbc	r31, r21

00004748 <__udivmodsi4_ep>:
    4748:	66 1f       	adc	r22, r22
    474a:	77 1f       	adc	r23, r23
    474c:	88 1f       	adc	r24, r24
    474e:	99 1f       	adc	r25, r25
    4750:	1a 94       	dec	r1
    4752:	69 f7       	brne	.-38     	; 0x472e <__udivmodsi4_loop>
    4754:	60 95       	com	r22
    4756:	70 95       	com	r23
    4758:	80 95       	com	r24
    475a:	90 95       	com	r25
    475c:	9b 01       	movw	r18, r22
    475e:	ac 01       	movw	r20, r24
    4760:	bd 01       	movw	r22, r26
    4762:	cf 01       	movw	r24, r30
    4764:	08 95       	ret

00004766 <__umulhisi3>:
    4766:	a2 9f       	mul	r26, r18
    4768:	b0 01       	movw	r22, r0
    476a:	b3 9f       	mul	r27, r19
    476c:	c0 01       	movw	r24, r0
    476e:	a3 9f       	mul	r26, r19
    4770:	70 0d       	add	r23, r0
    4772:	81 1d       	adc	r24, r1
    4774:	11 24       	eor	r1, r1
    4776:	91 1d       	adc	r25, r1
    4778:	b2 9f       	mul	r27, r18
    477a:	70 0d       	add	r23, r0
    477c:	81 1d       	adc	r24, r1
    477e:	11 24       	eor	r1, r1
    4780:	91 1d       	adc	r25, r1
    4782:	08 95       	ret

00004784 <__itoa_ncheck>:
    4784:	bb 27       	eor	r27, r27
    4786:	4a 30       	cpi	r20, 0x0A	; 10
    4788:	31 f4       	brne	.+12     	; 0x4796 <__itoa_ncheck+0x12>
    478a:	99 23       	and	r25, r25
    478c:	22 f4       	brpl	.+8      	; 0x4796 <__itoa_ncheck+0x12>
    478e:	bd e2       	ldi	r27, 0x2D	; 45
    4790:	90 95       	com	r25
    4792:	81 95       	neg	r24
    4794:	9f 4f       	sbci	r25, 0xFF	; 255
    4796:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__utoa_common>

0000479a <__utoa_ncheck>:
    479a:	bb 27       	eor	r27, r27

0000479c <__utoa_common>:
    479c:	fb 01       	movw	r30, r22
    479e:	55 27       	eor	r21, r21
    47a0:	aa 27       	eor	r26, r26
    47a2:	88 0f       	add	r24, r24
    47a4:	99 1f       	adc	r25, r25
    47a6:	aa 1f       	adc	r26, r26
    47a8:	a4 17       	cp	r26, r20
    47aa:	10 f0       	brcs	.+4      	; 0x47b0 <__utoa_common+0x14>
    47ac:	a4 1b       	sub	r26, r20
    47ae:	83 95       	inc	r24
    47b0:	50 51       	subi	r21, 0x10	; 16
    47b2:	b9 f7       	brne	.-18     	; 0x47a2 <__utoa_common+0x6>
    47b4:	a0 5d       	subi	r26, 0xD0	; 208
    47b6:	aa 33       	cpi	r26, 0x3A	; 58
    47b8:	08 f0       	brcs	.+2      	; 0x47bc <__utoa_common+0x20>
    47ba:	a9 5d       	subi	r26, 0xD9	; 217
    47bc:	a1 93       	st	Z+, r26
    47be:	00 97       	sbiw	r24, 0x00	; 0
    47c0:	79 f7       	brne	.-34     	; 0x47a0 <__utoa_common+0x4>
    47c2:	b1 11       	cpse	r27, r1
    47c4:	b1 93       	st	Z+, r27
    47c6:	11 92       	st	Z+, r1
    47c8:	cb 01       	movw	r24, r22
    47ca:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <strrev>

000047ce <printf>:
    47ce:	a0 e0       	ldi	r26, 0x00	; 0
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	ed ee       	ldi	r30, 0xED	; 237
    47d4:	f3 e2       	ldi	r31, 0x23	; 35
    47d6:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__prologue_saves__+0x20>
    47da:	ae 01       	movw	r20, r28
    47dc:	4b 5f       	subi	r20, 0xFB	; 251
    47de:	5f 4f       	sbci	r21, 0xFF	; 255
    47e0:	fa 01       	movw	r30, r20
    47e2:	61 91       	ld	r22, Z+
    47e4:	71 91       	ld	r23, Z+
    47e6:	af 01       	movw	r20, r30
    47e8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <__iob+0x2>
    47ec:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <__iob+0x3>
    47f0:	0e 94 2d 24 	call	0x485a	; 0x485a <vfprintf>
    47f4:	e2 e0       	ldi	r30, 0x02	; 2
    47f6:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__epilogue_restores__+0x20>

000047fa <puts>:
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <__iob+0x2>
    4806:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <__iob+0x3>
    480a:	23 81       	ldd	r18, Z+3	; 0x03
    480c:	21 ff       	sbrs	r18, 1
    480e:	1b c0       	rjmp	.+54     	; 0x4846 <puts+0x4c>
    4810:	8c 01       	movw	r16, r24
    4812:	d0 e0       	ldi	r29, 0x00	; 0
    4814:	c0 e0       	ldi	r28, 0x00	; 0
    4816:	f8 01       	movw	r30, r16
    4818:	81 91       	ld	r24, Z+
    481a:	8f 01       	movw	r16, r30
    481c:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <__iob+0x2>
    4820:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <__iob+0x3>
    4824:	db 01       	movw	r26, r22
    4826:	18 96       	adiw	r26, 0x08	; 8
    4828:	ed 91       	ld	r30, X+
    482a:	fc 91       	ld	r31, X
    482c:	19 97       	sbiw	r26, 0x09	; 9
    482e:	88 23       	and	r24, r24
    4830:	31 f0       	breq	.+12     	; 0x483e <puts+0x44>
    4832:	09 95       	icall
    4834:	89 2b       	or	r24, r25
    4836:	79 f3       	breq	.-34     	; 0x4816 <puts+0x1c>
    4838:	df ef       	ldi	r29, 0xFF	; 255
    483a:	cf ef       	ldi	r28, 0xFF	; 255
    483c:	ec cf       	rjmp	.-40     	; 0x4816 <puts+0x1c>
    483e:	8a e0       	ldi	r24, 0x0A	; 10
    4840:	09 95       	icall
    4842:	89 2b       	or	r24, r25
    4844:	19 f0       	breq	.+6      	; 0x484c <puts+0x52>
    4846:	8f ef       	ldi	r24, 0xFF	; 255
    4848:	9f ef       	ldi	r25, 0xFF	; 255
    484a:	02 c0       	rjmp	.+4      	; 0x4850 <puts+0x56>
    484c:	8d 2f       	mov	r24, r29
    484e:	9c 2f       	mov	r25, r28
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	1f 91       	pop	r17
    4856:	0f 91       	pop	r16
    4858:	08 95       	ret

0000485a <vfprintf>:
    485a:	ac e0       	ldi	r26, 0x0C	; 12
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e3 e3       	ldi	r30, 0x33	; 51
    4860:	f4 e2       	ldi	r31, 0x24	; 36
    4862:	0c 94 b4 26 	jmp	0x4d68	; 0x4d68 <__prologue_saves__>
    4866:	6c 01       	movw	r12, r24
    4868:	7b 01       	movw	r14, r22
    486a:	8a 01       	movw	r16, r20
    486c:	fc 01       	movw	r30, r24
    486e:	17 82       	std	Z+7, r1	; 0x07
    4870:	16 82       	std	Z+6, r1	; 0x06
    4872:	83 81       	ldd	r24, Z+3	; 0x03
    4874:	81 ff       	sbrs	r24, 1
    4876:	be c1       	rjmp	.+892    	; 0x4bf4 <vfprintf+0x39a>
    4878:	ce 01       	movw	r24, r28
    487a:	01 96       	adiw	r24, 0x01	; 1
    487c:	4c 01       	movw	r8, r24
    487e:	f6 01       	movw	r30, r12
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	f7 01       	movw	r30, r14
    4884:	93 fd       	sbrc	r25, 3
    4886:	85 91       	lpm	r24, Z+
    4888:	93 ff       	sbrs	r25, 3
    488a:	81 91       	ld	r24, Z+
    488c:	7f 01       	movw	r14, r30
    488e:	88 23       	and	r24, r24
    4890:	09 f4       	brne	.+2      	; 0x4894 <vfprintf+0x3a>
    4892:	ac c1       	rjmp	.+856    	; 0x4bec <vfprintf+0x392>
    4894:	85 32       	cpi	r24, 0x25	; 37
    4896:	39 f4       	brne	.+14     	; 0x48a6 <vfprintf+0x4c>
    4898:	93 fd       	sbrc	r25, 3
    489a:	85 91       	lpm	r24, Z+
    489c:	93 ff       	sbrs	r25, 3
    489e:	81 91       	ld	r24, Z+
    48a0:	7f 01       	movw	r14, r30
    48a2:	85 32       	cpi	r24, 0x25	; 37
    48a4:	29 f4       	brne	.+10     	; 0x48b0 <vfprintf+0x56>
    48a6:	b6 01       	movw	r22, r12
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    48ae:	e7 cf       	rjmp	.-50     	; 0x487e <vfprintf+0x24>
    48b0:	51 2c       	mov	r5, r1
    48b2:	31 2c       	mov	r3, r1
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	20 32       	cpi	r18, 0x20	; 32
    48b8:	a0 f4       	brcc	.+40     	; 0x48e2 <vfprintf+0x88>
    48ba:	8b 32       	cpi	r24, 0x2B	; 43
    48bc:	69 f0       	breq	.+26     	; 0x48d8 <vfprintf+0x7e>
    48be:	30 f4       	brcc	.+12     	; 0x48cc <vfprintf+0x72>
    48c0:	80 32       	cpi	r24, 0x20	; 32
    48c2:	59 f0       	breq	.+22     	; 0x48da <vfprintf+0x80>
    48c4:	83 32       	cpi	r24, 0x23	; 35
    48c6:	69 f4       	brne	.+26     	; 0x48e2 <vfprintf+0x88>
    48c8:	20 61       	ori	r18, 0x10	; 16
    48ca:	2c c0       	rjmp	.+88     	; 0x4924 <vfprintf+0xca>
    48cc:	8d 32       	cpi	r24, 0x2D	; 45
    48ce:	39 f0       	breq	.+14     	; 0x48de <vfprintf+0x84>
    48d0:	80 33       	cpi	r24, 0x30	; 48
    48d2:	39 f4       	brne	.+14     	; 0x48e2 <vfprintf+0x88>
    48d4:	21 60       	ori	r18, 0x01	; 1
    48d6:	26 c0       	rjmp	.+76     	; 0x4924 <vfprintf+0xca>
    48d8:	22 60       	ori	r18, 0x02	; 2
    48da:	24 60       	ori	r18, 0x04	; 4
    48dc:	23 c0       	rjmp	.+70     	; 0x4924 <vfprintf+0xca>
    48de:	28 60       	ori	r18, 0x08	; 8
    48e0:	21 c0       	rjmp	.+66     	; 0x4924 <vfprintf+0xca>
    48e2:	27 fd       	sbrc	r18, 7
    48e4:	27 c0       	rjmp	.+78     	; 0x4934 <vfprintf+0xda>
    48e6:	30 ed       	ldi	r19, 0xD0	; 208
    48e8:	38 0f       	add	r19, r24
    48ea:	3a 30       	cpi	r19, 0x0A	; 10
    48ec:	78 f4       	brcc	.+30     	; 0x490c <vfprintf+0xb2>
    48ee:	26 ff       	sbrs	r18, 6
    48f0:	06 c0       	rjmp	.+12     	; 0x48fe <vfprintf+0xa4>
    48f2:	fa e0       	ldi	r31, 0x0A	; 10
    48f4:	5f 9e       	mul	r5, r31
    48f6:	30 0d       	add	r19, r0
    48f8:	11 24       	eor	r1, r1
    48fa:	53 2e       	mov	r5, r19
    48fc:	13 c0       	rjmp	.+38     	; 0x4924 <vfprintf+0xca>
    48fe:	8a e0       	ldi	r24, 0x0A	; 10
    4900:	38 9e       	mul	r3, r24
    4902:	30 0d       	add	r19, r0
    4904:	11 24       	eor	r1, r1
    4906:	33 2e       	mov	r3, r19
    4908:	20 62       	ori	r18, 0x20	; 32
    490a:	0c c0       	rjmp	.+24     	; 0x4924 <vfprintf+0xca>
    490c:	8e 32       	cpi	r24, 0x2E	; 46
    490e:	21 f4       	brne	.+8      	; 0x4918 <vfprintf+0xbe>
    4910:	26 fd       	sbrc	r18, 6
    4912:	6c c1       	rjmp	.+728    	; 0x4bec <vfprintf+0x392>
    4914:	20 64       	ori	r18, 0x40	; 64
    4916:	06 c0       	rjmp	.+12     	; 0x4924 <vfprintf+0xca>
    4918:	8c 36       	cpi	r24, 0x6C	; 108
    491a:	11 f4       	brne	.+4      	; 0x4920 <vfprintf+0xc6>
    491c:	20 68       	ori	r18, 0x80	; 128
    491e:	02 c0       	rjmp	.+4      	; 0x4924 <vfprintf+0xca>
    4920:	88 36       	cpi	r24, 0x68	; 104
    4922:	41 f4       	brne	.+16     	; 0x4934 <vfprintf+0xda>
    4924:	f7 01       	movw	r30, r14
    4926:	93 fd       	sbrc	r25, 3
    4928:	85 91       	lpm	r24, Z+
    492a:	93 ff       	sbrs	r25, 3
    492c:	81 91       	ld	r24, Z+
    492e:	7f 01       	movw	r14, r30
    4930:	81 11       	cpse	r24, r1
    4932:	c1 cf       	rjmp	.-126    	; 0x48b6 <vfprintf+0x5c>
    4934:	98 2f       	mov	r25, r24
    4936:	9f 7d       	andi	r25, 0xDF	; 223
    4938:	95 54       	subi	r25, 0x45	; 69
    493a:	93 30       	cpi	r25, 0x03	; 3
    493c:	28 f4       	brcc	.+10     	; 0x4948 <vfprintf+0xee>
    493e:	0c 5f       	subi	r16, 0xFC	; 252
    4940:	1f 4f       	sbci	r17, 0xFF	; 255
    4942:	9f e3       	ldi	r25, 0x3F	; 63
    4944:	99 83       	std	Y+1, r25	; 0x01
    4946:	0d c0       	rjmp	.+26     	; 0x4962 <vfprintf+0x108>
    4948:	83 36       	cpi	r24, 0x63	; 99
    494a:	31 f0       	breq	.+12     	; 0x4958 <vfprintf+0xfe>
    494c:	83 37       	cpi	r24, 0x73	; 115
    494e:	71 f0       	breq	.+28     	; 0x496c <vfprintf+0x112>
    4950:	83 35       	cpi	r24, 0x53	; 83
    4952:	09 f0       	breq	.+2      	; 0x4956 <vfprintf+0xfc>
    4954:	5b c0       	rjmp	.+182    	; 0x4a0c <vfprintf+0x1b2>
    4956:	22 c0       	rjmp	.+68     	; 0x499c <vfprintf+0x142>
    4958:	f8 01       	movw	r30, r16
    495a:	80 81       	ld	r24, Z
    495c:	89 83       	std	Y+1, r24	; 0x01
    495e:	0e 5f       	subi	r16, 0xFE	; 254
    4960:	1f 4f       	sbci	r17, 0xFF	; 255
    4962:	44 24       	eor	r4, r4
    4964:	43 94       	inc	r4
    4966:	51 2c       	mov	r5, r1
    4968:	54 01       	movw	r10, r8
    496a:	15 c0       	rjmp	.+42     	; 0x4996 <vfprintf+0x13c>
    496c:	38 01       	movw	r6, r16
    496e:	f2 e0       	ldi	r31, 0x02	; 2
    4970:	6f 0e       	add	r6, r31
    4972:	71 1c       	adc	r7, r1
    4974:	f8 01       	movw	r30, r16
    4976:	a0 80       	ld	r10, Z
    4978:	b1 80       	ldd	r11, Z+1	; 0x01
    497a:	26 ff       	sbrs	r18, 6
    497c:	03 c0       	rjmp	.+6      	; 0x4984 <vfprintf+0x12a>
    497e:	65 2d       	mov	r22, r5
    4980:	70 e0       	ldi	r23, 0x00	; 0
    4982:	02 c0       	rjmp	.+4      	; 0x4988 <vfprintf+0x12e>
    4984:	6f ef       	ldi	r22, 0xFF	; 255
    4986:	7f ef       	ldi	r23, 0xFF	; 255
    4988:	c5 01       	movw	r24, r10
    498a:	2c 87       	std	Y+12, r18	; 0x0c
    498c:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <strnlen>
    4990:	2c 01       	movw	r4, r24
    4992:	83 01       	movw	r16, r6
    4994:	2c 85       	ldd	r18, Y+12	; 0x0c
    4996:	2f 77       	andi	r18, 0x7F	; 127
    4998:	22 2e       	mov	r2, r18
    499a:	17 c0       	rjmp	.+46     	; 0x49ca <vfprintf+0x170>
    499c:	38 01       	movw	r6, r16
    499e:	f2 e0       	ldi	r31, 0x02	; 2
    49a0:	6f 0e       	add	r6, r31
    49a2:	71 1c       	adc	r7, r1
    49a4:	f8 01       	movw	r30, r16
    49a6:	a0 80       	ld	r10, Z
    49a8:	b1 80       	ldd	r11, Z+1	; 0x01
    49aa:	26 ff       	sbrs	r18, 6
    49ac:	03 c0       	rjmp	.+6      	; 0x49b4 <vfprintf+0x15a>
    49ae:	65 2d       	mov	r22, r5
    49b0:	70 e0       	ldi	r23, 0x00	; 0
    49b2:	02 c0       	rjmp	.+4      	; 0x49b8 <vfprintf+0x15e>
    49b4:	6f ef       	ldi	r22, 0xFF	; 255
    49b6:	7f ef       	ldi	r23, 0xFF	; 255
    49b8:	c5 01       	movw	r24, r10
    49ba:	2c 87       	std	Y+12, r18	; 0x0c
    49bc:	0e 94 00 26 	call	0x4c00	; 0x4c00 <strnlen_P>
    49c0:	2c 01       	movw	r4, r24
    49c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    49c4:	20 68       	ori	r18, 0x80	; 128
    49c6:	22 2e       	mov	r2, r18
    49c8:	83 01       	movw	r16, r6
    49ca:	23 fc       	sbrc	r2, 3
    49cc:	1b c0       	rjmp	.+54     	; 0x4a04 <vfprintf+0x1aa>
    49ce:	83 2d       	mov	r24, r3
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	48 16       	cp	r4, r24
    49d4:	59 06       	cpc	r5, r25
    49d6:	b0 f4       	brcc	.+44     	; 0x4a04 <vfprintf+0x1aa>
    49d8:	b6 01       	movw	r22, r12
    49da:	80 e2       	ldi	r24, 0x20	; 32
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    49e2:	3a 94       	dec	r3
    49e4:	f4 cf       	rjmp	.-24     	; 0x49ce <vfprintf+0x174>
    49e6:	f5 01       	movw	r30, r10
    49e8:	27 fc       	sbrc	r2, 7
    49ea:	85 91       	lpm	r24, Z+
    49ec:	27 fe       	sbrs	r2, 7
    49ee:	81 91       	ld	r24, Z+
    49f0:	5f 01       	movw	r10, r30
    49f2:	b6 01       	movw	r22, r12
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    49fa:	31 10       	cpse	r3, r1
    49fc:	3a 94       	dec	r3
    49fe:	f1 e0       	ldi	r31, 0x01	; 1
    4a00:	4f 1a       	sub	r4, r31
    4a02:	51 08       	sbc	r5, r1
    4a04:	41 14       	cp	r4, r1
    4a06:	51 04       	cpc	r5, r1
    4a08:	71 f7       	brne	.-36     	; 0x49e6 <vfprintf+0x18c>
    4a0a:	e6 c0       	rjmp	.+460    	; 0x4bd8 <vfprintf+0x37e>
    4a0c:	84 36       	cpi	r24, 0x64	; 100
    4a0e:	11 f0       	breq	.+4      	; 0x4a14 <vfprintf+0x1ba>
    4a10:	89 36       	cpi	r24, 0x69	; 105
    4a12:	39 f5       	brne	.+78     	; 0x4a62 <vfprintf+0x208>
    4a14:	f8 01       	movw	r30, r16
    4a16:	27 ff       	sbrs	r18, 7
    4a18:	07 c0       	rjmp	.+14     	; 0x4a28 <vfprintf+0x1ce>
    4a1a:	60 81       	ld	r22, Z
    4a1c:	71 81       	ldd	r23, Z+1	; 0x01
    4a1e:	82 81       	ldd	r24, Z+2	; 0x02
    4a20:	93 81       	ldd	r25, Z+3	; 0x03
    4a22:	0c 5f       	subi	r16, 0xFC	; 252
    4a24:	1f 4f       	sbci	r17, 0xFF	; 255
    4a26:	08 c0       	rjmp	.+16     	; 0x4a38 <vfprintf+0x1de>
    4a28:	60 81       	ld	r22, Z
    4a2a:	71 81       	ldd	r23, Z+1	; 0x01
    4a2c:	07 2e       	mov	r0, r23
    4a2e:	00 0c       	add	r0, r0
    4a30:	88 0b       	sbc	r24, r24
    4a32:	99 0b       	sbc	r25, r25
    4a34:	0e 5f       	subi	r16, 0xFE	; 254
    4a36:	1f 4f       	sbci	r17, 0xFF	; 255
    4a38:	2f 76       	andi	r18, 0x6F	; 111
    4a3a:	72 2e       	mov	r7, r18
    4a3c:	97 ff       	sbrs	r25, 7
    4a3e:	09 c0       	rjmp	.+18     	; 0x4a52 <vfprintf+0x1f8>
    4a40:	90 95       	com	r25
    4a42:	80 95       	com	r24
    4a44:	70 95       	com	r23
    4a46:	61 95       	neg	r22
    4a48:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4e:	20 68       	ori	r18, 0x80	; 128
    4a50:	72 2e       	mov	r7, r18
    4a52:	2a e0       	ldi	r18, 0x0A	; 10
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	a4 01       	movw	r20, r8
    4a58:	0e 94 56 26 	call	0x4cac	; 0x4cac <__ultoa_invert>
    4a5c:	a8 2e       	mov	r10, r24
    4a5e:	a8 18       	sub	r10, r8
    4a60:	44 c0       	rjmp	.+136    	; 0x4aea <vfprintf+0x290>
    4a62:	85 37       	cpi	r24, 0x75	; 117
    4a64:	29 f4       	brne	.+10     	; 0x4a70 <vfprintf+0x216>
    4a66:	2f 7e       	andi	r18, 0xEF	; 239
    4a68:	b2 2e       	mov	r11, r18
    4a6a:	2a e0       	ldi	r18, 0x0A	; 10
    4a6c:	30 e0       	ldi	r19, 0x00	; 0
    4a6e:	25 c0       	rjmp	.+74     	; 0x4aba <vfprintf+0x260>
    4a70:	f2 2f       	mov	r31, r18
    4a72:	f9 7f       	andi	r31, 0xF9	; 249
    4a74:	bf 2e       	mov	r11, r31
    4a76:	8f 36       	cpi	r24, 0x6F	; 111
    4a78:	c1 f0       	breq	.+48     	; 0x4aaa <vfprintf+0x250>
    4a7a:	18 f4       	brcc	.+6      	; 0x4a82 <vfprintf+0x228>
    4a7c:	88 35       	cpi	r24, 0x58	; 88
    4a7e:	79 f0       	breq	.+30     	; 0x4a9e <vfprintf+0x244>
    4a80:	b5 c0       	rjmp	.+362    	; 0x4bec <vfprintf+0x392>
    4a82:	80 37       	cpi	r24, 0x70	; 112
    4a84:	19 f0       	breq	.+6      	; 0x4a8c <vfprintf+0x232>
    4a86:	88 37       	cpi	r24, 0x78	; 120
    4a88:	21 f0       	breq	.+8      	; 0x4a92 <vfprintf+0x238>
    4a8a:	b0 c0       	rjmp	.+352    	; 0x4bec <vfprintf+0x392>
    4a8c:	2f 2f       	mov	r18, r31
    4a8e:	20 61       	ori	r18, 0x10	; 16
    4a90:	b2 2e       	mov	r11, r18
    4a92:	b4 fe       	sbrs	r11, 4
    4a94:	0d c0       	rjmp	.+26     	; 0x4ab0 <vfprintf+0x256>
    4a96:	8b 2d       	mov	r24, r11
    4a98:	84 60       	ori	r24, 0x04	; 4
    4a9a:	b8 2e       	mov	r11, r24
    4a9c:	09 c0       	rjmp	.+18     	; 0x4ab0 <vfprintf+0x256>
    4a9e:	24 ff       	sbrs	r18, 4
    4aa0:	0a c0       	rjmp	.+20     	; 0x4ab6 <vfprintf+0x25c>
    4aa2:	9f 2f       	mov	r25, r31
    4aa4:	96 60       	ori	r25, 0x06	; 6
    4aa6:	b9 2e       	mov	r11, r25
    4aa8:	06 c0       	rjmp	.+12     	; 0x4ab6 <vfprintf+0x25c>
    4aaa:	28 e0       	ldi	r18, 0x08	; 8
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	05 c0       	rjmp	.+10     	; 0x4aba <vfprintf+0x260>
    4ab0:	20 e1       	ldi	r18, 0x10	; 16
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	02 c0       	rjmp	.+4      	; 0x4aba <vfprintf+0x260>
    4ab6:	20 e1       	ldi	r18, 0x10	; 16
    4ab8:	32 e0       	ldi	r19, 0x02	; 2
    4aba:	f8 01       	movw	r30, r16
    4abc:	b7 fe       	sbrs	r11, 7
    4abe:	07 c0       	rjmp	.+14     	; 0x4ace <vfprintf+0x274>
    4ac0:	60 81       	ld	r22, Z
    4ac2:	71 81       	ldd	r23, Z+1	; 0x01
    4ac4:	82 81       	ldd	r24, Z+2	; 0x02
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	0c 5f       	subi	r16, 0xFC	; 252
    4aca:	1f 4f       	sbci	r17, 0xFF	; 255
    4acc:	06 c0       	rjmp	.+12     	; 0x4ada <vfprintf+0x280>
    4ace:	60 81       	ld	r22, Z
    4ad0:	71 81       	ldd	r23, Z+1	; 0x01
    4ad2:	80 e0       	ldi	r24, 0x00	; 0
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 5f       	subi	r16, 0xFE	; 254
    4ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    4ada:	a4 01       	movw	r20, r8
    4adc:	0e 94 56 26 	call	0x4cac	; 0x4cac <__ultoa_invert>
    4ae0:	a8 2e       	mov	r10, r24
    4ae2:	a8 18       	sub	r10, r8
    4ae4:	fb 2d       	mov	r31, r11
    4ae6:	ff 77       	andi	r31, 0x7F	; 127
    4ae8:	7f 2e       	mov	r7, r31
    4aea:	76 fe       	sbrs	r7, 6
    4aec:	0b c0       	rjmp	.+22     	; 0x4b04 <vfprintf+0x2aa>
    4aee:	37 2d       	mov	r19, r7
    4af0:	3e 7f       	andi	r19, 0xFE	; 254
    4af2:	a5 14       	cp	r10, r5
    4af4:	50 f4       	brcc	.+20     	; 0x4b0a <vfprintf+0x2b0>
    4af6:	74 fe       	sbrs	r7, 4
    4af8:	0a c0       	rjmp	.+20     	; 0x4b0e <vfprintf+0x2b4>
    4afa:	72 fc       	sbrc	r7, 2
    4afc:	08 c0       	rjmp	.+16     	; 0x4b0e <vfprintf+0x2b4>
    4afe:	37 2d       	mov	r19, r7
    4b00:	3e 7e       	andi	r19, 0xEE	; 238
    4b02:	05 c0       	rjmp	.+10     	; 0x4b0e <vfprintf+0x2b4>
    4b04:	ba 2c       	mov	r11, r10
    4b06:	37 2d       	mov	r19, r7
    4b08:	03 c0       	rjmp	.+6      	; 0x4b10 <vfprintf+0x2b6>
    4b0a:	ba 2c       	mov	r11, r10
    4b0c:	01 c0       	rjmp	.+2      	; 0x4b10 <vfprintf+0x2b6>
    4b0e:	b5 2c       	mov	r11, r5
    4b10:	34 ff       	sbrs	r19, 4
    4b12:	0d c0       	rjmp	.+26     	; 0x4b2e <vfprintf+0x2d4>
    4b14:	fe 01       	movw	r30, r28
    4b16:	ea 0d       	add	r30, r10
    4b18:	f1 1d       	adc	r31, r1
    4b1a:	80 81       	ld	r24, Z
    4b1c:	80 33       	cpi	r24, 0x30	; 48
    4b1e:	11 f4       	brne	.+4      	; 0x4b24 <vfprintf+0x2ca>
    4b20:	39 7e       	andi	r19, 0xE9	; 233
    4b22:	09 c0       	rjmp	.+18     	; 0x4b36 <vfprintf+0x2dc>
    4b24:	32 ff       	sbrs	r19, 2
    4b26:	06 c0       	rjmp	.+12     	; 0x4b34 <vfprintf+0x2da>
    4b28:	b3 94       	inc	r11
    4b2a:	b3 94       	inc	r11
    4b2c:	04 c0       	rjmp	.+8      	; 0x4b36 <vfprintf+0x2dc>
    4b2e:	83 2f       	mov	r24, r19
    4b30:	86 78       	andi	r24, 0x86	; 134
    4b32:	09 f0       	breq	.+2      	; 0x4b36 <vfprintf+0x2dc>
    4b34:	b3 94       	inc	r11
    4b36:	33 fd       	sbrc	r19, 3
    4b38:	13 c0       	rjmp	.+38     	; 0x4b60 <vfprintf+0x306>
    4b3a:	30 ff       	sbrs	r19, 0
    4b3c:	06 c0       	rjmp	.+12     	; 0x4b4a <vfprintf+0x2f0>
    4b3e:	b3 14       	cp	r11, r3
    4b40:	98 f4       	brcc	.+38     	; 0x4b68 <vfprintf+0x30e>
    4b42:	3a 0c       	add	r3, r10
    4b44:	53 2c       	mov	r5, r3
    4b46:	5b 18       	sub	r5, r11
    4b48:	10 c0       	rjmp	.+32     	; 0x4b6a <vfprintf+0x310>
    4b4a:	b3 14       	cp	r11, r3
    4b4c:	70 f4       	brcc	.+28     	; 0x4b6a <vfprintf+0x310>
    4b4e:	b6 01       	movw	r22, r12
    4b50:	80 e2       	ldi	r24, 0x20	; 32
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	3c 87       	std	Y+12, r19	; 0x0c
    4b56:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    4b5a:	b3 94       	inc	r11
    4b5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b5e:	f5 cf       	rjmp	.-22     	; 0x4b4a <vfprintf+0x2f0>
    4b60:	b3 14       	cp	r11, r3
    4b62:	18 f4       	brcc	.+6      	; 0x4b6a <vfprintf+0x310>
    4b64:	3b 18       	sub	r3, r11
    4b66:	02 c0       	rjmp	.+4      	; 0x4b6c <vfprintf+0x312>
    4b68:	5a 2c       	mov	r5, r10
    4b6a:	31 2c       	mov	r3, r1
    4b6c:	34 ff       	sbrs	r19, 4
    4b6e:	12 c0       	rjmp	.+36     	; 0x4b94 <vfprintf+0x33a>
    4b70:	b6 01       	movw	r22, r12
    4b72:	80 e3       	ldi	r24, 0x30	; 48
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	3c 87       	std	Y+12, r19	; 0x0c
    4b78:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    4b7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b7e:	32 ff       	sbrs	r19, 2
    4b80:	17 c0       	rjmp	.+46     	; 0x4bb0 <vfprintf+0x356>
    4b82:	31 fd       	sbrc	r19, 1
    4b84:	03 c0       	rjmp	.+6      	; 0x4b8c <vfprintf+0x332>
    4b86:	88 e7       	ldi	r24, 0x78	; 120
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	02 c0       	rjmp	.+4      	; 0x4b90 <vfprintf+0x336>
    4b8c:	88 e5       	ldi	r24, 0x58	; 88
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	b6 01       	movw	r22, r12
    4b92:	0c c0       	rjmp	.+24     	; 0x4bac <vfprintf+0x352>
    4b94:	83 2f       	mov	r24, r19
    4b96:	86 78       	andi	r24, 0x86	; 134
    4b98:	59 f0       	breq	.+22     	; 0x4bb0 <vfprintf+0x356>
    4b9a:	31 ff       	sbrs	r19, 1
    4b9c:	02 c0       	rjmp	.+4      	; 0x4ba2 <vfprintf+0x348>
    4b9e:	8b e2       	ldi	r24, 0x2B	; 43
    4ba0:	01 c0       	rjmp	.+2      	; 0x4ba4 <vfprintf+0x34a>
    4ba2:	80 e2       	ldi	r24, 0x20	; 32
    4ba4:	37 fd       	sbrc	r19, 7
    4ba6:	8d e2       	ldi	r24, 0x2D	; 45
    4ba8:	b6 01       	movw	r22, r12
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    4bb0:	a5 14       	cp	r10, r5
    4bb2:	38 f4       	brcc	.+14     	; 0x4bc2 <vfprintf+0x368>
    4bb4:	b6 01       	movw	r22, r12
    4bb6:	80 e3       	ldi	r24, 0x30	; 48
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    4bbe:	5a 94       	dec	r5
    4bc0:	f7 cf       	rjmp	.-18     	; 0x4bb0 <vfprintf+0x356>
    4bc2:	aa 94       	dec	r10
    4bc4:	f4 01       	movw	r30, r8
    4bc6:	ea 0d       	add	r30, r10
    4bc8:	f1 1d       	adc	r31, r1
    4bca:	80 81       	ld	r24, Z
    4bcc:	b6 01       	movw	r22, r12
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    4bd4:	a1 10       	cpse	r10, r1
    4bd6:	f5 cf       	rjmp	.-22     	; 0x4bc2 <vfprintf+0x368>
    4bd8:	33 20       	and	r3, r3
    4bda:	09 f4       	brne	.+2      	; 0x4bde <vfprintf+0x384>
    4bdc:	50 ce       	rjmp	.-864    	; 0x487e <vfprintf+0x24>
    4bde:	b6 01       	movw	r22, r12
    4be0:	80 e2       	ldi	r24, 0x20	; 32
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <fputc>
    4be8:	3a 94       	dec	r3
    4bea:	f6 cf       	rjmp	.-20     	; 0x4bd8 <vfprintf+0x37e>
    4bec:	f6 01       	movw	r30, r12
    4bee:	86 81       	ldd	r24, Z+6	; 0x06
    4bf0:	97 81       	ldd	r25, Z+7	; 0x07
    4bf2:	02 c0       	rjmp	.+4      	; 0x4bf8 <vfprintf+0x39e>
    4bf4:	8f ef       	ldi	r24, 0xFF	; 255
    4bf6:	9f ef       	ldi	r25, 0xFF	; 255
    4bf8:	2c 96       	adiw	r28, 0x0c	; 12
    4bfa:	e2 e1       	ldi	r30, 0x12	; 18
    4bfc:	0c 94 d0 26 	jmp	0x4da0	; 0x4da0 <__epilogue_restores__>

00004c00 <strnlen_P>:
    4c00:	fc 01       	movw	r30, r24
    4c02:	05 90       	lpm	r0, Z+
    4c04:	61 50       	subi	r22, 0x01	; 1
    4c06:	70 40       	sbci	r23, 0x00	; 0
    4c08:	01 10       	cpse	r0, r1
    4c0a:	d8 f7       	brcc	.-10     	; 0x4c02 <strnlen_P+0x2>
    4c0c:	80 95       	com	r24
    4c0e:	90 95       	com	r25
    4c10:	8e 0f       	add	r24, r30
    4c12:	9f 1f       	adc	r25, r31
    4c14:	08 95       	ret

00004c16 <strnlen>:
    4c16:	fc 01       	movw	r30, r24
    4c18:	61 50       	subi	r22, 0x01	; 1
    4c1a:	70 40       	sbci	r23, 0x00	; 0
    4c1c:	01 90       	ld	r0, Z+
    4c1e:	01 10       	cpse	r0, r1
    4c20:	d8 f7       	brcc	.-10     	; 0x4c18 <strnlen+0x2>
    4c22:	80 95       	com	r24
    4c24:	90 95       	com	r25
    4c26:	8e 0f       	add	r24, r30
    4c28:	9f 1f       	adc	r25, r31
    4c2a:	08 95       	ret

00004c2c <strrev>:
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	fc 01       	movw	r30, r24
    4c30:	67 2f       	mov	r22, r23
    4c32:	71 91       	ld	r23, Z+
    4c34:	77 23       	and	r23, r23
    4c36:	e1 f7       	brne	.-8      	; 0x4c30 <strrev+0x4>
    4c38:	32 97       	sbiw	r30, 0x02	; 2
    4c3a:	04 c0       	rjmp	.+8      	; 0x4c44 <strrev+0x18>
    4c3c:	7c 91       	ld	r23, X
    4c3e:	6d 93       	st	X+, r22
    4c40:	70 83       	st	Z, r23
    4c42:	62 91       	ld	r22, -Z
    4c44:	ae 17       	cp	r26, r30
    4c46:	bf 07       	cpc	r27, r31
    4c48:	c8 f3       	brcs	.-14     	; 0x4c3c <strrev+0x10>
    4c4a:	08 95       	ret

00004c4c <fputc>:
    4c4c:	0f 93       	push	r16
    4c4e:	1f 93       	push	r17
    4c50:	cf 93       	push	r28
    4c52:	df 93       	push	r29
    4c54:	18 2f       	mov	r17, r24
    4c56:	09 2f       	mov	r16, r25
    4c58:	eb 01       	movw	r28, r22
    4c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5c:	81 fd       	sbrc	r24, 1
    4c5e:	03 c0       	rjmp	.+6      	; 0x4c66 <fputc+0x1a>
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
    4c62:	9f ef       	ldi	r25, 0xFF	; 255
    4c64:	1e c0       	rjmp	.+60     	; 0x4ca2 <fputc+0x56>
    4c66:	82 ff       	sbrs	r24, 2
    4c68:	0f c0       	rjmp	.+30     	; 0x4c88 <fputc+0x3c>
    4c6a:	2e 81       	ldd	r18, Y+6	; 0x06
    4c6c:	3f 81       	ldd	r19, Y+7	; 0x07
    4c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c70:	9d 81       	ldd	r25, Y+5	; 0x05
    4c72:	28 17       	cp	r18, r24
    4c74:	39 07       	cpc	r19, r25
    4c76:	74 f4       	brge	.+28     	; 0x4c94 <fputc+0x48>
    4c78:	e8 81       	ld	r30, Y
    4c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    4c7c:	cf 01       	movw	r24, r30
    4c7e:	01 96       	adiw	r24, 0x01	; 1
    4c80:	99 83       	std	Y+1, r25	; 0x01
    4c82:	88 83       	st	Y, r24
    4c84:	10 83       	st	Z, r17
    4c86:	06 c0       	rjmp	.+12     	; 0x4c94 <fputc+0x48>
    4c88:	e8 85       	ldd	r30, Y+8	; 0x08
    4c8a:	f9 85       	ldd	r31, Y+9	; 0x09
    4c8c:	81 2f       	mov	r24, r17
    4c8e:	09 95       	icall
    4c90:	89 2b       	or	r24, r25
    4c92:	31 f7       	brne	.-52     	; 0x4c60 <fputc+0x14>
    4c94:	8e 81       	ldd	r24, Y+6	; 0x06
    4c96:	9f 81       	ldd	r25, Y+7	; 0x07
    4c98:	01 96       	adiw	r24, 0x01	; 1
    4c9a:	9f 83       	std	Y+7, r25	; 0x07
    4c9c:	8e 83       	std	Y+6, r24	; 0x06
    4c9e:	81 2f       	mov	r24, r17
    4ca0:	90 2f       	mov	r25, r16
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	1f 91       	pop	r17
    4ca8:	0f 91       	pop	r16
    4caa:	08 95       	ret

00004cac <__ultoa_invert>:
    4cac:	fa 01       	movw	r30, r20
    4cae:	aa 27       	eor	r26, r26
    4cb0:	28 30       	cpi	r18, 0x08	; 8
    4cb2:	51 f1       	breq	.+84     	; 0x4d08 <__ultoa_invert+0x5c>
    4cb4:	20 31       	cpi	r18, 0x10	; 16
    4cb6:	81 f1       	breq	.+96     	; 0x4d18 <__ultoa_invert+0x6c>
    4cb8:	e8 94       	clt
    4cba:	6f 93       	push	r22
    4cbc:	6e 7f       	andi	r22, 0xFE	; 254
    4cbe:	6e 5f       	subi	r22, 0xFE	; 254
    4cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    4cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc6:	af 4f       	sbci	r26, 0xFF	; 255
    4cc8:	b1 e0       	ldi	r27, 0x01	; 1
    4cca:	3e d0       	rcall	.+124    	; 0x4d48 <__ultoa_invert+0x9c>
    4ccc:	b4 e0       	ldi	r27, 0x04	; 4
    4cce:	3c d0       	rcall	.+120    	; 0x4d48 <__ultoa_invert+0x9c>
    4cd0:	67 0f       	add	r22, r23
    4cd2:	78 1f       	adc	r23, r24
    4cd4:	89 1f       	adc	r24, r25
    4cd6:	9a 1f       	adc	r25, r26
    4cd8:	a1 1d       	adc	r26, r1
    4cda:	68 0f       	add	r22, r24
    4cdc:	79 1f       	adc	r23, r25
    4cde:	8a 1f       	adc	r24, r26
    4ce0:	91 1d       	adc	r25, r1
    4ce2:	a1 1d       	adc	r26, r1
    4ce4:	6a 0f       	add	r22, r26
    4ce6:	71 1d       	adc	r23, r1
    4ce8:	81 1d       	adc	r24, r1
    4cea:	91 1d       	adc	r25, r1
    4cec:	a1 1d       	adc	r26, r1
    4cee:	20 d0       	rcall	.+64     	; 0x4d30 <__ultoa_invert+0x84>
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <__ultoa_invert+0x48>
    4cf2:	68 94       	set
    4cf4:	3f 91       	pop	r19
    4cf6:	2a e0       	ldi	r18, 0x0A	; 10
    4cf8:	26 9f       	mul	r18, r22
    4cfa:	11 24       	eor	r1, r1
    4cfc:	30 19       	sub	r19, r0
    4cfe:	30 5d       	subi	r19, 0xD0	; 208
    4d00:	31 93       	st	Z+, r19
    4d02:	de f6       	brtc	.-74     	; 0x4cba <__ultoa_invert+0xe>
    4d04:	cf 01       	movw	r24, r30
    4d06:	08 95       	ret
    4d08:	46 2f       	mov	r20, r22
    4d0a:	47 70       	andi	r20, 0x07	; 7
    4d0c:	40 5d       	subi	r20, 0xD0	; 208
    4d0e:	41 93       	st	Z+, r20
    4d10:	b3 e0       	ldi	r27, 0x03	; 3
    4d12:	0f d0       	rcall	.+30     	; 0x4d32 <__ultoa_invert+0x86>
    4d14:	c9 f7       	brne	.-14     	; 0x4d08 <__ultoa_invert+0x5c>
    4d16:	f6 cf       	rjmp	.-20     	; 0x4d04 <__ultoa_invert+0x58>
    4d18:	46 2f       	mov	r20, r22
    4d1a:	4f 70       	andi	r20, 0x0F	; 15
    4d1c:	40 5d       	subi	r20, 0xD0	; 208
    4d1e:	4a 33       	cpi	r20, 0x3A	; 58
    4d20:	18 f0       	brcs	.+6      	; 0x4d28 <__ultoa_invert+0x7c>
    4d22:	49 5d       	subi	r20, 0xD9	; 217
    4d24:	31 fd       	sbrc	r19, 1
    4d26:	40 52       	subi	r20, 0x20	; 32
    4d28:	41 93       	st	Z+, r20
    4d2a:	02 d0       	rcall	.+4      	; 0x4d30 <__ultoa_invert+0x84>
    4d2c:	a9 f7       	brne	.-22     	; 0x4d18 <__ultoa_invert+0x6c>
    4d2e:	ea cf       	rjmp	.-44     	; 0x4d04 <__ultoa_invert+0x58>
    4d30:	b4 e0       	ldi	r27, 0x04	; 4
    4d32:	a6 95       	lsr	r26
    4d34:	97 95       	ror	r25
    4d36:	87 95       	ror	r24
    4d38:	77 95       	ror	r23
    4d3a:	67 95       	ror	r22
    4d3c:	ba 95       	dec	r27
    4d3e:	c9 f7       	brne	.-14     	; 0x4d32 <__ultoa_invert+0x86>
    4d40:	00 97       	sbiw	r24, 0x00	; 0
    4d42:	61 05       	cpc	r22, r1
    4d44:	71 05       	cpc	r23, r1
    4d46:	08 95       	ret
    4d48:	9b 01       	movw	r18, r22
    4d4a:	ac 01       	movw	r20, r24
    4d4c:	0a 2e       	mov	r0, r26
    4d4e:	06 94       	lsr	r0
    4d50:	57 95       	ror	r21
    4d52:	47 95       	ror	r20
    4d54:	37 95       	ror	r19
    4d56:	27 95       	ror	r18
    4d58:	ba 95       	dec	r27
    4d5a:	c9 f7       	brne	.-14     	; 0x4d4e <__ultoa_invert+0xa2>
    4d5c:	62 0f       	add	r22, r18
    4d5e:	73 1f       	adc	r23, r19
    4d60:	84 1f       	adc	r24, r20
    4d62:	95 1f       	adc	r25, r21
    4d64:	a0 1d       	adc	r26, r0
    4d66:	08 95       	ret

00004d68 <__prologue_saves__>:
    4d68:	2f 92       	push	r2
    4d6a:	3f 92       	push	r3
    4d6c:	4f 92       	push	r4
    4d6e:	5f 92       	push	r5
    4d70:	6f 92       	push	r6
    4d72:	7f 92       	push	r7
    4d74:	8f 92       	push	r8
    4d76:	9f 92       	push	r9
    4d78:	af 92       	push	r10
    4d7a:	bf 92       	push	r11
    4d7c:	cf 92       	push	r12
    4d7e:	df 92       	push	r13
    4d80:	ef 92       	push	r14
    4d82:	ff 92       	push	r15
    4d84:	0f 93       	push	r16
    4d86:	1f 93       	push	r17
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
    4d90:	ca 1b       	sub	r28, r26
    4d92:	db 0b       	sbc	r29, r27
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	cd bf       	out	0x3d, r28	; 61
    4d9e:	09 94       	ijmp

00004da0 <__epilogue_restores__>:
    4da0:	2a 88       	ldd	r2, Y+18	; 0x12
    4da2:	39 88       	ldd	r3, Y+17	; 0x11
    4da4:	48 88       	ldd	r4, Y+16	; 0x10
    4da6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4da8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4daa:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dac:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dae:	9b 84       	ldd	r9, Y+11	; 0x0b
    4db0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4db2:	b9 84       	ldd	r11, Y+9	; 0x09
    4db4:	c8 84       	ldd	r12, Y+8	; 0x08
    4db6:	df 80       	ldd	r13, Y+7	; 0x07
    4db8:	ee 80       	ldd	r14, Y+6	; 0x06
    4dba:	fd 80       	ldd	r15, Y+5	; 0x05
    4dbc:	0c 81       	ldd	r16, Y+4	; 0x04
    4dbe:	1b 81       	ldd	r17, Y+3	; 0x03
    4dc0:	aa 81       	ldd	r26, Y+2	; 0x02
    4dc2:	b9 81       	ldd	r27, Y+1	; 0x01
    4dc4:	ce 0f       	add	r28, r30
    4dc6:	d1 1d       	adc	r29, r1
    4dc8:	0f b6       	in	r0, 0x3f	; 63
    4dca:	f8 94       	cli
    4dcc:	de bf       	out	0x3e, r29	; 62
    4dce:	0f be       	out	0x3f, r0	; 63
    4dd0:	cd bf       	out	0x3d, r28	; 61
    4dd2:	ed 01       	movw	r28, r26
    4dd4:	08 95       	ret

00004dd6 <_exit>:
    4dd6:	f8 94       	cli

00004dd8 <__stop_program>:
    4dd8:	ff cf       	rjmp	.-2      	; 0x4dd8 <__stop_program>
