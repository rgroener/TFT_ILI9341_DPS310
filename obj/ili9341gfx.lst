   1               		.file	"ili9341gfx.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	backuplocationvset
  12               	backuplocationvset:
  13               	.LFB9:
  14               		.file 1 "ili9341gfx.c"
   1:ili9341gfx.c  **** #include "ili9341.h"
   2:ili9341gfx.c  **** #include "ili9341gfx.h"
   3:ili9341gfx.c  **** 
   4:ili9341gfx.c  **** volatile uint16_t cursor_x;
   5:ili9341gfx.c  **** volatile uint16_t cursor_y;
   6:ili9341gfx.c  **** volatile uint16_t textcolour;
   7:ili9341gfx.c  **** volatile uint16_t textbgcolour;
   8:ili9341gfx.c  **** volatile uint8_t textsize;
   9:ili9341gfx.c  **** uint16_t vsetx,vsety,vactualx,vactualy,isetx,isety,iactualx,iactualy;
  10:ili9341gfx.c  **** 
  11:ili9341gfx.c  **** static FILE mydata = FDEV_SETUP_STREAM(ili9341_putchar_printf, NULL, _FDEV_SETUP_WRITE);//mydata de
  12:ili9341gfx.c  ****  
  13:ili9341gfx.c  **** int16_t ili9341_putchar_printf(char var, FILE *stream)//this function will be called whenever print
  14:ili9341gfx.c  **** {
  15:ili9341gfx.c  **** 	ili9341_write(var);
  16:ili9341gfx.c  **** 	return 1;
  17:ili9341gfx.c  **** }
  18:ili9341gfx.c  **** 
  19:ili9341gfx.c  **** 
  20:ili9341gfx.c  **** 
  21:ili9341gfx.c  **** 
  22:ili9341gfx.c  **** void backuplocationvset(void)//backing up vset data start location to print next vset data in exact
  23:ili9341gfx.c  **** {
  15               		.loc 1 23 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  24:ili9341gfx.c  **** vsetx=cursor_x;
  21               		.loc 1 24 0
  22 0000 8091 0000 		lds r24,cursor_x
  23 0004 9091 0000 		lds r25,cursor_x+1
  24 0008 9093 0000 		sts vsetx+1,r25
  25 000c 8093 0000 		sts vsetx,r24
  25:ili9341gfx.c  **** vsety=cursor_y;
  26               		.loc 1 25 0
  27 0010 8091 0000 		lds r24,cursor_y
  28 0014 9091 0000 		lds r25,cursor_y+1
  29 0018 9093 0000 		sts vsety+1,r25
  30 001c 8093 0000 		sts vsety,r24
  31               	/* epilogue start */
  26:ili9341gfx.c  **** }
  32               		.loc 1 26 0
  33 0020 0895      		ret
  34               		.cfi_endproc
  35               	.LFE9:
  37               	.global	backuplocationvactual
  39               	backuplocationvactual:
  40               	.LFB10:
  27:ili9341gfx.c  **** 
  28:ili9341gfx.c  **** 
  29:ili9341gfx.c  **** void backuplocationvactual(void)//backing up vactual data start location to print next vactual data
  30:ili9341gfx.c  **** {
  41               		.loc 1 30 0
  42               		.cfi_startproc
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 0 */
  46               	.L__stack_usage = 0
  31:ili9341gfx.c  **** vactualx=cursor_x;
  47               		.loc 1 31 0
  48 0022 8091 0000 		lds r24,cursor_x
  49 0026 9091 0000 		lds r25,cursor_x+1
  50 002a 9093 0000 		sts vactualx+1,r25
  51 002e 8093 0000 		sts vactualx,r24
  32:ili9341gfx.c  **** vactualy=cursor_y;
  52               		.loc 1 32 0
  53 0032 8091 0000 		lds r24,cursor_y
  54 0036 9091 0000 		lds r25,cursor_y+1
  55 003a 9093 0000 		sts vactualy+1,r25
  56 003e 8093 0000 		sts vactualy,r24
  57               	/* epilogue start */
  33:ili9341gfx.c  **** }
  58               		.loc 1 33 0
  59 0042 0895      		ret
  60               		.cfi_endproc
  61               	.LFE10:
  63               	.global	backuplocationiset
  65               	backuplocationiset:
  66               	.LFB11:
  34:ili9341gfx.c  **** 
  35:ili9341gfx.c  **** void backuplocationiset(void)//backing up iset data start location to print next iset data in exact
  36:ili9341gfx.c  **** {
  67               		.loc 1 36 0
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  37:ili9341gfx.c  **** isetx=cursor_x;
  73               		.loc 1 37 0
  74 0044 8091 0000 		lds r24,cursor_x
  75 0048 9091 0000 		lds r25,cursor_x+1
  76 004c 9093 0000 		sts isetx+1,r25
  77 0050 8093 0000 		sts isetx,r24
  38:ili9341gfx.c  **** isety=cursor_y;
  78               		.loc 1 38 0
  79 0054 8091 0000 		lds r24,cursor_y
  80 0058 9091 0000 		lds r25,cursor_y+1
  81 005c 9093 0000 		sts isety+1,r25
  82 0060 8093 0000 		sts isety,r24
  83               	/* epilogue start */
  39:ili9341gfx.c  **** }
  84               		.loc 1 39 0
  85 0064 0895      		ret
  86               		.cfi_endproc
  87               	.LFE11:
  89               	.global	backuplocationiactual
  91               	backuplocationiactual:
  92               	.LFB12:
  40:ili9341gfx.c  **** 
  41:ili9341gfx.c  **** 
  42:ili9341gfx.c  **** void backuplocationiactual(void)//backing up iactual data start location to print next iactual data
  43:ili9341gfx.c  **** {
  93               		.loc 1 43 0
  94               		.cfi_startproc
  95               	/* prologue: function */
  96               	/* frame size = 0 */
  97               	/* stack size = 0 */
  98               	.L__stack_usage = 0
  44:ili9341gfx.c  **** iactualx=cursor_x;
  99               		.loc 1 44 0
 100 0066 8091 0000 		lds r24,cursor_x
 101 006a 9091 0000 		lds r25,cursor_x+1
 102 006e 9093 0000 		sts iactualx+1,r25
 103 0072 8093 0000 		sts iactualx,r24
  45:ili9341gfx.c  **** iactualy=cursor_y;
 104               		.loc 1 45 0
 105 0076 8091 0000 		lds r24,cursor_y
 106 007a 9091 0000 		lds r25,cursor_y+1
 107 007e 9093 0000 		sts iactualy+1,r25
 108 0082 8093 0000 		sts iactualy,r24
 109               	/* epilogue start */
  46:ili9341gfx.c  **** }
 110               		.loc 1 46 0
 111 0086 0895      		ret
 112               		.cfi_endproc
 113               	.LFE12:
 115               	.global	ili9341_drawchar
 117               	ili9341_drawchar:
 118               	.LFB13:
  47:ili9341gfx.c  **** 
  48:ili9341gfx.c  ****  
  49:ili9341gfx.c  **** //array for font
  50:ili9341gfx.c  **** static const unsigned char font[] PROGMEM = {
  51:ili9341gfx.c  ****         0x00, 0x00, 0x00, 0x00, 0x00,   
  52:ili9341gfx.c  **** 	0x3E, 0x5B, 0x4F, 0x5B, 0x3E, 	
  53:ili9341gfx.c  **** 	0x3E, 0x6B, 0x4F, 0x6B, 0x3E, 	
  54:ili9341gfx.c  **** 	0x1C, 0x3E, 0x7C, 0x3E, 0x1C, 
  55:ili9341gfx.c  **** 	0x18, 0x3C, 0x7E, 0x3C, 0x18, 
  56:ili9341gfx.c  **** 	0x1C, 0x57, 0x7D, 0x57, 0x1C, 
  57:ili9341gfx.c  **** 	0x1C, 0x5E, 0x7F, 0x5E, 0x1C, 
  58:ili9341gfx.c  **** 	0x00, 0x18, 0x3C, 0x18, 0x00, 
  59:ili9341gfx.c  **** 	0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 
  60:ili9341gfx.c  **** 	0x00, 0x18, 0x24, 0x18, 0x00, 
  61:ili9341gfx.c  **** 	0xFF, 0xE7, 0xDB, 0xE7, 0xFF, 
  62:ili9341gfx.c  **** 	0x30, 0x48, 0x3A, 0x06, 0x0E, 
  63:ili9341gfx.c  **** 	0x26, 0x29, 0x79, 0x29, 0x26, 
  64:ili9341gfx.c  **** 	0x40, 0x7F, 0x05, 0x05, 0x07, 
  65:ili9341gfx.c  **** 	0x40, 0x7F, 0x05, 0x25, 0x3F, 
  66:ili9341gfx.c  **** 	0x5A, 0x3C, 0xE7, 0x3C, 0x5A, 
  67:ili9341gfx.c  **** 	0x7F, 0x3E, 0x1C, 0x1C, 0x08, 
  68:ili9341gfx.c  **** 	0x08, 0x1C, 0x1C, 0x3E, 0x7F, 
  69:ili9341gfx.c  **** 	0x14, 0x22, 0x7F, 0x22, 0x14, 
  70:ili9341gfx.c  **** 	0x5F, 0x5F, 0x00, 0x5F, 0x5F, 
  71:ili9341gfx.c  **** 	0x06, 0x09, 0x7F, 0x01, 0x7F, 
  72:ili9341gfx.c  **** 	0x00, 0x66, 0x89, 0x95, 0x6A, 
  73:ili9341gfx.c  **** 	0x60, 0x60, 0x60, 0x60, 0x60, 
  74:ili9341gfx.c  **** 	0x94, 0xA2, 0xFF, 0xA2, 0x94, 
  75:ili9341gfx.c  **** 	0x08, 0x04, 0x7E, 0x04, 0x08, 
  76:ili9341gfx.c  **** 	0x10, 0x20, 0x7E, 0x20, 0x10, 
  77:ili9341gfx.c  **** 	0x08, 0x08, 0x2A, 0x1C, 0x08, 
  78:ili9341gfx.c  **** 	0x08, 0x1C, 0x2A, 0x08, 0x08, 
  79:ili9341gfx.c  **** 	0x1E, 0x10, 0x10, 0x10, 0x10, 
  80:ili9341gfx.c  **** 	0x0C, 0x1E, 0x0C, 0x1E, 0x0C, 
  81:ili9341gfx.c  **** 	0x30, 0x38, 0x3E, 0x38, 0x30, 
  82:ili9341gfx.c  **** 	0x06, 0x0E, 0x3E, 0x0E, 0x06, 
  83:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0x00, 0x00, 
  84:ili9341gfx.c  **** 	0x00, 0x00, 0x5F, 0x00, 0x00, 
  85:ili9341gfx.c  **** 	0x00, 0x07, 0x00, 0x07, 0x00, 
  86:ili9341gfx.c  **** 	0x14, 0x7F, 0x14, 0x7F, 0x14, 
  87:ili9341gfx.c  **** 	0x24, 0x2A, 0x7F, 0x2A, 0x12, 
  88:ili9341gfx.c  **** 	0x23, 0x13, 0x08, 0x64, 0x62, 
  89:ili9341gfx.c  **** 	0x36, 0x49, 0x56, 0x20, 0x50, 
  90:ili9341gfx.c  **** 	0x00, 0x08, 0x07, 0x03, 0x00, 
  91:ili9341gfx.c  **** 	0x00, 0x1C, 0x22, 0x41, 0x00, 
  92:ili9341gfx.c  **** 	0x00, 0x41, 0x22, 0x1C, 0x00, 
  93:ili9341gfx.c  **** 	0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
  94:ili9341gfx.c  **** 	0x08, 0x08, 0x3E, 0x08, 0x08, 
  95:ili9341gfx.c  **** 	0x00, 0x80, 0x70, 0x30, 0x00, 
  96:ili9341gfx.c  **** 	0x08, 0x08, 0x08, 0x08, 0x08, 
  97:ili9341gfx.c  **** 	0x00, 0x00, 0x60, 0x60, 0x00, 
  98:ili9341gfx.c  **** 	0x20, 0x10, 0x08, 0x04, 0x02, 
  99:ili9341gfx.c  **** 	0x3E, 0x51, 0x49, 0x45, 0x3E, 
 100:ili9341gfx.c  **** 	0x00, 0x42, 0x7F, 0x40, 0x00, 
 101:ili9341gfx.c  **** 	0x72, 0x49, 0x49, 0x49, 0x46, 
 102:ili9341gfx.c  **** 	0x21, 0x41, 0x49, 0x4D, 0x33, 
 103:ili9341gfx.c  **** 	0x18, 0x14, 0x12, 0x7F, 0x10, 
 104:ili9341gfx.c  **** 	0x27, 0x45, 0x45, 0x45, 0x39, 
 105:ili9341gfx.c  **** 	0x3C, 0x4A, 0x49, 0x49, 0x31, 
 106:ili9341gfx.c  **** 	0x41, 0x21, 0x11, 0x09, 0x07, 
 107:ili9341gfx.c  **** 	0x36, 0x49, 0x49, 0x49, 0x36, 
 108:ili9341gfx.c  **** 	0x46, 0x49, 0x49, 0x29, 0x1E, 
 109:ili9341gfx.c  **** 	0x00, 0x00, 0x14, 0x00, 0x00, 
 110:ili9341gfx.c  **** 	0x00, 0x40, 0x34, 0x00, 0x00, 
 111:ili9341gfx.c  **** 	0x00, 0x08, 0x14, 0x22, 0x41, 
 112:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0x14, 0x14, 
 113:ili9341gfx.c  **** 	0x00, 0x41, 0x22, 0x14, 0x08, 
 114:ili9341gfx.c  **** 	0x02, 0x01, 0x59, 0x09, 0x06, 
 115:ili9341gfx.c  **** 	0x3E, 0x41, 0x5D, 0x59, 0x4E, 
 116:ili9341gfx.c  **** 	0x7C, 0x12, 0x11, 0x12, 0x7C, 
 117:ili9341gfx.c  **** 	0x7F, 0x49, 0x49, 0x49, 0x36, 
 118:ili9341gfx.c  **** 	0x3E, 0x41, 0x41, 0x41, 0x22, 
 119:ili9341gfx.c  **** 	0x7F, 0x41, 0x41, 0x41, 0x3E, 
 120:ili9341gfx.c  **** 	0x7F, 0x49, 0x49, 0x49, 0x41, 
 121:ili9341gfx.c  **** 	0x7F, 0x09, 0x09, 0x09, 0x01, 
 122:ili9341gfx.c  **** 	0x3E, 0x41, 0x41, 0x51, 0x73, 
 123:ili9341gfx.c  **** 	0x7F, 0x08, 0x08, 0x08, 0x7F, 
 124:ili9341gfx.c  **** 	0x00, 0x41, 0x7F, 0x41, 0x00, 
 125:ili9341gfx.c  **** 	0x20, 0x40, 0x41, 0x3F, 0x01, 
 126:ili9341gfx.c  **** 	0x7F, 0x08, 0x14, 0x22, 0x41, 
 127:ili9341gfx.c  **** 	0x7F, 0x40, 0x40, 0x40, 0x40, 
 128:ili9341gfx.c  **** 	0x7F, 0x02, 0x1C, 0x02, 0x7F, 
 129:ili9341gfx.c  **** 	0x7F, 0x04, 0x08, 0x10, 0x7F, 
 130:ili9341gfx.c  **** 	0x3E, 0x41, 0x41, 0x41, 0x3E, 
 131:ili9341gfx.c  **** 	0x7F, 0x09, 0x09, 0x09, 0x06, 
 132:ili9341gfx.c  **** 	0x3E, 0x41, 0x51, 0x21, 0x5E, 
 133:ili9341gfx.c  **** 	0x7F, 0x09, 0x19, 0x29, 0x46, 
 134:ili9341gfx.c  **** 	0x26, 0x49, 0x49, 0x49, 0x32, 
 135:ili9341gfx.c  **** 	0x03, 0x01, 0x7F, 0x01, 0x03, 
 136:ili9341gfx.c  **** 	0x3F, 0x40, 0x40, 0x40, 0x3F, 
 137:ili9341gfx.c  **** 	0x1F, 0x20, 0x40, 0x20, 0x1F, 
 138:ili9341gfx.c  **** 	0x3F, 0x40, 0x38, 0x40, 0x3F, 
 139:ili9341gfx.c  **** 	0x63, 0x14, 0x08, 0x14, 0x63, 
 140:ili9341gfx.c  **** 	0x03, 0x04, 0x78, 0x04, 0x03, 
 141:ili9341gfx.c  **** 	0x61, 0x59, 0x49, 0x4D, 0x43, 
 142:ili9341gfx.c  **** 	0x00, 0x7F, 0x41, 0x41, 0x41, 
 143:ili9341gfx.c  **** 	0x02, 0x04, 0x08, 0x10, 0x20, 
 144:ili9341gfx.c  **** 	0x00, 0x41, 0x41, 0x41, 0x7F, 
 145:ili9341gfx.c  **** 	0x04, 0x02, 0x01, 0x02, 0x04, 
 146:ili9341gfx.c  **** 	0x40, 0x40, 0x40, 0x40, 0x40, 
 147:ili9341gfx.c  **** 	0x00, 0x03, 0x07, 0x08, 0x00, 
 148:ili9341gfx.c  **** 	0x20, 0x54, 0x54, 0x78, 0x40, 
 149:ili9341gfx.c  **** 	0x7F, 0x28, 0x44, 0x44, 0x38, 
 150:ili9341gfx.c  **** 	0x38, 0x44, 0x44, 0x44, 0x28, 
 151:ili9341gfx.c  **** 	0x38, 0x44, 0x44, 0x28, 0x7F, 
 152:ili9341gfx.c  **** 	0x38, 0x54, 0x54, 0x54, 0x18, 
 153:ili9341gfx.c  **** 	0x00, 0x08, 0x7E, 0x09, 0x02, 
 154:ili9341gfx.c  **** 	0x18, 0xA4, 0xA4, 0x9C, 0x78, 
 155:ili9341gfx.c  **** 	0x7F, 0x08, 0x04, 0x04, 0x78, 
 156:ili9341gfx.c  **** 	0x00, 0x44, 0x7D, 0x40, 0x00, 
 157:ili9341gfx.c  **** 	0x20, 0x40, 0x40, 0x3D, 0x00, 
 158:ili9341gfx.c  **** 	0x7F, 0x10, 0x28, 0x44, 0x00, 
 159:ili9341gfx.c  **** 	0x00, 0x41, 0x7F, 0x40, 0x00, 
 160:ili9341gfx.c  **** 	0x7C, 0x04, 0x78, 0x04, 0x78, 
 161:ili9341gfx.c  **** 	0x7C, 0x08, 0x04, 0x04, 0x78, 
 162:ili9341gfx.c  **** 	0x38, 0x44, 0x44, 0x44, 0x38, 
 163:ili9341gfx.c  **** 	0xFC, 0x18, 0x24, 0x24, 0x18, 
 164:ili9341gfx.c  **** 	0x18, 0x24, 0x24, 0x18, 0xFC, 
 165:ili9341gfx.c  **** 	0x7C, 0x08, 0x04, 0x04, 0x08, 
 166:ili9341gfx.c  **** 	0x48, 0x54, 0x54, 0x54, 0x24, 
 167:ili9341gfx.c  **** 	0x04, 0x04, 0x3F, 0x44, 0x24, 
 168:ili9341gfx.c  **** 	0x3C, 0x40, 0x40, 0x20, 0x7C, 
 169:ili9341gfx.c  **** 	0x1C, 0x20, 0x40, 0x20, 0x1C, 
 170:ili9341gfx.c  **** 	0x3C, 0x40, 0x30, 0x40, 0x3C, 
 171:ili9341gfx.c  **** 	0x44, 0x28, 0x10, 0x28, 0x44, 
 172:ili9341gfx.c  **** 	0x4C, 0x90, 0x90, 0x90, 0x7C, 
 173:ili9341gfx.c  **** 	0x44, 0x64, 0x54, 0x4C, 0x44, 
 174:ili9341gfx.c  **** 	0x00, 0x08, 0x36, 0x41, 0x00, 
 175:ili9341gfx.c  **** 	0x00, 0x00, 0x77, 0x00, 0x00, 
 176:ili9341gfx.c  **** 	0x00, 0x41, 0x36, 0x08, 0x00, 
 177:ili9341gfx.c  **** 	0x02, 0x01, 0x02, 0x04, 0x02, 
 178:ili9341gfx.c  **** 	0x3C, 0x26, 0x23, 0x26, 0x3C, 
 179:ili9341gfx.c  **** 	0x1E, 0xA1, 0xA1, 0x61, 0x12, 
 180:ili9341gfx.c  **** 	0x3A, 0x40, 0x40, 0x20, 0x7A, 
 181:ili9341gfx.c  **** 	0x38, 0x54, 0x54, 0x55, 0x59, 
 182:ili9341gfx.c  **** 	0x21, 0x55, 0x55, 0x79, 0x41, 
 183:ili9341gfx.c  **** 	0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
 184:ili9341gfx.c  **** 	0x21, 0x55, 0x54, 0x78, 0x40, 
 185:ili9341gfx.c  **** 	0x20, 0x54, 0x55, 0x79, 0x40, 
 186:ili9341gfx.c  **** 	0x0C, 0x1E, 0x52, 0x72, 0x12, 
 187:ili9341gfx.c  **** 	0x39, 0x55, 0x55, 0x55, 0x59, 
 188:ili9341gfx.c  **** 	0x39, 0x54, 0x54, 0x54, 0x59, 
 189:ili9341gfx.c  **** 	0x39, 0x55, 0x54, 0x54, 0x58, 
 190:ili9341gfx.c  **** 	0x00, 0x00, 0x45, 0x7C, 0x41, 
 191:ili9341gfx.c  **** 	0x00, 0x02, 0x45, 0x7D, 0x42, 
 192:ili9341gfx.c  **** 	0x00, 0x01, 0x45, 0x7C, 0x40, 
 193:ili9341gfx.c  **** 	0x7D, 0x12, 0x11, 0x12, 0x7D, // A-umlaut
 194:ili9341gfx.c  **** 	0xF0, 0x28, 0x25, 0x28, 0xF0, 
 195:ili9341gfx.c  **** 	0x7C, 0x54, 0x55, 0x45, 0x00, 
 196:ili9341gfx.c  **** 	0x20, 0x54, 0x54, 0x7C, 0x54, 
 197:ili9341gfx.c  **** 	0x7C, 0x0A, 0x09, 0x7F, 0x49, 
 198:ili9341gfx.c  **** 	0x32, 0x49, 0x49, 0x49, 0x32, 
 199:ili9341gfx.c  **** 	0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
 200:ili9341gfx.c  **** 	0x32, 0x4A, 0x48, 0x48, 0x30, 
 201:ili9341gfx.c  **** 	0x3A, 0x41, 0x41, 0x21, 0x7A, 
 202:ili9341gfx.c  **** 	0x3A, 0x42, 0x40, 0x20, 0x78, 
 203:ili9341gfx.c  **** 	0x00, 0x9D, 0xA0, 0xA0, 0x7D, 
 204:ili9341gfx.c  **** 	0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
 205:ili9341gfx.c  **** 	0x3D, 0x40, 0x40, 0x40, 0x3D, 
 206:ili9341gfx.c  **** 	0x3C, 0x24, 0xFF, 0x24, 0x24, 
 207:ili9341gfx.c  **** 	0x48, 0x7E, 0x49, 0x43, 0x66, 
 208:ili9341gfx.c  **** 	0x2B, 0x2F, 0xFC, 0x2F, 0x2B, 
 209:ili9341gfx.c  **** 	0xFF, 0x09, 0x29, 0xF6, 0x20, 
 210:ili9341gfx.c  **** 	0xC0, 0x88, 0x7E, 0x09, 0x03, 
 211:ili9341gfx.c  **** 	0x20, 0x54, 0x54, 0x79, 0x41, 
 212:ili9341gfx.c  **** 	0x00, 0x00, 0x44, 0x7D, 0x41, 
 213:ili9341gfx.c  **** 	0x30, 0x48, 0x48, 0x4A, 0x32, 
 214:ili9341gfx.c  **** 	0x38, 0x40, 0x40, 0x22, 0x7A, 
 215:ili9341gfx.c  **** 	0x00, 0x7A, 0x0A, 0x0A, 0x72, 
 216:ili9341gfx.c  **** 	0x7D, 0x0D, 0x19, 0x31, 0x7D, 
 217:ili9341gfx.c  **** 	0x26, 0x29, 0x29, 0x2F, 0x28, 
 218:ili9341gfx.c  **** 	0x26, 0x29, 0x29, 0x29, 0x26, 
 219:ili9341gfx.c  **** 	0x30, 0x48, 0x4D, 0x40, 0x20, 
 220:ili9341gfx.c  **** 	0x38, 0x08, 0x08, 0x08, 0x08, 
 221:ili9341gfx.c  **** 	0x08, 0x08, 0x08, 0x08, 0x38, 
 222:ili9341gfx.c  **** 	0x2F, 0x10, 0xC8, 0xAC, 0xBA, 
 223:ili9341gfx.c  **** 	0x2F, 0x10, 0x28, 0x34, 0xFA, 
 224:ili9341gfx.c  **** 	0x00, 0x00, 0x7B, 0x00, 0x00, 
 225:ili9341gfx.c  **** 	0x08, 0x14, 0x2A, 0x14, 0x22, 
 226:ili9341gfx.c  **** 	0x22, 0x14, 0x2A, 0x14, 0x08, 
 227:ili9341gfx.c  **** 	0xAA, 0x00, 0x55, 0x00, 0xAA, 
 228:ili9341gfx.c  **** 	0xAA, 0x55, 0xAA, 0x55, 0xAA, 
 229:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0xFF, 0x00, 
 230:ili9341gfx.c  **** 	0x10, 0x10, 0x10, 0xFF, 0x00, 
 231:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0xFF, 0x00, 
 232:ili9341gfx.c  **** 	0x10, 0x10, 0xFF, 0x00, 0xFF, 
 233:ili9341gfx.c  **** 	0x10, 0x10, 0xF0, 0x10, 0xF0, 
 234:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0xFC, 0x00, 
 235:ili9341gfx.c  **** 	0x14, 0x14, 0xF7, 0x00, 0xFF, 
 236:ili9341gfx.c  **** 	0x00, 0x00, 0xFF, 0x00, 0xFF, 
 237:ili9341gfx.c  **** 	0x14, 0x14, 0xF4, 0x04, 0xFC, 
 238:ili9341gfx.c  **** 	0x14, 0x14, 0x17, 0x10, 0x1F, 
 239:ili9341gfx.c  **** 	0x10, 0x10, 0x1F, 0x10, 0x1F, 
 240:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0x1F, 0x00, 
 241:ili9341gfx.c  **** 	0x10, 0x10, 0x10, 0xF0, 0x00, 
 242:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0x1F, 0x10, 
 243:ili9341gfx.c  **** 	0x10, 0x10, 0x10, 0x1F, 0x10, 
 244:ili9341gfx.c  **** 	0x10, 0x10, 0x10, 0xF0, 0x10, 
 245:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0xFF, 0x10, 
 246:ili9341gfx.c  **** 	0x10, 0x10, 0x10, 0x10, 0x10, 
 247:ili9341gfx.c  **** 	0x10, 0x10, 0x10, 0xFF, 0x10, 
 248:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0xFF, 0x14, 
 249:ili9341gfx.c  **** 	0x00, 0x00, 0xFF, 0x00, 0xFF, 
 250:ili9341gfx.c  **** 	0x00, 0x00, 0x1F, 0x10, 0x17, 
 251:ili9341gfx.c  **** 	0x00, 0x00, 0xFC, 0x04, 0xF4, 
 252:ili9341gfx.c  **** 	0x14, 0x14, 0x17, 0x10, 0x17, 
 253:ili9341gfx.c  **** 	0x14, 0x14, 0xF4, 0x04, 0xF4, 
 254:ili9341gfx.c  **** 	0x00, 0x00, 0xFF, 0x00, 0xF7, 
 255:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0x14, 0x14, 
 256:ili9341gfx.c  **** 	0x14, 0x14, 0xF7, 0x00, 0xF7, 
 257:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0x17, 0x14, 
 258:ili9341gfx.c  **** 	0x10, 0x10, 0x1F, 0x10, 0x1F, 
 259:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0xF4, 0x14, 
 260:ili9341gfx.c  **** 	0x10, 0x10, 0xF0, 0x10, 0xF0, 
 261:ili9341gfx.c  **** 	0x00, 0x00, 0x1F, 0x10, 0x1F, 
 262:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0x1F, 0x14, 
 263:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0xFC, 0x14, 
 264:ili9341gfx.c  **** 	0x00, 0x00, 0xF0, 0x10, 0xF0, 
 265:ili9341gfx.c  **** 	0x10, 0x10, 0xFF, 0x10, 0xFF, 
 266:ili9341gfx.c  **** 	0x14, 0x14, 0x14, 0xFF, 0x14, 
 267:ili9341gfx.c  **** 	0x10, 0x10, 0x10, 0x1F, 0x00, 
 268:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0xF0, 0x10, 
 269:ili9341gfx.c  **** 	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
 270:ili9341gfx.c  **** 	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
 271:ili9341gfx.c  **** 	0xFF, 0xFF, 0xFF, 0x00, 0x00, 
 272:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0xFF, 0xFF, 
 273:ili9341gfx.c  **** 	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
 274:ili9341gfx.c  **** 	0x38, 0x44, 0x44, 0x38, 0x44, 
 275:ili9341gfx.c  **** 	0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
 276:ili9341gfx.c  **** 	0x7E, 0x02, 0x02, 0x06, 0x06, 
 277:ili9341gfx.c  **** 	0x02, 0x7E, 0x02, 0x7E, 0x02, 
 278:ili9341gfx.c  **** 	0x63, 0x55, 0x49, 0x41, 0x63, 
 279:ili9341gfx.c  **** 	0x38, 0x44, 0x44, 0x3C, 0x04, 
 280:ili9341gfx.c  **** 	0x40, 0x7E, 0x20, 0x1E, 0x20, 
 281:ili9341gfx.c  **** 	0x06, 0x02, 0x7E, 0x02, 0x02, 
 282:ili9341gfx.c  **** 	0x99, 0xA5, 0xE7, 0xA5, 0x99, 
 283:ili9341gfx.c  **** 	0x1C, 0x2A, 0x49, 0x2A, 0x1C, 
 284:ili9341gfx.c  **** 	0x4C, 0x72, 0x01, 0x72, 0x4C, 
 285:ili9341gfx.c  **** 	0x30, 0x4A, 0x4D, 0x4D, 0x30, 
 286:ili9341gfx.c  **** 	0x30, 0x48, 0x78, 0x48, 0x30, 
 287:ili9341gfx.c  **** 	0xBC, 0x62, 0x5A, 0x46, 0x3D, 
 288:ili9341gfx.c  **** 	0x3E, 0x49, 0x49, 0x49, 0x00, 
 289:ili9341gfx.c  **** 	0x7E, 0x01, 0x01, 0x01, 0x7E, 
 290:ili9341gfx.c  **** 	0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
 291:ili9341gfx.c  **** 	0x44, 0x44, 0x5F, 0x44, 0x44, 
 292:ili9341gfx.c  **** 	0x40, 0x51, 0x4A, 0x44, 0x40, 
 293:ili9341gfx.c  **** 	0x40, 0x44, 0x4A, 0x51, 0x40, 
 294:ili9341gfx.c  **** 	0x00, 0x00, 0xFF, 0x01, 0x03, 
 295:ili9341gfx.c  **** 	0xE0, 0x80, 0xFF, 0x00, 0x00, 
 296:ili9341gfx.c  **** 	0x08, 0x08, 0x6B, 0x6B, 0x08,
 297:ili9341gfx.c  **** 	0x36, 0x12, 0x36, 0x24, 0x36,
 298:ili9341gfx.c  **** 	0x06, 0x0F, 0x09, 0x0F, 0x06,
 299:ili9341gfx.c  **** 	0x00, 0x00, 0x18, 0x18, 0x00,
 300:ili9341gfx.c  **** 	0x00, 0x00, 0x10, 0x10, 0x00,
 301:ili9341gfx.c  **** 	0x30, 0x40, 0xFF, 0x01, 0x01,
 302:ili9341gfx.c  **** 	0x00, 0x1F, 0x01, 0x01, 0x1E,
 303:ili9341gfx.c  **** 	0x00, 0x19, 0x1D, 0x17, 0x12,
 304:ili9341gfx.c  **** 	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
 305:ili9341gfx.c  **** 	0x00, 0x00, 0x00, 0x00, 0x00
 306:ili9341gfx.c  **** };
 307:ili9341gfx.c  **** 
 308:ili9341gfx.c  **** extern uint16_t LCD_W,LCD_H;
 309:ili9341gfx.c  **** 
 310:ili9341gfx.c  **** void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t si
 311:ili9341gfx.c  **** {
 119               		.loc 1 311 0
 120               		.cfi_startproc
 121               	.LVL0:
 122 0088 2F92      		push r2
 123               	.LCFI0:
 124               		.cfi_def_cfa_offset 3
 125               		.cfi_offset 2, -2
 126 008a 3F92      		push r3
 127               	.LCFI1:
 128               		.cfi_def_cfa_offset 4
 129               		.cfi_offset 3, -3
 130 008c 4F92      		push r4
 131               	.LCFI2:
 132               		.cfi_def_cfa_offset 5
 133               		.cfi_offset 4, -4
 134 008e 5F92      		push r5
 135               	.LCFI3:
 136               		.cfi_def_cfa_offset 6
 137               		.cfi_offset 5, -5
 138 0090 6F92      		push r6
 139               	.LCFI4:
 140               		.cfi_def_cfa_offset 7
 141               		.cfi_offset 6, -6
 142 0092 7F92      		push r7
 143               	.LCFI5:
 144               		.cfi_def_cfa_offset 8
 145               		.cfi_offset 7, -7
 146 0094 8F92      		push r8
 147               	.LCFI6:
 148               		.cfi_def_cfa_offset 9
 149               		.cfi_offset 8, -8
 150 0096 9F92      		push r9
 151               	.LCFI7:
 152               		.cfi_def_cfa_offset 10
 153               		.cfi_offset 9, -9
 154 0098 AF92      		push r10
 155               	.LCFI8:
 156               		.cfi_def_cfa_offset 11
 157               		.cfi_offset 10, -10
 158 009a BF92      		push r11
 159               	.LCFI9:
 160               		.cfi_def_cfa_offset 12
 161               		.cfi_offset 11, -11
 162 009c CF92      		push r12
 163               	.LCFI10:
 164               		.cfi_def_cfa_offset 13
 165               		.cfi_offset 12, -12
 166 009e DF92      		push r13
 167               	.LCFI11:
 168               		.cfi_def_cfa_offset 14
 169               		.cfi_offset 13, -13
 170 00a0 EF92      		push r14
 171               	.LCFI12:
 172               		.cfi_def_cfa_offset 15
 173               		.cfi_offset 14, -14
 174 00a2 FF92      		push r15
 175               	.LCFI13:
 176               		.cfi_def_cfa_offset 16
 177               		.cfi_offset 15, -15
 178 00a4 0F93      		push r16
 179               	.LCFI14:
 180               		.cfi_def_cfa_offset 17
 181               		.cfi_offset 16, -16
 182 00a6 1F93      		push r17
 183               	.LCFI15:
 184               		.cfi_def_cfa_offset 18
 185               		.cfi_offset 17, -17
 186 00a8 CF93      		push r28
 187               	.LCFI16:
 188               		.cfi_def_cfa_offset 19
 189               		.cfi_offset 28, -18
 190 00aa DF93      		push r29
 191               	.LCFI17:
 192               		.cfi_def_cfa_offset 20
 193               		.cfi_offset 29, -19
 194 00ac 00D0      		rcall .
 195 00ae 00D0      		rcall .
 196 00b0 00D0      		rcall .
 197 00b2 1F92      		push __zero_reg__
 198               	.LCFI18:
 199               		.cfi_def_cfa_offset 27
 200 00b4 CDB7      		in r28,__SP_L__
 201 00b6 DEB7      		in r29,__SP_H__
 202               	.LCFI19:
 203               		.cfi_def_cfa_register 28
 204               	/* prologue: function */
 205               	/* frame size = 7 */
 206               	/* stack size = 25 */
 207               	.L__stack_usage = 25
 208 00b8 4B01      		movw r8,r22
 209 00ba 1901      		movw r2,r18
 210 00bc 1B83      		std Y+3,r17
 211 00be 0A83      		std Y+2,r16
 312:ili9341gfx.c  **** 
 313:ili9341gfx.c  **** if((x >=LCD_W)            || // Clip right
 212               		.loc 1 313 0
 213 00c0 2091 0000 		lds r18,LCD_W
 214 00c4 3091 0000 		lds r19,LCD_W+1
 215               	.LVL1:
 216 00c8 8217      		cp r24,r18
 217 00ca 9307      		cpc r25,r19
 218 00cc 00F0      		brlo .+2
 219 00ce 00C0      		rjmp .L5
 220               		.loc 1 313 0 is_stmt 0 discriminator 1
 221 00d0 2091 0000 		lds r18,LCD_H
 222 00d4 3091 0000 		lds r19,LCD_H+1
 223 00d8 6217      		cp r22,r18
 224 00da 7307      		cpc r23,r19
 225 00dc 00F0      		brlo .+2
 226 00de 00C0      		rjmp .L5
 227               	.LVL2:
 228               	.LBB188:
 229               	.LBB189:
 314:ili9341gfx.c  **** (y >=LCD_H)           || // Clip bottom
 315:ili9341gfx.c  **** ((x + 6 * size - 1) < 0) || // Clip left
 230               		.loc 1 315 0 is_stmt 1
 231 00e0 9C01      		movw r18,r24
 232 00e2 56E0      		ldi r21,lo8(6)
 233 00e4 E59E      		mul r14,r21
 234 00e6 200D      		add r18,r0
 235 00e8 311D      		adc r19,r1
 236 00ea 1124      		clr __zero_reg__
 314:ili9341gfx.c  **** (y >=LCD_H)           || // Clip bottom
 237               		.loc 1 314 0
 238 00ec 1216      		cp __zero_reg__,r18
 239 00ee 1306      		cpc __zero_reg__,r19
 240 00f0 04F0      		brlt .+2
 241 00f2 00C0      		rjmp .L5
 316:ili9341gfx.c  **** ((y + 8 * size - 1) < 0))   // Clip top
 242               		.loc 1 316 0
 243 00f4 CE2C      		mov r12,r14
 244 00f6 D12C      		mov r13,__zero_reg__
 245 00f8 9601      		movw r18,r12
 246 00fa 53E0      		ldi r21,3
 247               		1:
 248 00fc 220F      		lsl r18
 249 00fe 331F      		rol r19
 250 0100 5A95      		dec r21
 251 0102 01F4      		brne 1b
 252 0104 260F      		add r18,r22
 253 0106 371F      		adc r19,r23
 315:ili9341gfx.c  **** ((y + 8 * size - 1) < 0))   // Clip top
 254               		.loc 1 315 0
 255 0108 1216      		cp __zero_reg__,r18
 256 010a 1306      		cpc __zero_reg__,r19
 257 010c 04F0      		brlt .+2
 258 010e 00C0      		rjmp .L5
 259               	.LBB190:
 260               	.LBB191:
 261               	.LBB192:
 317:ili9341gfx.c  **** return;
 318:ili9341gfx.c  **** for (int8_t i=0; i<6; i++ ) {
 319:ili9341gfx.c  **** uint8_t line;
 320:ili9341gfx.c  **** if (i == 5) 
 321:ili9341gfx.c  **** line = 0x0;
 322:ili9341gfx.c  **** else 
 323:ili9341gfx.c  **** line = pgm_read_byte(font+(c*5)+i);
 262               		.loc 1 323 0
 263 0110 25E0      		ldi r18,lo8(5)
 264 0112 429F      		mul r20,r18
 265 0114 A001      		movw r20,r0
 266 0116 1124      		clr __zero_reg__
 267               	.LVL3:
 268 0118 9F83      		std Y+7,r25
 269 011a 8E83      		std Y+6,r24
 270 011c 5C01      		movw r10,r24
 271               	.LBE192:
 272               	.LBE191:
 318:ili9341gfx.c  **** uint8_t line;
 273               		.loc 1 318 0
 274 011e 1982      		std Y+1,__zero_reg__
 275               	.LBB197:
 276               	.LBB193:
 277               		.loc 1 323 0
 278 0120 4050      		subi r20,lo8(-(font))
 279 0122 5040      		sbci r21,hi8(-(font))
 280 0124 9A01      		movw r18,r20
 281 0126 281B      		sub r18,r24
 282 0128 390B      		sbc r19,r25
 283 012a 3D83      		std Y+5,r19
 284 012c 2C83      		std Y+4,r18
 285               	.LVL4:
 286               	.L13:
 287               	.LBE193:
 320:ili9341gfx.c  **** line = 0x0;
 288               		.loc 1 320 0
 289 012e 3981      		ldd r19,Y+1
 321:ili9341gfx.c  **** else 
 290               		.loc 1 321 0
 291 0130 F12C      		mov r15,__zero_reg__
 320:ili9341gfx.c  **** line = 0x0;
 292               		.loc 1 320 0
 293 0132 3530      		cpi r19,lo8(5)
 294 0134 01F0      		breq .L7
 295               	.LVL5:
 296               	.LBB194:
 297               		.loc 1 323 0
 298 0136 EC81      		ldd r30,Y+4
 299 0138 FD81      		ldd r31,Y+5
 300 013a EA0D      		add r30,r10
 301 013c FB1D      		adc r31,r11
 302               	/* #APP */
 303               	 ;  323 "ili9341gfx.c" 1
 304 013e F490      		lpm r15, Z
 305               		
 306               	 ;  0 "" 2
 307               	.LVL6:
 308               	/* #NOAPP */
 309               	.L7:
 310               	.LBE194:
 321:ili9341gfx.c  **** else 
 311               		.loc 1 321 0
 312 0140 2401      		movw r4,r8
 313 0142 712C      		mov r7,__zero_reg__
 314 0144 612C      		mov r6,__zero_reg__
 315               	.L12:
 316               	.LVL7:
 317               	.LBB195:
 324:ili9341gfx.c  **** for (int8_t j = 0; j<8; j++) {
 325:ili9341gfx.c  **** if (line & 0x1) {
 318               		.loc 1 325 0
 319 0146 F0FE      		sbrs r15,0
 320 0148 00C0      		rjmp .L8
 326:ili9341gfx.c  **** if (size == 1) // default size
 321               		.loc 1 326 0
 322 014a 51E0      		ldi r21,lo8(1)
 327:ili9341gfx.c  **** ili9341_drawpixel(x+i, y+j, color);
 328:ili9341gfx.c  **** else {  // big size
 329:ili9341gfx.c  **** ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
 323               		.loc 1 329 0
 324 014c 8101      		movw r16,r2
 326:ili9341gfx.c  **** if (size == 1) // default size
 325               		.loc 1 326 0
 326 014e E512      		cpse r14,r21
 327 0150 00C0      		rjmp .L18
 327:ili9341gfx.c  **** ili9341_drawpixel(x+i, y+j, color);
 328               		.loc 1 327 0
 329 0152 A101      		movw r20,r2
 330               	.L17:
 330:ili9341gfx.c  **** } 
 331:ili9341gfx.c  **** } else if (bg != color) {
 332:ili9341gfx.c  **** if (size == 1) // default size
 333:ili9341gfx.c  **** ili9341_drawpixel(x+i, y+j, bg);
 331               		.loc 1 333 0
 332 0154 B401      		movw r22,r8
 333 0156 660D      		add r22,r6
 334 0158 771D      		adc r23,r7
 335 015a C501      		movw r24,r10
 336 015c 0E94 0000 		call ili9341_drawpixel
 337               	.LVL8:
 338               	.L10:
 334:ili9341gfx.c  **** else 
 335:ili9341gfx.c  **** {  // big size
 336:ili9341gfx.c  **** ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
 337:ili9341gfx.c  **** }
 338:ili9341gfx.c  **** }
 339:ili9341gfx.c  **** line >>= 1;
 339               		.loc 1 339 0
 340 0160 F694      		lsr r15
 341               	.LVL9:
 342 0162 2FEF      		ldi r18,-1
 343 0164 621A      		sub r6,r18
 344 0166 720A      		sbc r7,r18
 345               	.LVL10:
 346 0168 4C0C      		add r4,r12
 347 016a 5D1C      		adc r5,r13
 324:ili9341gfx.c  **** if (line & 0x1) {
 348               		.loc 1 324 0
 349 016c 38E0      		ldi r19,8
 350 016e 6316      		cp r6,r19
 351 0170 7104      		cpc r7,__zero_reg__
 352 0172 01F4      		brne .L12
 353               	.LVL11:
 354 0174 5FEF      		ldi r21,-1
 355 0176 A51A      		sub r10,r21
 356 0178 B50A      		sbc r11,r21
 357 017a 8E81      		ldd r24,Y+6
 358 017c 9F81      		ldd r25,Y+7
 359 017e 8C0D      		add r24,r12
 360 0180 9D1D      		adc r25,r13
 361 0182 9F83      		std Y+7,r25
 362 0184 8E83      		std Y+6,r24
 363 0186 9981      		ldd r25,Y+1
 364 0188 9F5F      		subi r25,lo8(-(1))
 365               	.LVL12:
 366 018a 9983      		std Y+1,r25
 367               	.LBE195:
 368               	.LBE197:
 318:ili9341gfx.c  **** uint8_t line;
 369               		.loc 1 318 0
 370 018c 9630      		cpi r25,lo8(6)
 371 018e 01F4      		brne .L13
 372               	.LVL13:
 373               	.L5:
 374               	/* epilogue start */
 375               	.LBE190:
 376               	.LBE189:
 377               	.LBE188:
 340:ili9341gfx.c  **** }
 341:ili9341gfx.c  **** }
 342:ili9341gfx.c  **** }
 378               		.loc 1 342 0
 379 0190 2796      		adiw r28,7
 380               	.LVL14:
 381 0192 0FB6      		in __tmp_reg__,__SREG__
 382 0194 F894      		cli
 383 0196 DEBF      		out __SP_H__,r29
 384 0198 0FBE      		out __SREG__,__tmp_reg__
 385 019a CDBF      		out __SP_L__,r28
 386               	.LVL15:
 387 019c DF91      		pop r29
 388 019e CF91      		pop r28
 389 01a0 1F91      		pop r17
 390 01a2 0F91      		pop r16
 391 01a4 FF90      		pop r15
 392 01a6 EF90      		pop r14
 393               	.LVL16:
 394 01a8 DF90      		pop r13
 395 01aa CF90      		pop r12
 396 01ac BF90      		pop r11
 397 01ae AF90      		pop r10
 398 01b0 9F90      		pop r9
 399 01b2 8F90      		pop r8
 400               	.LVL17:
 401 01b4 7F90      		pop r7
 402 01b6 6F90      		pop r6
 403 01b8 5F90      		pop r5
 404 01ba 4F90      		pop r4
 405 01bc 3F90      		pop r3
 406 01be 2F90      		pop r2
 407               	.LVL18:
 408 01c0 0895      		ret
 409               	.LVL19:
 410               	.L8:
 411               	.LBB201:
 412               	.LBB200:
 413               	.LBB199:
 414               	.LBB198:
 415               	.LBB196:
 331:ili9341gfx.c  **** if (size == 1) // default size
 416               		.loc 1 331 0
 417 01c2 8A81      		ldd r24,Y+2
 418 01c4 9B81      		ldd r25,Y+3
 419 01c6 8215      		cp r24,r2
 420 01c8 9305      		cpc r25,r3
 421 01ca 01F0      		breq .L10
 332:ili9341gfx.c  **** ili9341_drawpixel(x+i, y+j, bg);
 422               		.loc 1 332 0
 423 01cc 91E0      		ldi r25,lo8(1)
 336:ili9341gfx.c  **** }
 424               		.loc 1 336 0
 425 01ce 0A81      		ldd r16,Y+2
 426 01d0 1B81      		ldd r17,Y+3
 332:ili9341gfx.c  **** ili9341_drawpixel(x+i, y+j, bg);
 427               		.loc 1 332 0
 428 01d2 E912      		cpse r14,r25
 429 01d4 00C0      		rjmp .L18
 333:ili9341gfx.c  **** else 
 430               		.loc 1 333 0
 431 01d6 4A81      		ldd r20,Y+2
 432 01d8 5B81      		ldd r21,Y+3
 433 01da 00C0      		rjmp .L17
 434               	.L18:
 336:ili9341gfx.c  **** }
 435               		.loc 1 336 0
 436 01dc 9601      		movw r18,r12
 437 01de A601      		movw r20,r12
 438 01e0 B201      		movw r22,r4
 439 01e2 8E81      		ldd r24,Y+6
 440 01e4 9F81      		ldd r25,Y+7
 441 01e6 0E94 0000 		call ili9341_fillrect
 442               	.LVL20:
 443 01ea 00C0      		rjmp .L10
 444               	.LBE196:
 445               	.LBE198:
 446               	.LBE199:
 447               	.LBE200:
 448               	.LBE201:
 449               		.cfi_endproc
 450               	.LFE13:
 452               	.global	ili9341_setcursor
 454               	ili9341_setcursor:
 455               	.LFB14:
 343:ili9341gfx.c  **** 
 344:ili9341gfx.c  **** 
 345:ili9341gfx.c  **** void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
 346:ili9341gfx.c  **** {
 456               		.loc 1 346 0
 457               		.cfi_startproc
 458               	.LVL21:
 459               	/* prologue: function */
 460               	/* frame size = 0 */
 461               	/* stack size = 0 */
 462               	.L__stack_usage = 0
 347:ili9341gfx.c  **** cursor_x=x;
 463               		.loc 1 347 0
 464 01ec 9093 0000 		sts cursor_x+1,r25
 465 01f0 8093 0000 		sts cursor_x,r24
 348:ili9341gfx.c  **** cursor_y=y;
 466               		.loc 1 348 0
 467 01f4 7093 0000 		sts cursor_y+1,r23
 468 01f8 6093 0000 		sts cursor_y,r22
 469               	/* epilogue start */
 349:ili9341gfx.c  **** }
 470               		.loc 1 349 0
 471 01fc 0895      		ret
 472               		.cfi_endproc
 473               	.LFE14:
 475               	.global	ili9341_settextcolour
 477               	ili9341_settextcolour:
 478               	.LFB15:
 350:ili9341gfx.c  **** 
 351:ili9341gfx.c  **** void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
 352:ili9341gfx.c  **** {
 479               		.loc 1 352 0
 480               		.cfi_startproc
 481               	.LVL22:
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 0 */
 485               	.L__stack_usage = 0
 353:ili9341gfx.c  **** textcolour=x;
 486               		.loc 1 353 0
 487 01fe 9093 0000 		sts textcolour+1,r25
 488 0202 8093 0000 		sts textcolour,r24
 354:ili9341gfx.c  **** textbgcolour=y;
 489               		.loc 1 354 0
 490 0206 7093 0000 		sts textbgcolour+1,r23
 491 020a 6093 0000 		sts textbgcolour,r22
 492               	/* epilogue start */
 355:ili9341gfx.c  **** }
 493               		.loc 1 355 0
 494 020e 0895      		ret
 495               		.cfi_endproc
 496               	.LFE15:
 498               	.global	ili9341_settextsize
 500               	ili9341_settextsize:
 501               	.LFB16:
 356:ili9341gfx.c  **** 
 357:ili9341gfx.c  **** void ili9341_settextsize(uint8_t s)
 358:ili9341gfx.c  **** {
 502               		.loc 1 358 0
 503               		.cfi_startproc
 504               	.LVL23:
 505               	/* prologue: function */
 506               	/* frame size = 0 */
 507               	/* stack size = 0 */
 508               	.L__stack_usage = 0
 359:ili9341gfx.c  **** if(s>8) return;
 509               		.loc 1 359 0
 510 0210 8930      		cpi r24,lo8(9)
 511 0212 00F4      		brsh .L21
 360:ili9341gfx.c  **** textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
 512               		.loc 1 360 0
 513 0214 8111      		cpse r24,__zero_reg__
 514 0216 00C0      		rjmp .L23
 515 0218 81E0      		ldi r24,lo8(1)
 516               	.LVL24:
 517               	.L23:
 518               		.loc 1 360 0 is_stmt 0 discriminator 4
 519 021a 8093 0000 		sts textsize,r24
 520               	.L21:
 521               	/* epilogue start */
 361:ili9341gfx.c  **** }
 522               		.loc 1 361 0 is_stmt 1
 523 021e 0895      		ret
 524               		.cfi_endproc
 525               	.LFE16:
 527               	.global	ili9341_write
 529               	ili9341_write:
 530               	.LFB17:
 362:ili9341gfx.c  **** 
 363:ili9341gfx.c  **** void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and c
 364:ili9341gfx.c  **** {
 531               		.loc 1 364 0
 532               		.cfi_startproc
 533               	.LVL25:
 534 0220 EF92      		push r14
 535               	.LCFI20:
 536               		.cfi_def_cfa_offset 3
 537               		.cfi_offset 14, -2
 538 0222 0F93      		push r16
 539               	.LCFI21:
 540               		.cfi_def_cfa_offset 4
 541               		.cfi_offset 16, -3
 542 0224 1F93      		push r17
 543               	.LCFI22:
 544               		.cfi_def_cfa_offset 5
 545               		.cfi_offset 17, -4
 546               	/* prologue: function */
 547               	/* frame size = 0 */
 548               	/* stack size = 3 */
 549               	.L__stack_usage = 3
 550 0226 482F      		mov r20,r24
 365:ili9341gfx.c  **** if (c == '\n') {
 551               		.loc 1 365 0
 552 0228 8A30      		cpi r24,lo8(10)
 553 022a 01F4      		brne .L25
 554               	.LVL26:
 555               	.LBB204:
 556               	.LBB205:
 366:ili9341gfx.c  **** cursor_y += textsize*8;
 557               		.loc 1 366 0
 558 022c 8091 0000 		lds r24,textsize
 559               	.LVL27:
 560 0230 2091 0000 		lds r18,cursor_y
 561 0234 3091 0000 		lds r19,cursor_y+1
 562 0238 48E0      		ldi r20,lo8(8)
 563               	.LVL28:
 564 023a 849F      		mul r24,r20
 565 023c C001      		movw r24,r0
 566 023e 1124      		clr __zero_reg__
 567 0240 820F      		add r24,r18
 568 0242 931F      		adc r25,r19
 569 0244 9093 0000 		sts cursor_y+1,r25
 570 0248 8093 0000 		sts cursor_y,r24
 367:ili9341gfx.c  **** cursor_x  = 0;
 571               		.loc 1 367 0
 572 024c 1092 0000 		sts cursor_x+1,__zero_reg__
 573 0250 1092 0000 		sts cursor_x,__zero_reg__
 574               	.LVL29:
 575               	.L24:
 576               	/* epilogue start */
 577               	.LBE205:
 578               	.LBE204:
 368:ili9341gfx.c  **** } else if (c == '\r') {
 369:ili9341gfx.c  ****  // skip em
 370:ili9341gfx.c  **** }
 371:ili9341gfx.c  **** else
 372:ili9341gfx.c  **** {
 373:ili9341gfx.c  **** ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
 374:ili9341gfx.c  **** cursor_x += textsize*6;
 375:ili9341gfx.c  **** }
 376:ili9341gfx.c  **** }
 579               		.loc 1 376 0
 580 0254 1F91      		pop r17
 581 0256 0F91      		pop r16
 582 0258 EF90      		pop r14
 583 025a 0895      		ret
 584               	.LVL30:
 585               	.L25:
 368:ili9341gfx.c  **** } else if (c == '\r') {
 586               		.loc 1 368 0
 587 025c 8D30      		cpi r24,lo8(13)
 588 025e 01F0      		breq .L24
 373:ili9341gfx.c  **** cursor_x += textsize*6;
 589               		.loc 1 373 0
 590 0260 E090 0000 		lds r14,textsize
 591 0264 0091 0000 		lds r16,textbgcolour
 592 0268 1091 0000 		lds r17,textbgcolour+1
 593 026c 2091 0000 		lds r18,textcolour
 594 0270 3091 0000 		lds r19,textcolour+1
 595 0274 6091 0000 		lds r22,cursor_y
 596 0278 7091 0000 		lds r23,cursor_y+1
 597 027c 8091 0000 		lds r24,cursor_x
 598 0280 9091 0000 		lds r25,cursor_x+1
 599 0284 0E94 0000 		call ili9341_drawchar
 600               	.LVL31:
 374:ili9341gfx.c  **** }
 601               		.loc 1 374 0
 602 0288 2091 0000 		lds r18,textsize
 603 028c 8091 0000 		lds r24,cursor_x
 604 0290 9091 0000 		lds r25,cursor_x+1
 605 0294 36E0      		ldi r19,lo8(6)
 606 0296 239F      		mul r18,r19
 607 0298 800D      		add r24,r0
 608 029a 911D      		adc r25,r1
 609 029c 1124      		clr __zero_reg__
 610 029e 9093 0000 		sts cursor_x+1,r25
 611 02a2 8093 0000 		sts cursor_x,r24
 612               		.loc 1 376 0
 613 02a6 00C0      		rjmp .L24
 614               		.cfi_endproc
 615               	.LFE17:
 617               	.global	ili9341_putchar_printf
 619               	ili9341_putchar_printf:
 620               	.LFB8:
  14:ili9341gfx.c  **** 	ili9341_write(var);
 621               		.loc 1 14 0
 622               		.cfi_startproc
 623               	.LVL32:
 624               	/* prologue: function */
 625               	/* frame size = 0 */
 626               	/* stack size = 0 */
 627               	.L__stack_usage = 0
  15:ili9341gfx.c  **** 	return 1;
 628               		.loc 1 15 0
 629 02a8 0E94 0000 		call ili9341_write
 630               	.LVL33:
  17:ili9341gfx.c  **** 
 631               		.loc 1 17 0
 632 02ac 81E0      		ldi r24,lo8(1)
 633 02ae 90E0      		ldi r25,0
 634               	/* epilogue start */
 635 02b0 0895      		ret
 636               		.cfi_endproc
 637               	.LFE8:
 639               		.section	.rodata.str1.1,"aMS",@progbits,1
 640               	.LC0:
 641 0000 6D6F 6465 		.string	"mode - "
 641      202D 2000 
 642               	.LC1:
 643 0008 636F 6E73 		.string	"constant voltage"
 643      7461 6E74 
 643      2076 6F6C 
 643      7461 6765 
 643      00
 644               	.LC2:
 645 0019 7365 7400 		.string	"set"
 646               	.LC3:
 647 001d 3030 2E30 		.string	"00.00v"
 647      3076 00
 648               	.LC4:
 649 0024 6163 7475 		.string	"actual\n"
 649      616C 0A00 
 650               	.LC5:
 651 002c 3030 2E30 		.string	"00.00"
 651      3000 
 652               	.LC6:
 653 0032 3030 2E30 		.string	"00.00a"
 653      3061 00
 654               	.LC7:
 655 0039 6163 7475 		.string	"actual"
 655      616C 00
 656               		.text
 657               	.global	display_init
 659               	display_init:
 660               	.LFB18:
 377:ili9341gfx.c  **** 
 378:ili9341gfx.c  **** 
 379:ili9341gfx.c  **** void display_init(void)//display initial data regarding my power supply
 380:ili9341gfx.c  **** {
 661               		.loc 1 380 0
 662               		.cfi_startproc
 663 02b2 8F92      		push r8
 664               	.LCFI23:
 665               		.cfi_def_cfa_offset 3
 666               		.cfi_offset 8, -2
 667 02b4 9F92      		push r9
 668               	.LCFI24:
 669               		.cfi_def_cfa_offset 4
 670               		.cfi_offset 9, -3
 671 02b6 AF92      		push r10
 672               	.LCFI25:
 673               		.cfi_def_cfa_offset 5
 674               		.cfi_offset 10, -4
 675 02b8 BF92      		push r11
 676               	.LCFI26:
 677               		.cfi_def_cfa_offset 6
 678               		.cfi_offset 11, -5
 679 02ba DF92      		push r13
 680               	.LCFI27:
 681               		.cfi_def_cfa_offset 7
 682               		.cfi_offset 13, -6
 683 02bc EF92      		push r14
 684               	.LCFI28:
 685               		.cfi_def_cfa_offset 8
 686               		.cfi_offset 14, -7
 687 02be FF92      		push r15
 688               	.LCFI29:
 689               		.cfi_def_cfa_offset 9
 690               		.cfi_offset 15, -8
 691 02c0 0F93      		push r16
 692               	.LCFI30:
 693               		.cfi_def_cfa_offset 10
 694               		.cfi_offset 16, -9
 695 02c2 1F93      		push r17
 696               	.LCFI31:
 697               		.cfi_def_cfa_offset 11
 698               		.cfi_offset 17, -10
 699 02c4 CF93      		push r28
 700               	.LCFI32:
 701               		.cfi_def_cfa_offset 12
 702               		.cfi_offset 28, -11
 703 02c6 DF93      		push r29
 704               	.LCFI33:
 705               		.cfi_def_cfa_offset 13
 706               		.cfi_offset 29, -12
 707               	/* prologue: function */
 708               	/* frame size = 0 */
 709               	/* stack size = 11 */
 710               	.L__stack_usage = 11
 381:ili9341gfx.c  **** stdout = & mydata;//it is used for printf function and must be declared locally
 711               		.loc 1 381 0
 712 02c8 80E0      		ldi r24,lo8(mydata)
 713 02ca 90E0      		ldi r25,hi8(mydata)
 714 02cc 9093 0000 		sts __iob+2+1,r25
 715 02d0 8093 0000 		sts __iob+2,r24
 716               	.LVL34:
 717               	.LBB206:
 718               	.LBB207:
 347:ili9341gfx.c  **** cursor_y=y;
 719               		.loc 1 347 0
 720 02d4 04E0      		ldi r16,lo8(4)
 721 02d6 10E0      		ldi r17,0
 722 02d8 1093 0000 		sts cursor_x+1,r17
 723 02dc 0093 0000 		sts cursor_x,r16
 348:ili9341gfx.c  **** }
 724               		.loc 1 348 0
 725 02e0 1093 0000 		sts cursor_y+1,r17
 726 02e4 0093 0000 		sts cursor_y,r16
 727               	.LVL35:
 728               	.LBE207:
 729               	.LBE206:
 730               	.LBB208:
 731               	.LBB209:
 732               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 733               		.loc 2 187 0
 734 02e8 8FE3      		ldi r24,lo8(7999)
 735 02ea 9FE1      		ldi r25,hi8(7999)
 736 02ec 0197      	1:	sbiw r24,1
 737 02ee 01F4      		brne 1b
 738 02f0 00C0      		rjmp .
 739 02f2 0000      		nop
 740               	.LVL36:
 741               	.LBE209:
 742               	.LBE208:
 743               	.LBB210:
 744               	.LBB211:
 353:ili9341gfx.c  **** textbgcolour=y;
 745               		.loc 1 353 0
 746 02f4 80EE      		ldi r24,lo8(-32)
 747 02f6 97E0      		ldi r25,lo8(7)
 748 02f8 9093 0000 		sts textcolour+1,r25
 749 02fc 8093 0000 		sts textcolour,r24
 354:ili9341gfx.c  **** }
 750               		.loc 1 354 0
 751 0300 1092 0000 		sts textbgcolour+1,__zero_reg__
 752 0304 1092 0000 		sts textbgcolour,__zero_reg__
 753               	.LVL37:
 754               	.LBE211:
 755               	.LBE210:
 756               	.LBB212:
 757               	.LBB213:
 758               		.loc 2 187 0
 759 0308 8FE3      		ldi r24,lo8(7999)
 760 030a 9FE1      		ldi r25,hi8(7999)
 761 030c 0197      	1:	sbiw r24,1
 762 030e 01F4      		brne 1b
 763 0310 00C0      		rjmp .
 764 0312 0000      		nop
 765               	.LVL38:
 766               	.LBE213:
 767               	.LBE212:
 768               	.LBB214:
 769               	.LBB215:
 360:ili9341gfx.c  **** }
 770               		.loc 1 360 0
 771 0314 C2E0      		ldi r28,lo8(2)
 772 0316 C093 0000 		sts textsize,r28
 773               	.LVL39:
 774               	.LBE215:
 775               	.LBE214:
 776               	.LBB216:
 777               	.LBB217:
 778               		.loc 2 187 0
 779 031a 8FE3      		ldi r24,lo8(7999)
 780 031c 9FE1      		ldi r25,hi8(7999)
 781 031e 0197      	1:	sbiw r24,1
 782 0320 01F4      		brne 1b
 783 0322 00C0      		rjmp .
 784 0324 0000      		nop
 785               	.LVL40:
 786               	.LBE217:
 787               	.LBE216:
 382:ili9341gfx.c  **** ili9341_setcursor(4,4);
 383:ili9341gfx.c  **** _delay_ms(2);
 384:ili9341gfx.c  **** ili9341_settextcolour(GREEN,BLACK);
 385:ili9341gfx.c  **** _delay_ms(2);
 386:ili9341gfx.c  **** ili9341_settextsize(2);
 387:ili9341gfx.c  **** _delay_ms(2);
 388:ili9341gfx.c  **** printf("mode - ");
 788               		.loc 1 388 0
 789 0326 80E0      		ldi r24,lo8(.LC0)
 790 0328 90E0      		ldi r25,hi8(.LC0)
 791 032a 9F93      		push r25
 792               	.LCFI34:
 793               		.cfi_def_cfa_offset 14
 794 032c 8F93      		push r24
 795               	.LCFI35:
 796               		.cfi_def_cfa_offset 15
 797 032e 0E94 0000 		call printf
 798               	.LVL41:
 799               	.LBB218:
 800               	.LBB219:
 801               		.loc 2 187 0
 802 0332 8FE3      		ldi r24,lo8(7999)
 803 0334 9FE1      		ldi r25,hi8(7999)
 804 0336 0197      	1:	sbiw r24,1
 805 0338 01F4      		brne 1b
 806 033a 00C0      		rjmp .
 807 033c 0000      		nop
 808               	.LVL42:
 809               	.LBE219:
 810               	.LBE218:
 811               	.LBB220:
 812               	.LBB221:
 353:ili9341gfx.c  **** textbgcolour=y;
 813               		.loc 1 353 0
 814 033e 80E0      		ldi r24,0
 815 0340 98EF      		ldi r25,lo8(-8)
 816 0342 9093 0000 		sts textcolour+1,r25
 817 0346 8093 0000 		sts textcolour,r24
 354:ili9341gfx.c  **** }
 818               		.loc 1 354 0
 819 034a 1092 0000 		sts textbgcolour+1,__zero_reg__
 820 034e 1092 0000 		sts textbgcolour,__zero_reg__
 821               	.LVL43:
 822               	.LBE221:
 823               	.LBE220:
 824               	.LBB222:
 825               	.LBB223:
 826               		.loc 2 187 0
 827 0352 8FE3      		ldi r24,lo8(7999)
 828 0354 9FE1      		ldi r25,hi8(7999)
 829 0356 0197      	1:	sbiw r24,1
 830 0358 01F4      		brne 1b
 831 035a 00C0      		rjmp .
 832 035c 0000      		nop
 833               	.LVL44:
 834               	.LBE223:
 835               	.LBE222:
 836               	.LBB224:
 837               	.LBB225:
 360:ili9341gfx.c  **** }
 838               		.loc 1 360 0
 839 035e C093 0000 		sts textsize,r28
 840               	.LVL45:
 841               	.LBE225:
 842               	.LBE224:
 843               	.LBB226:
 844               	.LBB227:
 845               		.loc 2 187 0
 846 0362 8FE3      		ldi r24,lo8(7999)
 847 0364 9FE1      		ldi r25,hi8(7999)
 848 0366 0197      	1:	sbiw r24,1
 849 0368 01F4      		brne 1b
 850 036a 00C0      		rjmp .
 851 036c 0000      		nop
 852               	.LVL46:
 853               	.LBE227:
 854               	.LBE226:
 389:ili9341gfx.c  **** _delay_ms(2);
 390:ili9341gfx.c  **** ili9341_settextcolour(RED,BLACK);
 391:ili9341gfx.c  **** _delay_ms(2);
 392:ili9341gfx.c  **** ili9341_settextsize(2);
 393:ili9341gfx.c  **** _delay_ms(2);
 394:ili9341gfx.c  **** printf("constant voltage");
 855               		.loc 1 394 0
 856 036e 80E0      		ldi r24,lo8(.LC1)
 857 0370 90E0      		ldi r25,hi8(.LC1)
 858 0372 9F93      		push r25
 859               	.LCFI36:
 860               		.cfi_def_cfa_offset 16
 861 0374 8F93      		push r24
 862               	.LCFI37:
 863               		.cfi_def_cfa_offset 17
 864 0376 0E94 0000 		call printf
 865               	.LVL47:
 866               	.LBB228:
 867               	.LBB229:
 868               		.loc 2 187 0
 869 037a 8FE3      		ldi r24,lo8(7999)
 870 037c 9FE1      		ldi r25,hi8(7999)
 871 037e 0197      	1:	sbiw r24,1
 872 0380 01F4      		brne 1b
 873 0382 00C0      		rjmp .
 874 0384 0000      		nop
 875               	.LVL48:
 876               	.LBE229:
 877               	.LBE228:
 878               	.LBB230:
 879               	.LBB231:
 347:ili9341gfx.c  **** cursor_y=y;
 880               		.loc 1 347 0
 881 0386 1093 0000 		sts cursor_x+1,r17
 882 038a 0093 0000 		sts cursor_x,r16
 348:ili9341gfx.c  **** }
 883               		.loc 1 348 0
 884 038e 88E2      		ldi r24,lo8(40)
 885 0390 A82E      		mov r10,r24
 886 0392 B12C      		mov r11,__zero_reg__
 887 0394 B092 0000 		sts cursor_y+1,r11
 888 0398 A092 0000 		sts cursor_y,r10
 889               	.LVL49:
 890               	.LBE231:
 891               	.LBE230:
 892               	.LBB232:
 893               	.LBB233:
 894               		.loc 2 187 0
 895 039c 8FE3      		ldi r24,lo8(7999)
 896 039e 9FE1      		ldi r25,hi8(7999)
 897 03a0 0197      	1:	sbiw r24,1
 898 03a2 01F4      		brne 1b
 899 03a4 00C0      		rjmp .
 900 03a6 0000      		nop
 901               	.LVL50:
 902               	.LBE233:
 903               	.LBE232:
 904               	.LBB234:
 905               	.LBB235:
 353:ili9341gfx.c  **** textbgcolour=y;
 906               		.loc 1 353 0
 907 03a8 8FEF      		ldi r24,lo8(-1)
 908 03aa 97E0      		ldi r25,lo8(7)
 909 03ac 9093 0000 		sts textcolour+1,r25
 910 03b0 8093 0000 		sts textcolour,r24
 354:ili9341gfx.c  **** }
 911               		.loc 1 354 0
 912 03b4 1092 0000 		sts textbgcolour+1,__zero_reg__
 913 03b8 1092 0000 		sts textbgcolour,__zero_reg__
 914               	.LVL51:
 915               	.LBE235:
 916               	.LBE234:
 917               	.LBB236:
 918               	.LBB237:
 919               		.loc 2 187 0
 920 03bc 8FE3      		ldi r24,lo8(7999)
 921 03be 9FE1      		ldi r25,hi8(7999)
 922 03c0 0197      	1:	sbiw r24,1
 923 03c2 01F4      		brne 1b
 924 03c4 00C0      		rjmp .
 925 03c6 0000      		nop
 926               	.LVL52:
 927               	.LBE237:
 928               	.LBE236:
 929               	.LBB238:
 930               	.LBB239:
 360:ili9341gfx.c  **** }
 931               		.loc 1 360 0
 932 03c8 D4E0      		ldi r29,lo8(4)
 933 03ca D093 0000 		sts textsize,r29
 934               	.LVL53:
 935               	.LBE239:
 936               	.LBE238:
 937               	.LBB240:
 938               	.LBB241:
 939               		.loc 2 187 0
 940 03ce 8FE3      		ldi r24,lo8(7999)
 941 03d0 9FE1      		ldi r25,hi8(7999)
 942 03d2 0197      	1:	sbiw r24,1
 943 03d4 01F4      		brne 1b
 944 03d6 00C0      		rjmp .
 945 03d8 0000      		nop
 946               	.LVL54:
 947               	.LBE241:
 948               	.LBE240:
 395:ili9341gfx.c  **** _delay_ms(2);
 396:ili9341gfx.c  **** ili9341_setcursor(4,40);
 397:ili9341gfx.c  **** _delay_ms(2);
 398:ili9341gfx.c  **** ili9341_settextcolour(CYAN,BLACK);
 399:ili9341gfx.c  **** _delay_ms(2);
 400:ili9341gfx.c  **** ili9341_settextsize(4);
 401:ili9341gfx.c  **** _delay_ms(2);
 402:ili9341gfx.c  **** ili9341_write('V');
 949               		.loc 1 402 0
 950 03da 86E5      		ldi r24,lo8(86)
 951 03dc 0E94 0000 		call ili9341_write
 952               	.LVL55:
 953               	.LBB242:
 954               	.LBB243:
 955               		.loc 2 187 0
 956 03e0 8FE3      		ldi r24,lo8(7999)
 957 03e2 9FE1      		ldi r25,hi8(7999)
 958 03e4 0197      	1:	sbiw r24,1
 959 03e6 01F4      		brne 1b
 960 03e8 00C0      		rjmp .
 961 03ea 0000      		nop
 962               	.LVL56:
 963               	.LBE243:
 964               	.LBE242:
 403:ili9341gfx.c  **** _delay_ms(2);
 404:ili9341gfx.c  **** cursor_y=cursor_y+6;
 965               		.loc 1 404 0
 966 03ec 8091 0000 		lds r24,cursor_y
 967 03f0 9091 0000 		lds r25,cursor_y+1
 968 03f4 0696      		adiw r24,6
 969 03f6 9093 0000 		sts cursor_y+1,r25
 970 03fa 8093 0000 		sts cursor_y,r24
 971               	.LVL57:
 972               	.LBB244:
 973               	.LBB245:
 360:ili9341gfx.c  **** }
 974               		.loc 1 360 0
 975 03fe C3E0      		ldi r28,lo8(3)
 976 0400 C093 0000 		sts textsize,r28
 977               	.LVL58:
 978               	.LBE245:
 979               	.LBE244:
 980               	.LBB246:
 981               	.LBB247:
 982               		.loc 2 187 0
 983 0404 8FE3      		ldi r24,lo8(7999)
 984 0406 9FE1      		ldi r25,hi8(7999)
 985 0408 0197      	1:	sbiw r24,1
 986 040a 01F4      		brne 1b
 987 040c 00C0      		rjmp .
 988 040e 0000      		nop
 989               	.LVL59:
 990               	.LBE247:
 991               	.LBE246:
 405:ili9341gfx.c  **** ili9341_settextsize(3);
 406:ili9341gfx.c  **** _delay_ms(2);
 407:ili9341gfx.c  **** printf("set\n");
 992               		.loc 1 407 0
 993 0410 80E0      		ldi r24,lo8(.LC2)
 994 0412 90E0      		ldi r25,hi8(.LC2)
 995 0414 0E94 0000 		call puts
 996               	.LVL60:
 997               	.LBB248:
 998               	.LBB249:
 999               		.loc 2 187 0
 1000 0418 8FE3      		ldi r24,lo8(7999)
 1001 041a 9FE1      		ldi r25,hi8(7999)
 1002 041c 0197      	1:	sbiw r24,1
 1003 041e 01F4      		brne 1b
 1004 0420 00C0      		rjmp .
 1005 0422 0000      		nop
 1006               	.LVL61:
 1007               	.LBE249:
 1008               	.LBE248:
 408:ili9341gfx.c  **** _delay_ms(2);
 409:ili9341gfx.c  **** cursor_y=cursor_y+12;
 1009               		.loc 1 409 0
 1010 0424 8091 0000 		lds r24,cursor_y
 1011 0428 9091 0000 		lds r25,cursor_y+1
 1012 042c 0C96      		adiw r24,12
 1013 042e 9093 0000 		sts cursor_y+1,r25
 1014 0432 8093 0000 		sts cursor_y,r24
 410:ili9341gfx.c  **** backuplocationvset();
 1015               		.loc 1 410 0
 1016 0436 0E94 0000 		call backuplocationvset
 1017               	.LVL62:
 411:ili9341gfx.c  **** printf("00.00v");
 1018               		.loc 1 411 0
 1019 043a 80E0      		ldi r24,lo8(.LC3)
 1020 043c 90E0      		ldi r25,hi8(.LC3)
 1021 043e 9F93      		push r25
 1022               	.LCFI38:
 1023               		.cfi_def_cfa_offset 18
 1024 0440 8F93      		push r24
 1025               	.LCFI39:
 1026               		.cfi_def_cfa_offset 19
 1027 0442 0E94 0000 		call printf
 1028               	.LVL63:
 1029               	.LBB250:
 1030               	.LBB251:
 1031               		.loc 2 187 0
 1032 0446 8FE3      		ldi r24,lo8(7999)
 1033 0448 9FE1      		ldi r25,hi8(7999)
 1034 044a 0197      	1:	sbiw r24,1
 1035 044c 01F4      		brne 1b
 1036 044e 00C0      		rjmp .
 1037 0450 0000      		nop
 1038               	.LVL64:
 1039               	.LBE251:
 1040               	.LBE250:
 1041               	.LBB252:
 1042               	.LBB253:
 347:ili9341gfx.c  **** cursor_y=y;
 1043               		.loc 1 347 0
 1044 0452 1093 0000 		sts cursor_x+1,r17
 1045 0456 0093 0000 		sts cursor_x,r16
 348:ili9341gfx.c  **** }
 1046               		.loc 1 348 0
 1047 045a 98E7      		ldi r25,lo8(120)
 1048 045c 892E      		mov r8,r25
 1049 045e 912C      		mov r9,__zero_reg__
 1050 0460 9092 0000 		sts cursor_y+1,r9
 1051 0464 8092 0000 		sts cursor_y,r8
 1052               	.LVL65:
 1053               	.LBE253:
 1054               	.LBE252:
 1055               	.LBB254:
 1056               	.LBB255:
 1057               		.loc 2 187 0
 1058 0468 8FE3      		ldi r24,lo8(7999)
 1059 046a 9FE1      		ldi r25,hi8(7999)
 1060 046c 0197      	1:	sbiw r24,1
 1061 046e 01F4      		brne 1b
 1062 0470 00C0      		rjmp .
 1063 0472 0000      		nop
 1064               	.LVL66:
 1065               	.LBE255:
 1066               	.LBE254:
 1067               	.LBB256:
 1068               	.LBB257:
 360:ili9341gfx.c  **** }
 1069               		.loc 1 360 0
 1070 0474 D093 0000 		sts textsize,r29
 1071               	.LVL67:
 1072               	.LBE257:
 1073               	.LBE256:
 1074               	.LBB258:
 1075               	.LBB259:
 1076               		.loc 2 187 0
 1077 0478 8FE3      		ldi r24,lo8(7999)
 1078 047a 9FE1      		ldi r25,hi8(7999)
 1079 047c 0197      	1:	sbiw r24,1
 1080 047e 01F4      		brne 1b
 1081 0480 00C0      		rjmp .
 1082 0482 0000      		nop
 1083               	.LVL68:
 1084               	.LBE259:
 1085               	.LBE258:
 412:ili9341gfx.c  **** _delay_ms(2);
 413:ili9341gfx.c  **** ili9341_setcursor(4,120);
 414:ili9341gfx.c  **** _delay_ms(2);
 415:ili9341gfx.c  **** ili9341_settextsize(4);
 416:ili9341gfx.c  **** _delay_ms(2);
 417:ili9341gfx.c  **** ili9341_write('V');
 1086               		.loc 1 417 0
 1087 0484 86E5      		ldi r24,lo8(86)
 1088 0486 0E94 0000 		call ili9341_write
 1089               	.LVL69:
 1090               	.LBB260:
 1091               	.LBB261:
 1092               		.loc 2 187 0
 1093 048a 8FE3      		ldi r24,lo8(7999)
 1094 048c 9FE1      		ldi r25,hi8(7999)
 1095 048e 0197      	1:	sbiw r24,1
 1096 0490 01F4      		brne 1b
 1097 0492 00C0      		rjmp .
 1098 0494 0000      		nop
 1099               	.LVL70:
 1100               	.LBE261:
 1101               	.LBE260:
 418:ili9341gfx.c  **** _delay_ms(2);
 419:ili9341gfx.c  **** cursor_y=cursor_y+6;
 1102               		.loc 1 419 0
 1103 0496 8091 0000 		lds r24,cursor_y
 1104 049a 9091 0000 		lds r25,cursor_y+1
 1105 049e 0696      		adiw r24,6
 1106 04a0 9093 0000 		sts cursor_y+1,r25
 1107 04a4 8093 0000 		sts cursor_y,r24
 1108               	.LVL71:
 1109               	.LBB262:
 1110               	.LBB263:
 360:ili9341gfx.c  **** }
 1111               		.loc 1 360 0
 1112 04a8 C093 0000 		sts textsize,r28
 1113               	.LVL72:
 1114               	.LBE263:
 1115               	.LBE262:
 1116               	.LBB264:
 1117               	.LBB265:
 1118               		.loc 2 187 0
 1119 04ac 8FE3      		ldi r24,lo8(7999)
 1120 04ae 9FE1      		ldi r25,hi8(7999)
 1121 04b0 0197      	1:	sbiw r24,1
 1122 04b2 01F4      		brne 1b
 1123 04b4 00C0      		rjmp .
 1124 04b6 0000      		nop
 1125               	.LVL73:
 1126               	.LBE265:
 1127               	.LBE264:
 420:ili9341gfx.c  **** ili9341_settextsize(3);
 421:ili9341gfx.c  **** _delay_ms(2);
 422:ili9341gfx.c  **** printf("actual\n\n");
 1128               		.loc 1 422 0
 1129 04b8 80E0      		ldi r24,lo8(.LC4)
 1130 04ba 90E0      		ldi r25,hi8(.LC4)
 1131 04bc 0E94 0000 		call puts
 1132               	.LVL74:
 1133               	.LBB266:
 1134               	.LBB267:
 1135               		.loc 2 187 0
 1136 04c0 8FE3      		ldi r24,lo8(7999)
 1137 04c2 9FE1      		ldi r25,hi8(7999)
 1138 04c4 0197      	1:	sbiw r24,1
 1139 04c6 01F4      		brne 1b
 1140 04c8 00C0      		rjmp .
 1141 04ca 0000      		nop
 1142               	.LVL75:
 1143               	.LBE267:
 1144               	.LBE266:
 423:ili9341gfx.c  **** _delay_ms(2);
 424:ili9341gfx.c  **** backuplocationvactual();
 1145               		.loc 1 424 0
 1146 04cc 0E94 0000 		call backuplocationvactual
 1147               	.LVL76:
 1148               	.LBB268:
 1149               	.LBB269:
 360:ili9341gfx.c  **** }
 1150               		.loc 1 360 0
 1151 04d0 25E0      		ldi r18,lo8(5)
 1152 04d2 D22E      		mov r13,r18
 1153 04d4 D092 0000 		sts textsize,r13
 1154               	.LVL77:
 1155               	.LBE269:
 1156               	.LBE268:
 425:ili9341gfx.c  **** ili9341_settextsize(5);
 426:ili9341gfx.c  **** printf("00.00");
 1157               		.loc 1 426 0
 1158 04d8 00E0      		ldi r16,lo8(.LC5)
 1159 04da 10E0      		ldi r17,hi8(.LC5)
 1160 04dc 1F93      		push r17
 1161               	.LCFI40:
 1162               		.cfi_def_cfa_offset 20
 1163 04de 0F93      		push r16
 1164               	.LCFI41:
 1165               		.cfi_def_cfa_offset 21
 1166 04e0 0E94 0000 		call printf
 1167               	.LVL78:
 1168               	.LBB270:
 1169               	.LBB271:
 1170               		.loc 2 187 0
 1171 04e4 8FE3      		ldi r24,lo8(7999)
 1172 04e6 9FE1      		ldi r25,hi8(7999)
 1173 04e8 0197      	1:	sbiw r24,1
 1174 04ea 01F4      		brne 1b
 1175 04ec 00C0      		rjmp .
 1176 04ee 0000      		nop
 1177               	.LVL79:
 1178               	.LBE271:
 1179               	.LBE270:
 1180               	.LBB272:
 1181               	.LBB273:
 347:ili9341gfx.c  **** cursor_y=y;
 1182               		.loc 1 347 0
 1183 04f0 34EA      		ldi r19,lo8(-92)
 1184 04f2 E32E      		mov r14,r19
 1185 04f4 F12C      		mov r15,__zero_reg__
 1186 04f6 F092 0000 		sts cursor_x+1,r15
 1187 04fa E092 0000 		sts cursor_x,r14
 348:ili9341gfx.c  **** }
 1188               		.loc 1 348 0
 1189 04fe B092 0000 		sts cursor_y+1,r11
 1190 0502 A092 0000 		sts cursor_y,r10
 1191               	.LVL80:
 1192               	.LBE273:
 1193               	.LBE272:
 1194               	.LBB274:
 1195               	.LBB275:
 1196               		.loc 2 187 0
 1197 0506 8FE3      		ldi r24,lo8(7999)
 1198 0508 9FE1      		ldi r25,hi8(7999)
 1199 050a 0197      	1:	sbiw r24,1
 1200 050c 01F4      		brne 1b
 1201 050e 00C0      		rjmp .
 1202 0510 0000      		nop
 1203               	.LVL81:
 1204               	.LBE275:
 1205               	.LBE274:
 1206               	.LBB276:
 1207               	.LBB277:
 353:ili9341gfx.c  **** textbgcolour=y;
 1208               		.loc 1 353 0
 1209 0512 80EE      		ldi r24,lo8(-32)
 1210 0514 9FEF      		ldi r25,lo8(-1)
 1211 0516 9093 0000 		sts textcolour+1,r25
 1212 051a 8093 0000 		sts textcolour,r24
 354:ili9341gfx.c  **** }
 1213               		.loc 1 354 0
 1214 051e 1092 0000 		sts textbgcolour+1,__zero_reg__
 1215 0522 1092 0000 		sts textbgcolour,__zero_reg__
 1216               	.LVL82:
 1217               	.LBE277:
 1218               	.LBE276:
 1219               	.LBB278:
 1220               	.LBB279:
 1221               		.loc 2 187 0
 1222 0526 8FE3      		ldi r24,lo8(7999)
 1223 0528 9FE1      		ldi r25,hi8(7999)
 1224 052a 0197      	1:	sbiw r24,1
 1225 052c 01F4      		brne 1b
 1226 052e 00C0      		rjmp .
 1227 0530 0000      		nop
 1228               	.LVL83:
 1229               	.LBE279:
 1230               	.LBE278:
 1231               	.LBB280:
 1232               	.LBB281:
 360:ili9341gfx.c  **** }
 1233               		.loc 1 360 0
 1234 0532 D093 0000 		sts textsize,r29
 1235               	.LVL84:
 1236               	.LBE281:
 1237               	.LBE280:
 1238               	.LBB282:
 1239               	.LBB283:
 1240               		.loc 2 187 0
 1241 0536 8FE3      		ldi r24,lo8(7999)
 1242 0538 9FE1      		ldi r25,hi8(7999)
 1243 053a 0197      	1:	sbiw r24,1
 1244 053c 01F4      		brne 1b
 1245 053e 00C0      		rjmp .
 1246 0540 0000      		nop
 1247               	.LVL85:
 1248               	.LBE283:
 1249               	.LBE282:
 427:ili9341gfx.c  **** _delay_ms(2);
 428:ili9341gfx.c  **** 
 429:ili9341gfx.c  **** 
 430:ili9341gfx.c  **** 
 431:ili9341gfx.c  **** ili9341_setcursor(164,40);
 432:ili9341gfx.c  **** _delay_ms(2);
 433:ili9341gfx.c  **** ili9341_settextcolour(YELLOW,BLACK);
 434:ili9341gfx.c  **** _delay_ms(2);
 435:ili9341gfx.c  **** ili9341_settextsize(4);
 436:ili9341gfx.c  **** _delay_ms(2);
 437:ili9341gfx.c  **** ili9341_write('I');
 1250               		.loc 1 437 0
 1251 0542 89E4      		ldi r24,lo8(73)
 1252 0544 0E94 0000 		call ili9341_write
 1253               	.LVL86:
 1254               	.LBB284:
 1255               	.LBB285:
 1256               		.loc 2 187 0
 1257 0548 8FE3      		ldi r24,lo8(7999)
 1258 054a 9FE1      		ldi r25,hi8(7999)
 1259 054c 0197      	1:	sbiw r24,1
 1260 054e 01F4      		brne 1b
 1261 0550 00C0      		rjmp .
 1262 0552 0000      		nop
 1263               	.LVL87:
 1264               	.LBE285:
 1265               	.LBE284:
 438:ili9341gfx.c  **** _delay_ms(2);
 439:ili9341gfx.c  **** cursor_y=cursor_y+6;
 1266               		.loc 1 439 0
 1267 0554 8091 0000 		lds r24,cursor_y
 1268 0558 9091 0000 		lds r25,cursor_y+1
 1269 055c 0696      		adiw r24,6
 1270 055e 9093 0000 		sts cursor_y+1,r25
 1271 0562 8093 0000 		sts cursor_y,r24
 1272               	.LVL88:
 1273               	.LBB286:
 1274               	.LBB287:
 360:ili9341gfx.c  **** }
 1275               		.loc 1 360 0
 1276 0566 C093 0000 		sts textsize,r28
 1277               	.LVL89:
 1278               	.LBE287:
 1279               	.LBE286:
 1280               	.LBB288:
 1281               	.LBB289:
 1282               		.loc 2 187 0
 1283 056a 8FE3      		ldi r24,lo8(7999)
 1284 056c 9FE1      		ldi r25,hi8(7999)
 1285 056e 0197      	1:	sbiw r24,1
 1286 0570 01F4      		brne 1b
 1287 0572 00C0      		rjmp .
 1288 0574 0000      		nop
 1289               	.LVL90:
 1290               	.LBE289:
 1291               	.LBE288:
 440:ili9341gfx.c  **** ili9341_settextsize(3);
 441:ili9341gfx.c  **** _delay_ms(2);
 442:ili9341gfx.c  **** printf("set");
 1292               		.loc 1 442 0
 1293 0576 80E0      		ldi r24,lo8(.LC2)
 1294 0578 90E0      		ldi r25,hi8(.LC2)
 1295 057a 9F93      		push r25
 1296               	.LCFI42:
 1297               		.cfi_def_cfa_offset 22
 1298 057c 8F93      		push r24
 1299               	.LCFI43:
 1300               		.cfi_def_cfa_offset 23
 1301 057e 0E94 0000 		call printf
 1302               	.LVL91:
 1303               	.LBB290:
 1304               	.LBB291:
 1305               		.loc 2 187 0
 1306 0582 8FE3      		ldi r24,lo8(7999)
 1307 0584 9FE1      		ldi r25,hi8(7999)
 1308 0586 0197      	1:	sbiw r24,1
 1309 0588 01F4      		brne 1b
 1310 058a 00C0      		rjmp .
 1311 058c 0000      		nop
 1312               	.LVL92:
 1313               	.LBE291:
 1314               	.LBE290:
 443:ili9341gfx.c  **** _delay_ms(2);
 444:ili9341gfx.c  **** cursor_x=164;
 1315               		.loc 1 444 0
 1316 058e F092 0000 		sts cursor_x+1,r15
 1317 0592 E092 0000 		sts cursor_x,r14
 445:ili9341gfx.c  **** cursor_y=(cursor_y+36);
 1318               		.loc 1 445 0
 1319 0596 8091 0000 		lds r24,cursor_y
 1320 059a 9091 0000 		lds r25,cursor_y+1
 1321 059e 8496      		adiw r24,36
 1322 05a0 9093 0000 		sts cursor_y+1,r25
 1323 05a4 8093 0000 		sts cursor_y,r24
 446:ili9341gfx.c  **** backuplocationiset();
 1324               		.loc 1 446 0
 1325 05a8 0E94 0000 		call backuplocationiset
 1326               	.LVL93:
 1327               	.LBB292:
 1328               	.LBB293:
 360:ili9341gfx.c  **** }
 1329               		.loc 1 360 0
 1330 05ac C093 0000 		sts textsize,r28
 1331               	.LVL94:
 1332               	.LBE293:
 1333               	.LBE292:
 447:ili9341gfx.c  **** ili9341_settextsize(3);
 448:ili9341gfx.c  **** printf("00.00a");
 1334               		.loc 1 448 0
 1335 05b0 80E0      		ldi r24,lo8(.LC6)
 1336 05b2 90E0      		ldi r25,hi8(.LC6)
 1337 05b4 9F93      		push r25
 1338               	.LCFI44:
 1339               		.cfi_def_cfa_offset 24
 1340 05b6 8F93      		push r24
 1341               	.LCFI45:
 1342               		.cfi_def_cfa_offset 25
 1343 05b8 0E94 0000 		call printf
 1344               	.LVL95:
 1345               	.LBB294:
 1346               	.LBB295:
 1347               		.loc 2 187 0
 1348 05bc 8FE3      		ldi r24,lo8(7999)
 1349 05be 9FE1      		ldi r25,hi8(7999)
 1350 05c0 0197      	1:	sbiw r24,1
 1351 05c2 01F4      		brne 1b
 1352 05c4 00C0      		rjmp .
 1353 05c6 0000      		nop
 1354               	.LVL96:
 1355               	.LBE295:
 1356               	.LBE294:
 1357               	.LBB296:
 1358               	.LBB297:
 347:ili9341gfx.c  **** cursor_y=y;
 1359               		.loc 1 347 0
 1360 05c8 F092 0000 		sts cursor_x+1,r15
 1361 05cc E092 0000 		sts cursor_x,r14
 348:ili9341gfx.c  **** }
 1362               		.loc 1 348 0
 1363 05d0 9092 0000 		sts cursor_y+1,r9
 1364 05d4 8092 0000 		sts cursor_y,r8
 1365               	.LVL97:
 1366               	.LBE297:
 1367               	.LBE296:
 1368               	.LBB298:
 1369               	.LBB299:
 1370               		.loc 2 187 0
 1371 05d8 8FE3      		ldi r24,lo8(7999)
 1372 05da 9FE1      		ldi r25,hi8(7999)
 1373 05dc 0197      	1:	sbiw r24,1
 1374 05de 01F4      		brne 1b
 1375 05e0 00C0      		rjmp .
 1376 05e2 0000      		nop
 1377               	.LVL98:
 1378               	.LBE299:
 1379               	.LBE298:
 1380               	.LBB300:
 1381               	.LBB301:
 360:ili9341gfx.c  **** }
 1382               		.loc 1 360 0
 1383 05e4 D093 0000 		sts textsize,r29
 1384               	.LVL99:
 1385               	.LBE301:
 1386               	.LBE300:
 1387               	.LBB302:
 1388               	.LBB303:
 1389               		.loc 2 187 0
 1390 05e8 8FE3      		ldi r24,lo8(7999)
 1391 05ea 9FE1      		ldi r25,hi8(7999)
 1392 05ec 0197      	1:	sbiw r24,1
 1393 05ee 01F4      		brne 1b
 1394 05f0 00C0      		rjmp .
 1395 05f2 0000      		nop
 1396               	.LVL100:
 1397               	.LBE303:
 1398               	.LBE302:
 449:ili9341gfx.c  **** _delay_ms(2);
 450:ili9341gfx.c  **** ili9341_setcursor(164,120);
 451:ili9341gfx.c  **** _delay_ms(2);
 452:ili9341gfx.c  **** ili9341_settextsize(4);
 453:ili9341gfx.c  **** _delay_ms(2);
 454:ili9341gfx.c  **** ili9341_write('I');
 1399               		.loc 1 454 0
 1400 05f4 89E4      		ldi r24,lo8(73)
 1401 05f6 0E94 0000 		call ili9341_write
 1402               	.LVL101:
 1403               	.LBB304:
 1404               	.LBB305:
 1405               		.loc 2 187 0
 1406 05fa 8FE3      		ldi r24,lo8(7999)
 1407 05fc 9FE1      		ldi r25,hi8(7999)
 1408 05fe 0197      	1:	sbiw r24,1
 1409 0600 01F4      		brne 1b
 1410 0602 00C0      		rjmp .
 1411 0604 0000      		nop
 1412               	.LVL102:
 1413               	.LBE305:
 1414               	.LBE304:
 455:ili9341gfx.c  **** _delay_ms(2);
 456:ili9341gfx.c  **** cursor_y=cursor_y+6;
 1415               		.loc 1 456 0
 1416 0606 8091 0000 		lds r24,cursor_y
 1417 060a 9091 0000 		lds r25,cursor_y+1
 1418 060e 0696      		adiw r24,6
 1419 0610 9093 0000 		sts cursor_y+1,r25
 1420 0614 8093 0000 		sts cursor_y,r24
 1421               	.LVL103:
 1422               	.LBB306:
 1423               	.LBB307:
 360:ili9341gfx.c  **** }
 1424               		.loc 1 360 0
 1425 0618 C093 0000 		sts textsize,r28
 1426               	.LVL104:
 1427               	.LBE307:
 1428               	.LBE306:
 1429               	.LBB308:
 1430               	.LBB309:
 1431               		.loc 2 187 0
 1432 061c 8FE3      		ldi r24,lo8(7999)
 1433 061e 9FE1      		ldi r25,hi8(7999)
 1434 0620 0197      	1:	sbiw r24,1
 1435 0622 01F4      		brne 1b
 1436 0624 00C0      		rjmp .
 1437 0626 0000      		nop
 1438               	.LVL105:
 1439               	.LBE309:
 1440               	.LBE308:
 457:ili9341gfx.c  **** ili9341_settextsize(3);
 458:ili9341gfx.c  **** _delay_ms(2);
 459:ili9341gfx.c  **** printf("actual");
 1441               		.loc 1 459 0
 1442 0628 80E0      		ldi r24,lo8(.LC7)
 1443 062a 90E0      		ldi r25,hi8(.LC7)
 1444 062c 9F93      		push r25
 1445               	.LCFI46:
 1446               		.cfi_def_cfa_offset 26
 1447 062e 8F93      		push r24
 1448               	.LCFI47:
 1449               		.cfi_def_cfa_offset 27
 1450 0630 0E94 0000 		call printf
 1451               	.LVL106:
 1452               	.LBB310:
 1453               	.LBB311:
 1454               		.loc 2 187 0
 1455 0634 8FE3      		ldi r24,lo8(7999)
 1456 0636 9FE1      		ldi r25,hi8(7999)
 1457 0638 0197      	1:	sbiw r24,1
 1458 063a 01F4      		brne 1b
 1459 063c 00C0      		rjmp .
 1460 063e 0000      		nop
 1461               	.LVL107:
 1462               	.LBE311:
 1463               	.LBE310:
 460:ili9341gfx.c  **** _delay_ms(2);
 461:ili9341gfx.c  **** cursor_x=164;
 1464               		.loc 1 461 0
 1465 0640 F092 0000 		sts cursor_x+1,r15
 1466 0644 E092 0000 		sts cursor_x,r14
 462:ili9341gfx.c  **** backuplocationiactual();
 1467               		.loc 1 462 0
 1468 0648 0E94 0000 		call backuplocationiactual
 1469               	.LVL108:
 463:ili9341gfx.c  **** cursor_y=cursor_y+48;
 1470               		.loc 1 463 0
 1471 064c 8091 0000 		lds r24,cursor_y
 1472 0650 9091 0000 		lds r25,cursor_y+1
 1473 0654 C096      		adiw r24,48
 1474 0656 9093 0000 		sts cursor_y+1,r25
 1475 065a 8093 0000 		sts cursor_y,r24
 1476               	.LVL109:
 1477               	.LBB312:
 1478               	.LBB313:
 360:ili9341gfx.c  **** }
 1479               		.loc 1 360 0
 1480 065e D092 0000 		sts textsize,r13
 1481               	.LVL110:
 1482               	.LBE313:
 1483               	.LBE312:
 464:ili9341gfx.c  **** ili9341_settextsize(5);
 465:ili9341gfx.c  **** printf("00.00");
 1484               		.loc 1 465 0
 1485 0662 1F93      		push r17
 1486               	.LCFI48:
 1487               		.cfi_def_cfa_offset 28
 1488 0664 0F93      		push r16
 1489               	.LCFI49:
 1490               		.cfi_def_cfa_offset 29
 1491 0666 0E94 0000 		call printf
 1492               	.LVL111:
 1493               	.LBB314:
 1494               	.LBB315:
 1495               		.loc 2 187 0
 1496 066a 9FEF      		ldi r25,lo8(6399999)
 1497 066c 27EA      		ldi r18,hi8(6399999)
 1498 066e 81E6      		ldi r24,hlo8(6399999)
 1499 0670 9150      	1:	subi r25,1
 1500 0672 2040      		sbci r18,0
 1501 0674 8040      		sbci r24,0
 1502 0676 01F4      		brne 1b
 1503 0678 00C0      		rjmp .
 1504 067a 0000      		nop
 1505               	.LVL112:
 1506               	.LBE315:
 1507               	.LBE314:
 466:ili9341gfx.c  **** _delay_ms(2000);
 467:ili9341gfx.c  **** 
 468:ili9341gfx.c  **** }
 1508               		.loc 1 468 0
 1509 067c 8DB7      		in r24,__SP_L__
 1510 067e 9EB7      		in r25,__SP_H__
 1511 0680 4096      		adiw r24,16
 1512 0682 0FB6      		in __tmp_reg__,__SREG__
 1513 0684 F894      		cli
 1514 0686 9EBF      		out __SP_H__,r25
 1515 0688 0FBE      		out __SREG__,__tmp_reg__
 1516 068a 8DBF      		out __SP_L__,r24
 1517               	.LCFI50:
 1518               		.cfi_def_cfa_offset 13
 1519               	/* epilogue start */
 1520 068c DF91      		pop r29
 1521 068e CF91      		pop r28
 1522 0690 1F91      		pop r17
 1523 0692 0F91      		pop r16
 1524 0694 FF90      		pop r15
 1525 0696 EF90      		pop r14
 1526 0698 DF90      		pop r13
 1527 069a BF90      		pop r11
 1528 069c AF90      		pop r10
 1529 069e 9F90      		pop r9
 1530 06a0 8F90      		pop r8
 1531 06a2 0895      		ret
 1532               		.cfi_endproc
 1533               	.LFE18:
 1535               		.section	.progmem.data,"a",@progbits
 1538               	font:
 1539 0000 00        		.byte	0
 1540 0001 00        		.byte	0
 1541 0002 00        		.byte	0
 1542 0003 00        		.byte	0
 1543 0004 00        		.byte	0
 1544 0005 3E        		.byte	62
 1545 0006 5B        		.byte	91
 1546 0007 4F        		.byte	79
 1547 0008 5B        		.byte	91
 1548 0009 3E        		.byte	62
 1549 000a 3E        		.byte	62
 1550 000b 6B        		.byte	107
 1551 000c 4F        		.byte	79
 1552 000d 6B        		.byte	107
 1553 000e 3E        		.byte	62
 1554 000f 1C        		.byte	28
 1555 0010 3E        		.byte	62
 1556 0011 7C        		.byte	124
 1557 0012 3E        		.byte	62
 1558 0013 1C        		.byte	28
 1559 0014 18        		.byte	24
 1560 0015 3C        		.byte	60
 1561 0016 7E        		.byte	126
 1562 0017 3C        		.byte	60
 1563 0018 18        		.byte	24
 1564 0019 1C        		.byte	28
 1565 001a 57        		.byte	87
 1566 001b 7D        		.byte	125
 1567 001c 57        		.byte	87
 1568 001d 1C        		.byte	28
 1569 001e 1C        		.byte	28
 1570 001f 5E        		.byte	94
 1571 0020 7F        		.byte	127
 1572 0021 5E        		.byte	94
 1573 0022 1C        		.byte	28
 1574 0023 00        		.byte	0
 1575 0024 18        		.byte	24
 1576 0025 3C        		.byte	60
 1577 0026 18        		.byte	24
 1578 0027 00        		.byte	0
 1579 0028 FF        		.byte	-1
 1580 0029 E7        		.byte	-25
 1581 002a C3        		.byte	-61
 1582 002b E7        		.byte	-25
 1583 002c FF        		.byte	-1
 1584 002d 00        		.byte	0
 1585 002e 18        		.byte	24
 1586 002f 24        		.byte	36
 1587 0030 18        		.byte	24
 1588 0031 00        		.byte	0
 1589 0032 FF        		.byte	-1
 1590 0033 E7        		.byte	-25
 1591 0034 DB        		.byte	-37
 1592 0035 E7        		.byte	-25
 1593 0036 FF        		.byte	-1
 1594 0037 30        		.byte	48
 1595 0038 48        		.byte	72
 1596 0039 3A        		.byte	58
 1597 003a 06        		.byte	6
 1598 003b 0E        		.byte	14
 1599 003c 26        		.byte	38
 1600 003d 29        		.byte	41
 1601 003e 79        		.byte	121
 1602 003f 29        		.byte	41
 1603 0040 26        		.byte	38
 1604 0041 40        		.byte	64
 1605 0042 7F        		.byte	127
 1606 0043 05        		.byte	5
 1607 0044 05        		.byte	5
 1608 0045 07        		.byte	7
 1609 0046 40        		.byte	64
 1610 0047 7F        		.byte	127
 1611 0048 05        		.byte	5
 1612 0049 25        		.byte	37
 1613 004a 3F        		.byte	63
 1614 004b 5A        		.byte	90
 1615 004c 3C        		.byte	60
 1616 004d E7        		.byte	-25
 1617 004e 3C        		.byte	60
 1618 004f 5A        		.byte	90
 1619 0050 7F        		.byte	127
 1620 0051 3E        		.byte	62
 1621 0052 1C        		.byte	28
 1622 0053 1C        		.byte	28
 1623 0054 08        		.byte	8
 1624 0055 08        		.byte	8
 1625 0056 1C        		.byte	28
 1626 0057 1C        		.byte	28
 1627 0058 3E        		.byte	62
 1628 0059 7F        		.byte	127
 1629 005a 14        		.byte	20
 1630 005b 22        		.byte	34
 1631 005c 7F        		.byte	127
 1632 005d 22        		.byte	34
 1633 005e 14        		.byte	20
 1634 005f 5F        		.byte	95
 1635 0060 5F        		.byte	95
 1636 0061 00        		.byte	0
 1637 0062 5F        		.byte	95
 1638 0063 5F        		.byte	95
 1639 0064 06        		.byte	6
 1640 0065 09        		.byte	9
 1641 0066 7F        		.byte	127
 1642 0067 01        		.byte	1
 1643 0068 7F        		.byte	127
 1644 0069 00        		.byte	0
 1645 006a 66        		.byte	102
 1646 006b 89        		.byte	-119
 1647 006c 95        		.byte	-107
 1648 006d 6A        		.byte	106
 1649 006e 60        		.byte	96
 1650 006f 60        		.byte	96
 1651 0070 60        		.byte	96
 1652 0071 60        		.byte	96
 1653 0072 60        		.byte	96
 1654 0073 94        		.byte	-108
 1655 0074 A2        		.byte	-94
 1656 0075 FF        		.byte	-1
 1657 0076 A2        		.byte	-94
 1658 0077 94        		.byte	-108
 1659 0078 08        		.byte	8
 1660 0079 04        		.byte	4
 1661 007a 7E        		.byte	126
 1662 007b 04        		.byte	4
 1663 007c 08        		.byte	8
 1664 007d 10        		.byte	16
 1665 007e 20        		.byte	32
 1666 007f 7E        		.byte	126
 1667 0080 20        		.byte	32
 1668 0081 10        		.byte	16
 1669 0082 08        		.byte	8
 1670 0083 08        		.byte	8
 1671 0084 2A        		.byte	42
 1672 0085 1C        		.byte	28
 1673 0086 08        		.byte	8
 1674 0087 08        		.byte	8
 1675 0088 1C        		.byte	28
 1676 0089 2A        		.byte	42
 1677 008a 08        		.byte	8
 1678 008b 08        		.byte	8
 1679 008c 1E        		.byte	30
 1680 008d 10        		.byte	16
 1681 008e 10        		.byte	16
 1682 008f 10        		.byte	16
 1683 0090 10        		.byte	16
 1684 0091 0C        		.byte	12
 1685 0092 1E        		.byte	30
 1686 0093 0C        		.byte	12
 1687 0094 1E        		.byte	30
 1688 0095 0C        		.byte	12
 1689 0096 30        		.byte	48
 1690 0097 38        		.byte	56
 1691 0098 3E        		.byte	62
 1692 0099 38        		.byte	56
 1693 009a 30        		.byte	48
 1694 009b 06        		.byte	6
 1695 009c 0E        		.byte	14
 1696 009d 3E        		.byte	62
 1697 009e 0E        		.byte	14
 1698 009f 06        		.byte	6
 1699 00a0 00        		.byte	0
 1700 00a1 00        		.byte	0
 1701 00a2 00        		.byte	0
 1702 00a3 00        		.byte	0
 1703 00a4 00        		.byte	0
 1704 00a5 00        		.byte	0
 1705 00a6 00        		.byte	0
 1706 00a7 5F        		.byte	95
 1707 00a8 00        		.byte	0
 1708 00a9 00        		.byte	0
 1709 00aa 00        		.byte	0
 1710 00ab 07        		.byte	7
 1711 00ac 00        		.byte	0
 1712 00ad 07        		.byte	7
 1713 00ae 00        		.byte	0
 1714 00af 14        		.byte	20
 1715 00b0 7F        		.byte	127
 1716 00b1 14        		.byte	20
 1717 00b2 7F        		.byte	127
 1718 00b3 14        		.byte	20
 1719 00b4 24        		.byte	36
 1720 00b5 2A        		.byte	42
 1721 00b6 7F        		.byte	127
 1722 00b7 2A        		.byte	42
 1723 00b8 12        		.byte	18
 1724 00b9 23        		.byte	35
 1725 00ba 13        		.byte	19
 1726 00bb 08        		.byte	8
 1727 00bc 64        		.byte	100
 1728 00bd 62        		.byte	98
 1729 00be 36        		.byte	54
 1730 00bf 49        		.byte	73
 1731 00c0 56        		.byte	86
 1732 00c1 20        		.byte	32
 1733 00c2 50        		.byte	80
 1734 00c3 00        		.byte	0
 1735 00c4 08        		.byte	8
 1736 00c5 07        		.byte	7
 1737 00c6 03        		.byte	3
 1738 00c7 00        		.byte	0
 1739 00c8 00        		.byte	0
 1740 00c9 1C        		.byte	28
 1741 00ca 22        		.byte	34
 1742 00cb 41        		.byte	65
 1743 00cc 00        		.byte	0
 1744 00cd 00        		.byte	0
 1745 00ce 41        		.byte	65
 1746 00cf 22        		.byte	34
 1747 00d0 1C        		.byte	28
 1748 00d1 00        		.byte	0
 1749 00d2 2A        		.byte	42
 1750 00d3 1C        		.byte	28
 1751 00d4 7F        		.byte	127
 1752 00d5 1C        		.byte	28
 1753 00d6 2A        		.byte	42
 1754 00d7 08        		.byte	8
 1755 00d8 08        		.byte	8
 1756 00d9 3E        		.byte	62
 1757 00da 08        		.byte	8
 1758 00db 08        		.byte	8
 1759 00dc 00        		.byte	0
 1760 00dd 80        		.byte	-128
 1761 00de 70        		.byte	112
 1762 00df 30        		.byte	48
 1763 00e0 00        		.byte	0
 1764 00e1 08        		.byte	8
 1765 00e2 08        		.byte	8
 1766 00e3 08        		.byte	8
 1767 00e4 08        		.byte	8
 1768 00e5 08        		.byte	8
 1769 00e6 00        		.byte	0
 1770 00e7 00        		.byte	0
 1771 00e8 60        		.byte	96
 1772 00e9 60        		.byte	96
 1773 00ea 00        		.byte	0
 1774 00eb 20        		.byte	32
 1775 00ec 10        		.byte	16
 1776 00ed 08        		.byte	8
 1777 00ee 04        		.byte	4
 1778 00ef 02        		.byte	2
 1779 00f0 3E        		.byte	62
 1780 00f1 51        		.byte	81
 1781 00f2 49        		.byte	73
 1782 00f3 45        		.byte	69
 1783 00f4 3E        		.byte	62
 1784 00f5 00        		.byte	0
 1785 00f6 42        		.byte	66
 1786 00f7 7F        		.byte	127
 1787 00f8 40        		.byte	64
 1788 00f9 00        		.byte	0
 1789 00fa 72        		.byte	114
 1790 00fb 49        		.byte	73
 1791 00fc 49        		.byte	73
 1792 00fd 49        		.byte	73
 1793 00fe 46        		.byte	70
 1794 00ff 21        		.byte	33
 1795 0100 41        		.byte	65
 1796 0101 49        		.byte	73
 1797 0102 4D        		.byte	77
 1798 0103 33        		.byte	51
 1799 0104 18        		.byte	24
 1800 0105 14        		.byte	20
 1801 0106 12        		.byte	18
 1802 0107 7F        		.byte	127
 1803 0108 10        		.byte	16
 1804 0109 27        		.byte	39
 1805 010a 45        		.byte	69
 1806 010b 45        		.byte	69
 1807 010c 45        		.byte	69
 1808 010d 39        		.byte	57
 1809 010e 3C        		.byte	60
 1810 010f 4A        		.byte	74
 1811 0110 49        		.byte	73
 1812 0111 49        		.byte	73
 1813 0112 31        		.byte	49
 1814 0113 41        		.byte	65
 1815 0114 21        		.byte	33
 1816 0115 11        		.byte	17
 1817 0116 09        		.byte	9
 1818 0117 07        		.byte	7
 1819 0118 36        		.byte	54
 1820 0119 49        		.byte	73
 1821 011a 49        		.byte	73
 1822 011b 49        		.byte	73
 1823 011c 36        		.byte	54
 1824 011d 46        		.byte	70
 1825 011e 49        		.byte	73
 1826 011f 49        		.byte	73
 1827 0120 29        		.byte	41
 1828 0121 1E        		.byte	30
 1829 0122 00        		.byte	0
 1830 0123 00        		.byte	0
 1831 0124 14        		.byte	20
 1832 0125 00        		.byte	0
 1833 0126 00        		.byte	0
 1834 0127 00        		.byte	0
 1835 0128 40        		.byte	64
 1836 0129 34        		.byte	52
 1837 012a 00        		.byte	0
 1838 012b 00        		.byte	0
 1839 012c 00        		.byte	0
 1840 012d 08        		.byte	8
 1841 012e 14        		.byte	20
 1842 012f 22        		.byte	34
 1843 0130 41        		.byte	65
 1844 0131 14        		.byte	20
 1845 0132 14        		.byte	20
 1846 0133 14        		.byte	20
 1847 0134 14        		.byte	20
 1848 0135 14        		.byte	20
 1849 0136 00        		.byte	0
 1850 0137 41        		.byte	65
 1851 0138 22        		.byte	34
 1852 0139 14        		.byte	20
 1853 013a 08        		.byte	8
 1854 013b 02        		.byte	2
 1855 013c 01        		.byte	1
 1856 013d 59        		.byte	89
 1857 013e 09        		.byte	9
 1858 013f 06        		.byte	6
 1859 0140 3E        		.byte	62
 1860 0141 41        		.byte	65
 1861 0142 5D        		.byte	93
 1862 0143 59        		.byte	89
 1863 0144 4E        		.byte	78
 1864 0145 7C        		.byte	124
 1865 0146 12        		.byte	18
 1866 0147 11        		.byte	17
 1867 0148 12        		.byte	18
 1868 0149 7C        		.byte	124
 1869 014a 7F        		.byte	127
 1870 014b 49        		.byte	73
 1871 014c 49        		.byte	73
 1872 014d 49        		.byte	73
 1873 014e 36        		.byte	54
 1874 014f 3E        		.byte	62
 1875 0150 41        		.byte	65
 1876 0151 41        		.byte	65
 1877 0152 41        		.byte	65
 1878 0153 22        		.byte	34
 1879 0154 7F        		.byte	127
 1880 0155 41        		.byte	65
 1881 0156 41        		.byte	65
 1882 0157 41        		.byte	65
 1883 0158 3E        		.byte	62
 1884 0159 7F        		.byte	127
 1885 015a 49        		.byte	73
 1886 015b 49        		.byte	73
 1887 015c 49        		.byte	73
 1888 015d 41        		.byte	65
 1889 015e 7F        		.byte	127
 1890 015f 09        		.byte	9
 1891 0160 09        		.byte	9
 1892 0161 09        		.byte	9
 1893 0162 01        		.byte	1
 1894 0163 3E        		.byte	62
 1895 0164 41        		.byte	65
 1896 0165 41        		.byte	65
 1897 0166 51        		.byte	81
 1898 0167 73        		.byte	115
 1899 0168 7F        		.byte	127
 1900 0169 08        		.byte	8
 1901 016a 08        		.byte	8
 1902 016b 08        		.byte	8
 1903 016c 7F        		.byte	127
 1904 016d 00        		.byte	0
 1905 016e 41        		.byte	65
 1906 016f 7F        		.byte	127
 1907 0170 41        		.byte	65
 1908 0171 00        		.byte	0
 1909 0172 20        		.byte	32
 1910 0173 40        		.byte	64
 1911 0174 41        		.byte	65
 1912 0175 3F        		.byte	63
 1913 0176 01        		.byte	1
 1914 0177 7F        		.byte	127
 1915 0178 08        		.byte	8
 1916 0179 14        		.byte	20
 1917 017a 22        		.byte	34
 1918 017b 41        		.byte	65
 1919 017c 7F        		.byte	127
 1920 017d 40        		.byte	64
 1921 017e 40        		.byte	64
 1922 017f 40        		.byte	64
 1923 0180 40        		.byte	64
 1924 0181 7F        		.byte	127
 1925 0182 02        		.byte	2
 1926 0183 1C        		.byte	28
 1927 0184 02        		.byte	2
 1928 0185 7F        		.byte	127
 1929 0186 7F        		.byte	127
 1930 0187 04        		.byte	4
 1931 0188 08        		.byte	8
 1932 0189 10        		.byte	16
 1933 018a 7F        		.byte	127
 1934 018b 3E        		.byte	62
 1935 018c 41        		.byte	65
 1936 018d 41        		.byte	65
 1937 018e 41        		.byte	65
 1938 018f 3E        		.byte	62
 1939 0190 7F        		.byte	127
 1940 0191 09        		.byte	9
 1941 0192 09        		.byte	9
 1942 0193 09        		.byte	9
 1943 0194 06        		.byte	6
 1944 0195 3E        		.byte	62
 1945 0196 41        		.byte	65
 1946 0197 51        		.byte	81
 1947 0198 21        		.byte	33
 1948 0199 5E        		.byte	94
 1949 019a 7F        		.byte	127
 1950 019b 09        		.byte	9
 1951 019c 19        		.byte	25
 1952 019d 29        		.byte	41
 1953 019e 46        		.byte	70
 1954 019f 26        		.byte	38
 1955 01a0 49        		.byte	73
 1956 01a1 49        		.byte	73
 1957 01a2 49        		.byte	73
 1958 01a3 32        		.byte	50
 1959 01a4 03        		.byte	3
 1960 01a5 01        		.byte	1
 1961 01a6 7F        		.byte	127
 1962 01a7 01        		.byte	1
 1963 01a8 03        		.byte	3
 1964 01a9 3F        		.byte	63
 1965 01aa 40        		.byte	64
 1966 01ab 40        		.byte	64
 1967 01ac 40        		.byte	64
 1968 01ad 3F        		.byte	63
 1969 01ae 1F        		.byte	31
 1970 01af 20        		.byte	32
 1971 01b0 40        		.byte	64
 1972 01b1 20        		.byte	32
 1973 01b2 1F        		.byte	31
 1974 01b3 3F        		.byte	63
 1975 01b4 40        		.byte	64
 1976 01b5 38        		.byte	56
 1977 01b6 40        		.byte	64
 1978 01b7 3F        		.byte	63
 1979 01b8 63        		.byte	99
 1980 01b9 14        		.byte	20
 1981 01ba 08        		.byte	8
 1982 01bb 14        		.byte	20
 1983 01bc 63        		.byte	99
 1984 01bd 03        		.byte	3
 1985 01be 04        		.byte	4
 1986 01bf 78        		.byte	120
 1987 01c0 04        		.byte	4
 1988 01c1 03        		.byte	3
 1989 01c2 61        		.byte	97
 1990 01c3 59        		.byte	89
 1991 01c4 49        		.byte	73
 1992 01c5 4D        		.byte	77
 1993 01c6 43        		.byte	67
 1994 01c7 00        		.byte	0
 1995 01c8 7F        		.byte	127
 1996 01c9 41        		.byte	65
 1997 01ca 41        		.byte	65
 1998 01cb 41        		.byte	65
 1999 01cc 02        		.byte	2
 2000 01cd 04        		.byte	4
 2001 01ce 08        		.byte	8
 2002 01cf 10        		.byte	16
 2003 01d0 20        		.byte	32
 2004 01d1 00        		.byte	0
 2005 01d2 41        		.byte	65
 2006 01d3 41        		.byte	65
 2007 01d4 41        		.byte	65
 2008 01d5 7F        		.byte	127
 2009 01d6 04        		.byte	4
 2010 01d7 02        		.byte	2
 2011 01d8 01        		.byte	1
 2012 01d9 02        		.byte	2
 2013 01da 04        		.byte	4
 2014 01db 40        		.byte	64
 2015 01dc 40        		.byte	64
 2016 01dd 40        		.byte	64
 2017 01de 40        		.byte	64
 2018 01df 40        		.byte	64
 2019 01e0 00        		.byte	0
 2020 01e1 03        		.byte	3
 2021 01e2 07        		.byte	7
 2022 01e3 08        		.byte	8
 2023 01e4 00        		.byte	0
 2024 01e5 20        		.byte	32
 2025 01e6 54        		.byte	84
 2026 01e7 54        		.byte	84
 2027 01e8 78        		.byte	120
 2028 01e9 40        		.byte	64
 2029 01ea 7F        		.byte	127
 2030 01eb 28        		.byte	40
 2031 01ec 44        		.byte	68
 2032 01ed 44        		.byte	68
 2033 01ee 38        		.byte	56
 2034 01ef 38        		.byte	56
 2035 01f0 44        		.byte	68
 2036 01f1 44        		.byte	68
 2037 01f2 44        		.byte	68
 2038 01f3 28        		.byte	40
 2039 01f4 38        		.byte	56
 2040 01f5 44        		.byte	68
 2041 01f6 44        		.byte	68
 2042 01f7 28        		.byte	40
 2043 01f8 7F        		.byte	127
 2044 01f9 38        		.byte	56
 2045 01fa 54        		.byte	84
 2046 01fb 54        		.byte	84
 2047 01fc 54        		.byte	84
 2048 01fd 18        		.byte	24
 2049 01fe 00        		.byte	0
 2050 01ff 08        		.byte	8
 2051 0200 7E        		.byte	126
 2052 0201 09        		.byte	9
 2053 0202 02        		.byte	2
 2054 0203 18        		.byte	24
 2055 0204 A4        		.byte	-92
 2056 0205 A4        		.byte	-92
 2057 0206 9C        		.byte	-100
 2058 0207 78        		.byte	120
 2059 0208 7F        		.byte	127
 2060 0209 08        		.byte	8
 2061 020a 04        		.byte	4
 2062 020b 04        		.byte	4
 2063 020c 78        		.byte	120
 2064 020d 00        		.byte	0
 2065 020e 44        		.byte	68
 2066 020f 7D        		.byte	125
 2067 0210 40        		.byte	64
 2068 0211 00        		.byte	0
 2069 0212 20        		.byte	32
 2070 0213 40        		.byte	64
 2071 0214 40        		.byte	64
 2072 0215 3D        		.byte	61
 2073 0216 00        		.byte	0
 2074 0217 7F        		.byte	127
 2075 0218 10        		.byte	16
 2076 0219 28        		.byte	40
 2077 021a 44        		.byte	68
 2078 021b 00        		.byte	0
 2079 021c 00        		.byte	0
 2080 021d 41        		.byte	65
 2081 021e 7F        		.byte	127
 2082 021f 40        		.byte	64
 2083 0220 00        		.byte	0
 2084 0221 7C        		.byte	124
 2085 0222 04        		.byte	4
 2086 0223 78        		.byte	120
 2087 0224 04        		.byte	4
 2088 0225 78        		.byte	120
 2089 0226 7C        		.byte	124
 2090 0227 08        		.byte	8
 2091 0228 04        		.byte	4
 2092 0229 04        		.byte	4
 2093 022a 78        		.byte	120
 2094 022b 38        		.byte	56
 2095 022c 44        		.byte	68
 2096 022d 44        		.byte	68
 2097 022e 44        		.byte	68
 2098 022f 38        		.byte	56
 2099 0230 FC        		.byte	-4
 2100 0231 18        		.byte	24
 2101 0232 24        		.byte	36
 2102 0233 24        		.byte	36
 2103 0234 18        		.byte	24
 2104 0235 18        		.byte	24
 2105 0236 24        		.byte	36
 2106 0237 24        		.byte	36
 2107 0238 18        		.byte	24
 2108 0239 FC        		.byte	-4
 2109 023a 7C        		.byte	124
 2110 023b 08        		.byte	8
 2111 023c 04        		.byte	4
 2112 023d 04        		.byte	4
 2113 023e 08        		.byte	8
 2114 023f 48        		.byte	72
 2115 0240 54        		.byte	84
 2116 0241 54        		.byte	84
 2117 0242 54        		.byte	84
 2118 0243 24        		.byte	36
 2119 0244 04        		.byte	4
 2120 0245 04        		.byte	4
 2121 0246 3F        		.byte	63
 2122 0247 44        		.byte	68
 2123 0248 24        		.byte	36
 2124 0249 3C        		.byte	60
 2125 024a 40        		.byte	64
 2126 024b 40        		.byte	64
 2127 024c 20        		.byte	32
 2128 024d 7C        		.byte	124
 2129 024e 1C        		.byte	28
 2130 024f 20        		.byte	32
 2131 0250 40        		.byte	64
 2132 0251 20        		.byte	32
 2133 0252 1C        		.byte	28
 2134 0253 3C        		.byte	60
 2135 0254 40        		.byte	64
 2136 0255 30        		.byte	48
 2137 0256 40        		.byte	64
 2138 0257 3C        		.byte	60
 2139 0258 44        		.byte	68
 2140 0259 28        		.byte	40
 2141 025a 10        		.byte	16
 2142 025b 28        		.byte	40
 2143 025c 44        		.byte	68
 2144 025d 4C        		.byte	76
 2145 025e 90        		.byte	-112
 2146 025f 90        		.byte	-112
 2147 0260 90        		.byte	-112
 2148 0261 7C        		.byte	124
 2149 0262 44        		.byte	68
 2150 0263 64        		.byte	100
 2151 0264 54        		.byte	84
 2152 0265 4C        		.byte	76
 2153 0266 44        		.byte	68
 2154 0267 00        		.byte	0
 2155 0268 08        		.byte	8
 2156 0269 36        		.byte	54
 2157 026a 41        		.byte	65
 2158 026b 00        		.byte	0
 2159 026c 00        		.byte	0
 2160 026d 00        		.byte	0
 2161 026e 77        		.byte	119
 2162 026f 00        		.byte	0
 2163 0270 00        		.byte	0
 2164 0271 00        		.byte	0
 2165 0272 41        		.byte	65
 2166 0273 36        		.byte	54
 2167 0274 08        		.byte	8
 2168 0275 00        		.byte	0
 2169 0276 02        		.byte	2
 2170 0277 01        		.byte	1
 2171 0278 02        		.byte	2
 2172 0279 04        		.byte	4
 2173 027a 02        		.byte	2
 2174 027b 3C        		.byte	60
 2175 027c 26        		.byte	38
 2176 027d 23        		.byte	35
 2177 027e 26        		.byte	38
 2178 027f 3C        		.byte	60
 2179 0280 1E        		.byte	30
 2180 0281 A1        		.byte	-95
 2181 0282 A1        		.byte	-95
 2182 0283 61        		.byte	97
 2183 0284 12        		.byte	18
 2184 0285 3A        		.byte	58
 2185 0286 40        		.byte	64
 2186 0287 40        		.byte	64
 2187 0288 20        		.byte	32
 2188 0289 7A        		.byte	122
 2189 028a 38        		.byte	56
 2190 028b 54        		.byte	84
 2191 028c 54        		.byte	84
 2192 028d 55        		.byte	85
 2193 028e 59        		.byte	89
 2194 028f 21        		.byte	33
 2195 0290 55        		.byte	85
 2196 0291 55        		.byte	85
 2197 0292 79        		.byte	121
 2198 0293 41        		.byte	65
 2199 0294 22        		.byte	34
 2200 0295 54        		.byte	84
 2201 0296 54        		.byte	84
 2202 0297 78        		.byte	120
 2203 0298 42        		.byte	66
 2204 0299 21        		.byte	33
 2205 029a 55        		.byte	85
 2206 029b 54        		.byte	84
 2207 029c 78        		.byte	120
 2208 029d 40        		.byte	64
 2209 029e 20        		.byte	32
 2210 029f 54        		.byte	84
 2211 02a0 55        		.byte	85
 2212 02a1 79        		.byte	121
 2213 02a2 40        		.byte	64
 2214 02a3 0C        		.byte	12
 2215 02a4 1E        		.byte	30
 2216 02a5 52        		.byte	82
 2217 02a6 72        		.byte	114
 2218 02a7 12        		.byte	18
 2219 02a8 39        		.byte	57
 2220 02a9 55        		.byte	85
 2221 02aa 55        		.byte	85
 2222 02ab 55        		.byte	85
 2223 02ac 59        		.byte	89
 2224 02ad 39        		.byte	57
 2225 02ae 54        		.byte	84
 2226 02af 54        		.byte	84
 2227 02b0 54        		.byte	84
 2228 02b1 59        		.byte	89
 2229 02b2 39        		.byte	57
 2230 02b3 55        		.byte	85
 2231 02b4 54        		.byte	84
 2232 02b5 54        		.byte	84
 2233 02b6 58        		.byte	88
 2234 02b7 00        		.byte	0
 2235 02b8 00        		.byte	0
 2236 02b9 45        		.byte	69
 2237 02ba 7C        		.byte	124
 2238 02bb 41        		.byte	65
 2239 02bc 00        		.byte	0
 2240 02bd 02        		.byte	2
 2241 02be 45        		.byte	69
 2242 02bf 7D        		.byte	125
 2243 02c0 42        		.byte	66
 2244 02c1 00        		.byte	0
 2245 02c2 01        		.byte	1
 2246 02c3 45        		.byte	69
 2247 02c4 7C        		.byte	124
 2248 02c5 40        		.byte	64
 2249 02c6 7D        		.byte	125
 2250 02c7 12        		.byte	18
 2251 02c8 11        		.byte	17
 2252 02c9 12        		.byte	18
 2253 02ca 7D        		.byte	125
 2254 02cb F0        		.byte	-16
 2255 02cc 28        		.byte	40
 2256 02cd 25        		.byte	37
 2257 02ce 28        		.byte	40
 2258 02cf F0        		.byte	-16
 2259 02d0 7C        		.byte	124
 2260 02d1 54        		.byte	84
 2261 02d2 55        		.byte	85
 2262 02d3 45        		.byte	69
 2263 02d4 00        		.byte	0
 2264 02d5 20        		.byte	32
 2265 02d6 54        		.byte	84
 2266 02d7 54        		.byte	84
 2267 02d8 7C        		.byte	124
 2268 02d9 54        		.byte	84
 2269 02da 7C        		.byte	124
 2270 02db 0A        		.byte	10
 2271 02dc 09        		.byte	9
 2272 02dd 7F        		.byte	127
 2273 02de 49        		.byte	73
 2274 02df 32        		.byte	50
 2275 02e0 49        		.byte	73
 2276 02e1 49        		.byte	73
 2277 02e2 49        		.byte	73
 2278 02e3 32        		.byte	50
 2279 02e4 3A        		.byte	58
 2280 02e5 44        		.byte	68
 2281 02e6 44        		.byte	68
 2282 02e7 44        		.byte	68
 2283 02e8 3A        		.byte	58
 2284 02e9 32        		.byte	50
 2285 02ea 4A        		.byte	74
 2286 02eb 48        		.byte	72
 2287 02ec 48        		.byte	72
 2288 02ed 30        		.byte	48
 2289 02ee 3A        		.byte	58
 2290 02ef 41        		.byte	65
 2291 02f0 41        		.byte	65
 2292 02f1 21        		.byte	33
 2293 02f2 7A        		.byte	122
 2294 02f3 3A        		.byte	58
 2295 02f4 42        		.byte	66
 2296 02f5 40        		.byte	64
 2297 02f6 20        		.byte	32
 2298 02f7 78        		.byte	120
 2299 02f8 00        		.byte	0
 2300 02f9 9D        		.byte	-99
 2301 02fa A0        		.byte	-96
 2302 02fb A0        		.byte	-96
 2303 02fc 7D        		.byte	125
 2304 02fd 3D        		.byte	61
 2305 02fe 42        		.byte	66
 2306 02ff 42        		.byte	66
 2307 0300 42        		.byte	66
 2308 0301 3D        		.byte	61
 2309 0302 3D        		.byte	61
 2310 0303 40        		.byte	64
 2311 0304 40        		.byte	64
 2312 0305 40        		.byte	64
 2313 0306 3D        		.byte	61
 2314 0307 3C        		.byte	60
 2315 0308 24        		.byte	36
 2316 0309 FF        		.byte	-1
 2317 030a 24        		.byte	36
 2318 030b 24        		.byte	36
 2319 030c 48        		.byte	72
 2320 030d 7E        		.byte	126
 2321 030e 49        		.byte	73
 2322 030f 43        		.byte	67
 2323 0310 66        		.byte	102
 2324 0311 2B        		.byte	43
 2325 0312 2F        		.byte	47
 2326 0313 FC        		.byte	-4
 2327 0314 2F        		.byte	47
 2328 0315 2B        		.byte	43
 2329 0316 FF        		.byte	-1
 2330 0317 09        		.byte	9
 2331 0318 29        		.byte	41
 2332 0319 F6        		.byte	-10
 2333 031a 20        		.byte	32
 2334 031b C0        		.byte	-64
 2335 031c 88        		.byte	-120
 2336 031d 7E        		.byte	126
 2337 031e 09        		.byte	9
 2338 031f 03        		.byte	3
 2339 0320 20        		.byte	32
 2340 0321 54        		.byte	84
 2341 0322 54        		.byte	84
 2342 0323 79        		.byte	121
 2343 0324 41        		.byte	65
 2344 0325 00        		.byte	0
 2345 0326 00        		.byte	0
 2346 0327 44        		.byte	68
 2347 0328 7D        		.byte	125
 2348 0329 41        		.byte	65
 2349 032a 30        		.byte	48
 2350 032b 48        		.byte	72
 2351 032c 48        		.byte	72
 2352 032d 4A        		.byte	74
 2353 032e 32        		.byte	50
 2354 032f 38        		.byte	56
 2355 0330 40        		.byte	64
 2356 0331 40        		.byte	64
 2357 0332 22        		.byte	34
 2358 0333 7A        		.byte	122
 2359 0334 00        		.byte	0
 2360 0335 7A        		.byte	122
 2361 0336 0A        		.byte	10
 2362 0337 0A        		.byte	10
 2363 0338 72        		.byte	114
 2364 0339 7D        		.byte	125
 2365 033a 0D        		.byte	13
 2366 033b 19        		.byte	25
 2367 033c 31        		.byte	49
 2368 033d 7D        		.byte	125
 2369 033e 26        		.byte	38
 2370 033f 29        		.byte	41
 2371 0340 29        		.byte	41
 2372 0341 2F        		.byte	47
 2373 0342 28        		.byte	40
 2374 0343 26        		.byte	38
 2375 0344 29        		.byte	41
 2376 0345 29        		.byte	41
 2377 0346 29        		.byte	41
 2378 0347 26        		.byte	38
 2379 0348 30        		.byte	48
 2380 0349 48        		.byte	72
 2381 034a 4D        		.byte	77
 2382 034b 40        		.byte	64
 2383 034c 20        		.byte	32
 2384 034d 38        		.byte	56
 2385 034e 08        		.byte	8
 2386 034f 08        		.byte	8
 2387 0350 08        		.byte	8
 2388 0351 08        		.byte	8
 2389 0352 08        		.byte	8
 2390 0353 08        		.byte	8
 2391 0354 08        		.byte	8
 2392 0355 08        		.byte	8
 2393 0356 38        		.byte	56
 2394 0357 2F        		.byte	47
 2395 0358 10        		.byte	16
 2396 0359 C8        		.byte	-56
 2397 035a AC        		.byte	-84
 2398 035b BA        		.byte	-70
 2399 035c 2F        		.byte	47
 2400 035d 10        		.byte	16
 2401 035e 28        		.byte	40
 2402 035f 34        		.byte	52
 2403 0360 FA        		.byte	-6
 2404 0361 00        		.byte	0
 2405 0362 00        		.byte	0
 2406 0363 7B        		.byte	123
 2407 0364 00        		.byte	0
 2408 0365 00        		.byte	0
 2409 0366 08        		.byte	8
 2410 0367 14        		.byte	20
 2411 0368 2A        		.byte	42
 2412 0369 14        		.byte	20
 2413 036a 22        		.byte	34
 2414 036b 22        		.byte	34
 2415 036c 14        		.byte	20
 2416 036d 2A        		.byte	42
 2417 036e 14        		.byte	20
 2418 036f 08        		.byte	8
 2419 0370 AA        		.byte	-86
 2420 0371 00        		.byte	0
 2421 0372 55        		.byte	85
 2422 0373 00        		.byte	0
 2423 0374 AA        		.byte	-86
 2424 0375 AA        		.byte	-86
 2425 0376 55        		.byte	85
 2426 0377 AA        		.byte	-86
 2427 0378 55        		.byte	85
 2428 0379 AA        		.byte	-86
 2429 037a 00        		.byte	0
 2430 037b 00        		.byte	0
 2431 037c 00        		.byte	0
 2432 037d FF        		.byte	-1
 2433 037e 00        		.byte	0
 2434 037f 10        		.byte	16
 2435 0380 10        		.byte	16
 2436 0381 10        		.byte	16
 2437 0382 FF        		.byte	-1
 2438 0383 00        		.byte	0
 2439 0384 14        		.byte	20
 2440 0385 14        		.byte	20
 2441 0386 14        		.byte	20
 2442 0387 FF        		.byte	-1
 2443 0388 00        		.byte	0
 2444 0389 10        		.byte	16
 2445 038a 10        		.byte	16
 2446 038b FF        		.byte	-1
 2447 038c 00        		.byte	0
 2448 038d FF        		.byte	-1
 2449 038e 10        		.byte	16
 2450 038f 10        		.byte	16
 2451 0390 F0        		.byte	-16
 2452 0391 10        		.byte	16
 2453 0392 F0        		.byte	-16
 2454 0393 14        		.byte	20
 2455 0394 14        		.byte	20
 2456 0395 14        		.byte	20
 2457 0396 FC        		.byte	-4
 2458 0397 00        		.byte	0
 2459 0398 14        		.byte	20
 2460 0399 14        		.byte	20
 2461 039a F7        		.byte	-9
 2462 039b 00        		.byte	0
 2463 039c FF        		.byte	-1
 2464 039d 00        		.byte	0
 2465 039e 00        		.byte	0
 2466 039f FF        		.byte	-1
 2467 03a0 00        		.byte	0
 2468 03a1 FF        		.byte	-1
 2469 03a2 14        		.byte	20
 2470 03a3 14        		.byte	20
 2471 03a4 F4        		.byte	-12
 2472 03a5 04        		.byte	4
 2473 03a6 FC        		.byte	-4
 2474 03a7 14        		.byte	20
 2475 03a8 14        		.byte	20
 2476 03a9 17        		.byte	23
 2477 03aa 10        		.byte	16
 2478 03ab 1F        		.byte	31
 2479 03ac 10        		.byte	16
 2480 03ad 10        		.byte	16
 2481 03ae 1F        		.byte	31
 2482 03af 10        		.byte	16
 2483 03b0 1F        		.byte	31
 2484 03b1 14        		.byte	20
 2485 03b2 14        		.byte	20
 2486 03b3 14        		.byte	20
 2487 03b4 1F        		.byte	31
 2488 03b5 00        		.byte	0
 2489 03b6 10        		.byte	16
 2490 03b7 10        		.byte	16
 2491 03b8 10        		.byte	16
 2492 03b9 F0        		.byte	-16
 2493 03ba 00        		.byte	0
 2494 03bb 00        		.byte	0
 2495 03bc 00        		.byte	0
 2496 03bd 00        		.byte	0
 2497 03be 1F        		.byte	31
 2498 03bf 10        		.byte	16
 2499 03c0 10        		.byte	16
 2500 03c1 10        		.byte	16
 2501 03c2 10        		.byte	16
 2502 03c3 1F        		.byte	31
 2503 03c4 10        		.byte	16
 2504 03c5 10        		.byte	16
 2505 03c6 10        		.byte	16
 2506 03c7 10        		.byte	16
 2507 03c8 F0        		.byte	-16
 2508 03c9 10        		.byte	16
 2509 03ca 00        		.byte	0
 2510 03cb 00        		.byte	0
 2511 03cc 00        		.byte	0
 2512 03cd FF        		.byte	-1
 2513 03ce 10        		.byte	16
 2514 03cf 10        		.byte	16
 2515 03d0 10        		.byte	16
 2516 03d1 10        		.byte	16
 2517 03d2 10        		.byte	16
 2518 03d3 10        		.byte	16
 2519 03d4 10        		.byte	16
 2520 03d5 10        		.byte	16
 2521 03d6 10        		.byte	16
 2522 03d7 FF        		.byte	-1
 2523 03d8 10        		.byte	16
 2524 03d9 00        		.byte	0
 2525 03da 00        		.byte	0
 2526 03db 00        		.byte	0
 2527 03dc FF        		.byte	-1
 2528 03dd 14        		.byte	20
 2529 03de 00        		.byte	0
 2530 03df 00        		.byte	0
 2531 03e0 FF        		.byte	-1
 2532 03e1 00        		.byte	0
 2533 03e2 FF        		.byte	-1
 2534 03e3 00        		.byte	0
 2535 03e4 00        		.byte	0
 2536 03e5 1F        		.byte	31
 2537 03e6 10        		.byte	16
 2538 03e7 17        		.byte	23
 2539 03e8 00        		.byte	0
 2540 03e9 00        		.byte	0
 2541 03ea FC        		.byte	-4
 2542 03eb 04        		.byte	4
 2543 03ec F4        		.byte	-12
 2544 03ed 14        		.byte	20
 2545 03ee 14        		.byte	20
 2546 03ef 17        		.byte	23
 2547 03f0 10        		.byte	16
 2548 03f1 17        		.byte	23
 2549 03f2 14        		.byte	20
 2550 03f3 14        		.byte	20
 2551 03f4 F4        		.byte	-12
 2552 03f5 04        		.byte	4
 2553 03f6 F4        		.byte	-12
 2554 03f7 00        		.byte	0
 2555 03f8 00        		.byte	0
 2556 03f9 FF        		.byte	-1
 2557 03fa 00        		.byte	0
 2558 03fb F7        		.byte	-9
 2559 03fc 14        		.byte	20
 2560 03fd 14        		.byte	20
 2561 03fe 14        		.byte	20
 2562 03ff 14        		.byte	20
 2563 0400 14        		.byte	20
 2564 0401 14        		.byte	20
 2565 0402 14        		.byte	20
 2566 0403 F7        		.byte	-9
 2567 0404 00        		.byte	0
 2568 0405 F7        		.byte	-9
 2569 0406 14        		.byte	20
 2570 0407 14        		.byte	20
 2571 0408 14        		.byte	20
 2572 0409 17        		.byte	23
 2573 040a 14        		.byte	20
 2574 040b 10        		.byte	16
 2575 040c 10        		.byte	16
 2576 040d 1F        		.byte	31
 2577 040e 10        		.byte	16
 2578 040f 1F        		.byte	31
 2579 0410 14        		.byte	20
 2580 0411 14        		.byte	20
 2581 0412 14        		.byte	20
 2582 0413 F4        		.byte	-12
 2583 0414 14        		.byte	20
 2584 0415 10        		.byte	16
 2585 0416 10        		.byte	16
 2586 0417 F0        		.byte	-16
 2587 0418 10        		.byte	16
 2588 0419 F0        		.byte	-16
 2589 041a 00        		.byte	0
 2590 041b 00        		.byte	0
 2591 041c 1F        		.byte	31
 2592 041d 10        		.byte	16
 2593 041e 1F        		.byte	31
 2594 041f 00        		.byte	0
 2595 0420 00        		.byte	0
 2596 0421 00        		.byte	0
 2597 0422 1F        		.byte	31
 2598 0423 14        		.byte	20
 2599 0424 00        		.byte	0
 2600 0425 00        		.byte	0
 2601 0426 00        		.byte	0
 2602 0427 FC        		.byte	-4
 2603 0428 14        		.byte	20
 2604 0429 00        		.byte	0
 2605 042a 00        		.byte	0
 2606 042b F0        		.byte	-16
 2607 042c 10        		.byte	16
 2608 042d F0        		.byte	-16
 2609 042e 10        		.byte	16
 2610 042f 10        		.byte	16
 2611 0430 FF        		.byte	-1
 2612 0431 10        		.byte	16
 2613 0432 FF        		.byte	-1
 2614 0433 14        		.byte	20
 2615 0434 14        		.byte	20
 2616 0435 14        		.byte	20
 2617 0436 FF        		.byte	-1
 2618 0437 14        		.byte	20
 2619 0438 10        		.byte	16
 2620 0439 10        		.byte	16
 2621 043a 10        		.byte	16
 2622 043b 1F        		.byte	31
 2623 043c 00        		.byte	0
 2624 043d 00        		.byte	0
 2625 043e 00        		.byte	0
 2626 043f 00        		.byte	0
 2627 0440 F0        		.byte	-16
 2628 0441 10        		.byte	16
 2629 0442 FF        		.byte	-1
 2630 0443 FF        		.byte	-1
 2631 0444 FF        		.byte	-1
 2632 0445 FF        		.byte	-1
 2633 0446 FF        		.byte	-1
 2634 0447 F0        		.byte	-16
 2635 0448 F0        		.byte	-16
 2636 0449 F0        		.byte	-16
 2637 044a F0        		.byte	-16
 2638 044b F0        		.byte	-16
 2639 044c FF        		.byte	-1
 2640 044d FF        		.byte	-1
 2641 044e FF        		.byte	-1
 2642 044f 00        		.byte	0
 2643 0450 00        		.byte	0
 2644 0451 00        		.byte	0
 2645 0452 00        		.byte	0
 2646 0453 00        		.byte	0
 2647 0454 FF        		.byte	-1
 2648 0455 FF        		.byte	-1
 2649 0456 0F        		.byte	15
 2650 0457 0F        		.byte	15
 2651 0458 0F        		.byte	15
 2652 0459 0F        		.byte	15
 2653 045a 0F        		.byte	15
 2654 045b 38        		.byte	56
 2655 045c 44        		.byte	68
 2656 045d 44        		.byte	68
 2657 045e 38        		.byte	56
 2658 045f 44        		.byte	68
 2659 0460 FC        		.byte	-4
 2660 0461 4A        		.byte	74
 2661 0462 4A        		.byte	74
 2662 0463 4A        		.byte	74
 2663 0464 34        		.byte	52
 2664 0465 7E        		.byte	126
 2665 0466 02        		.byte	2
 2666 0467 02        		.byte	2
 2667 0468 06        		.byte	6
 2668 0469 06        		.byte	6
 2669 046a 02        		.byte	2
 2670 046b 7E        		.byte	126
 2671 046c 02        		.byte	2
 2672 046d 7E        		.byte	126
 2673 046e 02        		.byte	2
 2674 046f 63        		.byte	99
 2675 0470 55        		.byte	85
 2676 0471 49        		.byte	73
 2677 0472 41        		.byte	65
 2678 0473 63        		.byte	99
 2679 0474 38        		.byte	56
 2680 0475 44        		.byte	68
 2681 0476 44        		.byte	68
 2682 0477 3C        		.byte	60
 2683 0478 04        		.byte	4
 2684 0479 40        		.byte	64
 2685 047a 7E        		.byte	126
 2686 047b 20        		.byte	32
 2687 047c 1E        		.byte	30
 2688 047d 20        		.byte	32
 2689 047e 06        		.byte	6
 2690 047f 02        		.byte	2
 2691 0480 7E        		.byte	126
 2692 0481 02        		.byte	2
 2693 0482 02        		.byte	2
 2694 0483 99        		.byte	-103
 2695 0484 A5        		.byte	-91
 2696 0485 E7        		.byte	-25
 2697 0486 A5        		.byte	-91
 2698 0487 99        		.byte	-103
 2699 0488 1C        		.byte	28
 2700 0489 2A        		.byte	42
 2701 048a 49        		.byte	73
 2702 048b 2A        		.byte	42
 2703 048c 1C        		.byte	28
 2704 048d 4C        		.byte	76
 2705 048e 72        		.byte	114
 2706 048f 01        		.byte	1
 2707 0490 72        		.byte	114
 2708 0491 4C        		.byte	76
 2709 0492 30        		.byte	48
 2710 0493 4A        		.byte	74
 2711 0494 4D        		.byte	77
 2712 0495 4D        		.byte	77
 2713 0496 30        		.byte	48
 2714 0497 30        		.byte	48
 2715 0498 48        		.byte	72
 2716 0499 78        		.byte	120
 2717 049a 48        		.byte	72
 2718 049b 30        		.byte	48
 2719 049c BC        		.byte	-68
 2720 049d 62        		.byte	98
 2721 049e 5A        		.byte	90
 2722 049f 46        		.byte	70
 2723 04a0 3D        		.byte	61
 2724 04a1 3E        		.byte	62
 2725 04a2 49        		.byte	73
 2726 04a3 49        		.byte	73
 2727 04a4 49        		.byte	73
 2728 04a5 00        		.byte	0
 2729 04a6 7E        		.byte	126
 2730 04a7 01        		.byte	1
 2731 04a8 01        		.byte	1
 2732 04a9 01        		.byte	1
 2733 04aa 7E        		.byte	126
 2734 04ab 2A        		.byte	42
 2735 04ac 2A        		.byte	42
 2736 04ad 2A        		.byte	42
 2737 04ae 2A        		.byte	42
 2738 04af 2A        		.byte	42
 2739 04b0 44        		.byte	68
 2740 04b1 44        		.byte	68
 2741 04b2 5F        		.byte	95
 2742 04b3 44        		.byte	68
 2743 04b4 44        		.byte	68
 2744 04b5 40        		.byte	64
 2745 04b6 51        		.byte	81
 2746 04b7 4A        		.byte	74
 2747 04b8 44        		.byte	68
 2748 04b9 40        		.byte	64
 2749 04ba 40        		.byte	64
 2750 04bb 44        		.byte	68
 2751 04bc 4A        		.byte	74
 2752 04bd 51        		.byte	81
 2753 04be 40        		.byte	64
 2754 04bf 00        		.byte	0
 2755 04c0 00        		.byte	0
 2756 04c1 FF        		.byte	-1
 2757 04c2 01        		.byte	1
 2758 04c3 03        		.byte	3
 2759 04c4 E0        		.byte	-32
 2760 04c5 80        		.byte	-128
 2761 04c6 FF        		.byte	-1
 2762 04c7 00        		.byte	0
 2763 04c8 00        		.byte	0
 2764 04c9 08        		.byte	8
 2765 04ca 08        		.byte	8
 2766 04cb 6B        		.byte	107
 2767 04cc 6B        		.byte	107
 2768 04cd 08        		.byte	8
 2769 04ce 36        		.byte	54
 2770 04cf 12        		.byte	18
 2771 04d0 36        		.byte	54
 2772 04d1 24        		.byte	36
 2773 04d2 36        		.byte	54
 2774 04d3 06        		.byte	6
 2775 04d4 0F        		.byte	15
 2776 04d5 09        		.byte	9
 2777 04d6 0F        		.byte	15
 2778 04d7 06        		.byte	6
 2779 04d8 00        		.byte	0
 2780 04d9 00        		.byte	0
 2781 04da 18        		.byte	24
 2782 04db 18        		.byte	24
 2783 04dc 00        		.byte	0
 2784 04dd 00        		.byte	0
 2785 04de 00        		.byte	0
 2786 04df 10        		.byte	16
 2787 04e0 10        		.byte	16
 2788 04e1 00        		.byte	0
 2789 04e2 30        		.byte	48
 2790 04e3 40        		.byte	64
 2791 04e4 FF        		.byte	-1
 2792 04e5 01        		.byte	1
 2793 04e6 01        		.byte	1
 2794 04e7 00        		.byte	0
 2795 04e8 1F        		.byte	31
 2796 04e9 01        		.byte	1
 2797 04ea 01        		.byte	1
 2798 04eb 1E        		.byte	30
 2799 04ec 00        		.byte	0
 2800 04ed 19        		.byte	25
 2801 04ee 1D        		.byte	29
 2802 04ef 17        		.byte	23
 2803 04f0 12        		.byte	18
 2804 04f1 00        		.byte	0
 2805 04f2 3C        		.byte	60
 2806 04f3 3C        		.byte	60
 2807 04f4 3C        		.byte	60
 2808 04f5 3C        		.byte	60
 2809 04f6 00        		.byte	0
 2810 04f7 00        		.byte	0
 2811 04f8 00        		.byte	0
 2812 04f9 00        		.byte	0
 2813 04fa 00        		.byte	0
 2814               		.data
 2817               	mydata:
 2818 0000 0000 00   		.zero	3
 2819 0003 02        		.byte	2
 2820 0004 0000 0000 		.zero	4
 2821 0008 0000      		.word	gs(ili9341_putchar_printf)
 2822 000a 0000      		.word	0
 2823 000c 0000      		.word	0
 2824               		.comm	iactualy,2,1
 2825               		.comm	iactualx,2,1
 2826               		.comm	isety,2,1
 2827               		.comm	isetx,2,1
 2828               		.comm	vactualy,2,1
 2829               		.comm	vactualx,2,1
 2830               		.comm	vsety,2,1
 2831               		.comm	vsetx,2,1
 2832               		.comm	textsize,1,1
 2833               		.comm	textbgcolour,2,1
 2834               		.comm	textcolour,2,1
 2835               		.comm	cursor_y,2,1
 2836               		.comm	cursor_x,2,1
 2837               		.text
 2838               	.Letext0:
 2839               		.file 3 "/usr/avr/include/stdint.h"
 2840               		.file 4 "/usr/avr/include/stdio.h"
 2841               		.file 5 "ili9341.h"
 2842               		.file 6 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ili9341gfx.c
     /tmp/ccaSiVHd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccaSiVHd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccaSiVHd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccaSiVHd.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccaSiVHd.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccaSiVHd.s:12     .text:0000000000000000 backuplocationvset
                            *COM*:0000000000000002 cursor_x
                            *COM*:0000000000000002 vsetx
                            *COM*:0000000000000002 cursor_y
                            *COM*:0000000000000002 vsety
     /tmp/ccaSiVHd.s:39     .text:0000000000000022 backuplocationvactual
                            *COM*:0000000000000002 vactualx
                            *COM*:0000000000000002 vactualy
     /tmp/ccaSiVHd.s:65     .text:0000000000000044 backuplocationiset
                            *COM*:0000000000000002 isetx
                            *COM*:0000000000000002 isety
     /tmp/ccaSiVHd.s:91     .text:0000000000000066 backuplocationiactual
                            *COM*:0000000000000002 iactualx
                            *COM*:0000000000000002 iactualy
     /tmp/ccaSiVHd.s:117    .text:0000000000000088 ili9341_drawchar
     /tmp/ccaSiVHd.s:1538   .progmem.data:0000000000000000 font
     /tmp/ccaSiVHd.s:454    .text:00000000000001ec ili9341_setcursor
     /tmp/ccaSiVHd.s:477    .text:00000000000001fe ili9341_settextcolour
                            *COM*:0000000000000002 textcolour
                            *COM*:0000000000000002 textbgcolour
     /tmp/ccaSiVHd.s:500    .text:0000000000000210 ili9341_settextsize
                            *COM*:0000000000000001 textsize
     /tmp/ccaSiVHd.s:529    .text:0000000000000220 ili9341_write
     /tmp/ccaSiVHd.s:619    .text:00000000000002a8 ili9341_putchar_printf
     /tmp/ccaSiVHd.s:659    .text:00000000000002b2 display_init
     /tmp/ccaSiVHd.s:2817   .data:0000000000000000 mydata

UNDEFINED SYMBOLS
LCD_W
LCD_H
ili9341_drawpixel
ili9341_fillrect
__iob
printf
puts
__do_copy_data
__do_clear_bss
